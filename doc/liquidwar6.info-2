This is liquidwar6.info, produced by makeinfo version 5.2 from
liquidwar6.texi.

Liquid War 6, a unique multiplayer wargame.

   Copyright (c) 2005, 2006, 2007, 2008, 2009, 2010, 2011, 2012, 2013,
2014, 2015 Christian Mauduit <ufoot@ufoot.org>

     Permission is granted to copy, distribute and/or modify this
     document under the terms of the GNU Free Documentation License,
     Version 1.3 or any later version published by the Free Software
     Foundation; with no Invariant Sections, no Front-Cover Texts and no
     Back-Cover Texts.  A copy of the license is included in the section
     entitled "GNU Free Documentation License".
START-INFO-DIR-ENTRY
* Liquid War 6: (liquidwar6).   A unique multiplayer wargame.
END-INFO-DIR-ENTRY


File: liquidwar6.info,  Node: Map hints.xml,  Next: Map style.xml,  Prev: Map rules.xml,  Up: Reference

4.12 Map hints.xml
==================

4.12.1 background-color-auto
----------------------------

 -- Command-line option: '--background-color-auto=<value>'
 -- Environment variable: 'LW6_BACKGROUND_COLOR_AUTO'
 -- XML key: 'background-color-auto'
     Type: boolean

     Default value: true

     Defines wether hud colors will be set automatically from base and
     alternate colors.  This is a time saver to keep map designers from
     requiring to redefined every single color in the game.  You only
     need to set color-base-bg, color-base-fg, color-alternate-bg and
     color-alternate-fg.  Then hud_color_frame_bg, hud_color_frame_fg,
     hud_color_text_bg and hud_color_text_fg will be automatically set.

4.12.2 downsize-using-bench-value
---------------------------------

 -- Command-line option: '--downsize-using-bench-value=<value>'
 -- Environment variable: 'LW6_DOWNSIZE_USING_BENCH_VALUE'
 -- XML key: 'downsize-using-bench-value'
     Type: boolean

     Default value: true

     If set, then the game will automatically downsize a map according
     to the 'bench-value' parameter.  Downsizing means: a 1600x1200 maps
     becomes 200x150, for instance.  Downsizing causes fighters to be
     bigger because map resolution is lower.  This will avoid running
     the game on a too big map, with your computer not being able to
     handle it at the required speed.

4.12.3 downsize-using-fighter-scale
-----------------------------------

 -- Command-line option: '--downsize-using-fighter-scale=<value>'
 -- Environment variable: 'LW6_DOWNSIZE_USING_FIGHTER_SCALE'
 -- XML key: 'downsize-using-fighter-scale'
     Type: boolean

     Default value: false

     If set, then the game will automatically downsize a map according
     to the 'fighter-scale' parameter.  Downsizing means: a 1600x1200
     maps becomes 200x150, for instance.  Downsizing causes fighters to
     be bigger because map resolution is lower.  This can be usefull if
     you don't want fighters to be too small.

4.12.4 fighter-scale
--------------------

 -- Command-line option: '--fighter-scale=<value>'
 -- Environment variable: 'LW6_FIGHTER_SCALE'
 -- XML key: 'fighter-scale'
     Type: float

     Default value: 1.0

     Defines how wide (in pixels) fighters must be.  This parameter is
     very important and will largely condition the number of fighters on
     the map.  It is used when loading the map.  If it is, for instance,
     set to 1, there will be exactly a fighter per pixel on the screen.
     That is, if you play 640x480 on an empty map, the maximum fighters
     you could have is about 300000.  The idea is that by changing the
     resolution, you also define the density of the map.  In pratice,
     this is done in the hope that someone with a slow computer will
     pick up a low resolution and therefore play small levels.
     Conversely, someone with a brand new computer with powerfull CPU &
     GPU will use great resolutions and be happy with many fighters on
     the map.  Still, changing the resolution after loading the map will
     not affet the number of fighters.  Same for network games, the
     first player, who loads the map, defines its properties according
     to its own settings.

4.12.5 guess-colors
-------------------

 -- Command-line option: '--guess-colors=<value>'
 -- Environment variable: 'LW6_GUESS_COLORS'
 -- XML key: 'guess-colors'
     Type: boolean

     Default value: true

     Defines wether colors should be set automatically from texture
     colors.  If set to true, then the program will try to pick up
     colors automatically from the texture, and will override the values
     of the color-base-bg, color-base-fg, color-alternate-bg and
     color-alternate-fg parameters.  How these colors are picked up
     can't be garanteed, so if the map does not have strong contrast or
     if there can be any form of ambiguity, it's safe to set this to
     false and define one's own colors.

4.12.6 guess-moves-per-sec
--------------------------

 -- Command-line option: '--guess-moves-per-sec=<value>'
 -- Environment variable: 'LW6_GUESS_MOVES_PER_SEC'
 -- XML key: 'guess-moves-per-sec'
     Type: boolean

     Default value: true

     If set, then loader will use 'time-to-cross-level' to guess the
     game speed parameters.

4.12.7 hud-color-auto
---------------------

 -- Command-line option: '--hud-color-auto=<value>'
 -- Environment variable: 'LW6_HUD_COLOR_AUTO'
 -- XML key: 'hud-color-auto'
     Type: boolean

     Default value: true

     Defines wether hud colors will be set automatically from base and
     alternate colors.  This is a time saver to keep map designers from
     requiring to redefined every single color in the game.  You only
     need to set color-base-bg, color-base-fg, color-alternate-bg and
     color-alternate-fg.  Then hud_color_frame_bg, hud_color_frame_fg,
     hud_color_text_bg and hud_color_text_fg will be automatically set.

4.12.8 max-map-height
---------------------

 -- Command-line option: '--max-map-height=<value>'
 -- Environment variable: 'LW6_MAX_MAP_HEIGHT'
 -- XML key: 'max-map-height'
     Type: integer

     Default value: 1000

     Allows you to give a maximum map height.  When designing a map you
     might wonder: this is dumb I'm conceiving this map I know its
     height, why should I limit it?  Now think of the play who plays on
     a old slowish computer with a tiny screen.  He might redefine this
     himself, and does not necessarly wishes to fire Gimp to rescale the
     map.

4.12.9 max-map-surface
----------------------

 -- Command-line option: '--max-map-surface=<value>'
 -- Environment variable: 'LW6_MAX_MAP_SURFACE'
 -- XML key: 'max-map-surface'
     Type: integer

     Default value: 1000000

     Allows you to give a maximum map surface.  Map surface is simply
     (width * height).  This parameter is just here to save you the
     hassle of defining both 'max-map-width' and 'max-map-height' in a
     consistent manner.

4.12.10 max-map-width
---------------------

 -- Command-line option: '--max-map-width=<value>'
 -- Environment variable: 'LW6_MAX_MAP_WIDTH'
 -- XML key: 'max-map-width'
     Type: integer

     Default value: 1500

     Allows you to give a maximum map width.  When designing a map you
     might wonder: this is dumb I'm conceiving this map I know its
     width, why should I limit it?  Now think of the play who plays on a
     old slowish computer with a tiny screen.  He might redefine this
     himself, and does not necessarly wishes to fire Gimp to rescale the
     map.

4.12.11 menu-color-auto
-----------------------

 -- Command-line option: '--menu-color-auto=<value>'
 -- Environment variable: 'LW6_MENU_COLOR_AUTO'
 -- XML key: 'menu-color-auto'
     Type: boolean

     Default value: true

     Defines wether menu colors will be set automatically from base and
     alternate colors.  This is a time saver to keep map designers from
     requiring to redefined every single color in the game.  You only
     need to set color-base-bg, color-base-fg, color-alternate-bg and
     color-alternate-fg.  Then menu_color_default_bg,
     menu_color_default_fg, menu_color_selected_bg,
     menu_color_selected_fg, menu_color_disabled_bg and
     menu_color_disabled_fg will be automatically set.

4.12.12 min-map-height
----------------------

 -- Command-line option: '--min-map-height=<value>'
 -- Environment variable: 'LW6_MIN_MAP_HEIGHT'
 -- XML key: 'min-map-height'
     Type: integer

     Default value: 30

     Allows you to give a minimum map height.  When designing a map you
     might wonder: this is dumb I'm conceiving this map I know its
     height, why should I limit it?  Now think of the player who decided
     to play with highly-defined maps because he has a super calculator
     and a hudge screen.  He might redefine this himself, and does not
     necessarly wishes to fire Gimp to rescale the map.

4.12.13 min-map-surface
-----------------------

 -- Command-line option: '--min-map-surface=<value>'
 -- Environment variable: 'LW6_MIN_MAP_SURFACE'
 -- XML key: 'min-map-surface'
     Type: integer

     Default value: 3600

     Allows you to give a minimum map surface.  Map surface is simply
     (width * height).  This parameter is just here to save you the
     hassle of defining both 'min-map-width' and 'min-map-height' in a
     consistent manner.

4.12.14 min-map-width
---------------------

 -- Command-line option: '--min-map-width=<value>'
 -- Environment variable: 'LW6_MIN_MAP_WIDTH'
 -- XML key: 'min-map-width'
     Type: integer

     Default value: 40

     Allows you to give a minimum map width.  When designing a map you
     might wonder: this is dumb I'm conceiving this map I know its
     width, why should I limit it?  Now think of the player who decided
     to play with highly-defined maps because he has a super calculator
     and a hudge screen.  He might redefine this himself, and does not
     necessarly wishes to fire Gimp to rescale the map.

4.12.15 resample
----------------

 -- Command-line option: '--resample=<value>'
 -- Environment variable: 'LW6_RESAMPLE'
 -- XML key: 'resample'
     Type: boolean

     Default value: true

     If set to true, maps will always be resampled to a size which
     depends on your screen resolution, zoom factor, and the rest.  If
     false, maps will be set at the exact resolution of map.png.

4.12.16 speed
-------------

 -- Command-line option: '--speed=<value>'
 -- Environment variable: 'LW6_SPEED'
 -- XML key: 'speed'
     Type: float

     Default value: 1.0

     This parameter is the main parameter on which game speed depends.
     The map loader will garantee, by downscaling the map, that to cross
     the level (by crossing the level we mean, for instance, going from
     top-left corner to bottom-right corner in a straight line) a
     fighter will take a constant amount of time.  Under the hood, the
     loader might of course rescale the map but it will also change game
     speed so that, at the end, fighters take a constant time to cross
     the level.  This is, indeed, the most important thing, players do
     not care much if internally there are X or Y moves per second, the
     global game experience depends on how fast fighter movement looks
     on the screen.  The default settings corresponds roughly to one
     second to cross the level.  If you set this to 2.0, it will go
     twice faster.

4.12.17 system-color-auto
-------------------------

 -- Command-line option: '--system-color-auto=<value>'
 -- Environment variable: 'LW6_SYSTEM_COLOR_AUTO'
 -- XML key: 'system-color-auto'
     Type: boolean

     Default value: true

     Defines wether system colors will be set automatically from base
     and alternate colors.  This is a time saver to keep map designers
     from requiring to redefined every single color in the game.  You
     only need to set color-base-bg, color-base-fg, color-alternate-bg
     and color-alternate-fg.  Then system_color_bg and system_color_fg
     will be automatically set.

4.12.18 upsize-using-bench-value
--------------------------------

 -- Command-line option: '--upsize-using-bench-value=<value>'
 -- Environment variable: 'LW6_UPSIZE_USING_BENCH_VALUE'
 -- XML key: 'upsize-using-bench-value'
     Type: boolean

     Default value: false

     If set, then the game will automatically upsize a map according to
     the 'fighter-scale' parameter.  Upsizing means: a 160x120 maps
     becomes 400x300, for instance.  Upsizing causes fighters to be
     smaller because map resolution is higher.  This will avoid useless
     pixelish 'jumbo fighters' look when your computer is powerfull
     enough to do better.

4.12.19 upsize-using-fighter-scale
----------------------------------

 -- Command-line option: '--upsize-using-fighter-scale=<value>'
 -- Environment variable: 'LW6_UPSIZE_USING_FIGHTER_SCALE'
 -- XML key: 'upsize-using-fighter-scale'
     Type: boolean

     Default value: true

     If set, then the game will automatically upsize a map according to
     the 'fighter-scale' parameter.  Upsizing means: a 160x120 maps
     becomes 400x300, for instance.  Upsizing causes fighters to be
     smaller because map resolution is higher.  This can be usefull if
     you don't want fighters to be too big.

4.12.20 view-color-auto
-----------------------

 -- Command-line option: '--view-color-auto=<value>'
 -- Environment variable: 'LW6_VIEW_COLOR_AUTO'
 -- XML key: 'view-color-auto'
     Type: boolean

     Default value: true

     Defines wether view colors will be set automatically from base and
     alternate colors.  This is a time saver to keep map designers from
     requiring to redefined every single color in the game.  You only
     need to set color-base-bg, color-base-fg, color-alternate-bg and
     color-alternate-fg.  Then view_color_cursor_bg,
     view_color_cursor_fg, view_color_map_bg and view_color_map_fg will
     be automatically set.

4.12.21 wall-grease
-------------------

 -- Command-line option: '--wall-grease=<value>'
 -- Environment variable: 'LW6_WALL_GREASE'
 -- XML key: 'wall-grease'
     Type: integer

     Default value: 0 Min value: -5 Max value: 5

     This parameter allows you to make walls (AKA map foreground)
     thicker, or thiner, when map is loaded.  Indeed, when map are
     resampled, and especially when they are downscaled, some walls may
     disappear, or some passages may be blocked.  The loader can't
     automatically figure out wether it's more important to keep an
     existing wall or to keep an open passage for fighters.  This
     parameter helps doing so, if you set it to a low value, level will
     be less greasy, and many passages might open themselves.  On the
     contrary, if grease is at a high level, then a thin line of almost
     isolated pixels might become a thick wall.  There's no real
     garantee your wall or passage will always be present, but it's a
     same bet to assume on a 'tunnel-like' level one needs to set grease
     to a low value, and on a 'wide open' level with few walls one needs
     to set grease to a high value.


File: liquidwar6.info,  Node: Map style.xml,  Next: Map teams.xml,  Prev: Map hints.xml,  Up: Reference

4.13 Map style.xml
==================

4.13.1 animation-density
------------------------

 -- Command-line option: '--animation-density=<value>'
 -- Environment variable: 'LW6_ANIMATION_DENSITY'
 -- XML key: 'animation-density'
     Type: float

     Default value: 1.0 Min value: 0 Max value: 10

     Density of the background animation, that is, for instance, if the
     background animation is about displaying bubbles, using a high
     value will display many bubbles.  A value of 1.0 corresponds to the
     default setting.

4.13.2 animation-speed
----------------------

 -- Command-line option: '--animation-speed=<value>'
 -- Environment variable: 'LW6_ANIMATION_SPEED'
 -- XML key: 'animation-speed'
     Type: float

     Default value: 1.0 Min value: 0 Max value: 10

     Speed of the background animation, that is, for instance, if the
     background animation is about displaying bubbles, using a high
     value will cause bubbles to move very fast.  A value of 1.0
     corresponds to the default setting.

4.13.3 background-color-root-bg
-------------------------------

 -- Command-line option: '--background-color-root-bg=<value>'
 -- Environment variable: 'LW6_BACKGROUND_COLOR_ROOT_BG'
 -- XML key: 'background-color-root-bg'
     Type: color

     Default value: #000000

     Defines the main background color.  This is, for instance, the
     color which will be used to clear the screen before drawing thing.
     Will be automatically guessed from the map texture if color-auto is
     set.  Can be #RGB, #RGBA, #RRGGBB or #RRGGBBAA.

4.13.4 background-color-root-fg
-------------------------------

 -- Command-line option: '--background-color-root-fg=<value>'
 -- Environment variable: 'LW6_BACKGROUND_COLOR_ROOT_FG'
 -- XML key: 'background-color-root-fg'
     Type: color

     Default value: #cccccc

     Defines a color which will be used together with color-base-bg to
     compose the background.  It can be wise to have a minimum contrast
     between this color and color-base-bg, but it is not mandatory,
     especially if other colors are manually redefined.  Will be
     automatically guessed from the map texture if color-auto is set.
     Can be #RGB, #RGBA, #RRGGBB or #RRGGBBAA.

4.13.5 background-color-stuff-bg
--------------------------------

 -- Command-line option: '--background-color-stuff-bg=<value>'
 -- Environment variable: 'LW6_BACKGROUND_COLOR_STUFF_BG'
 -- XML key: 'background-color-stuff-bg'
     Type: color

     Default value: #333333

     Defines a color which will be used together with color-alternate-fg
     to draw things (animations, sprites, text, whatever) in the
     background.  It should be different enough from color-alternate-fg
     so that one can really distinguish these colors.  Will be
     automatically guessed from the map texture if color-auto is set.
     Can be #RGB, #RGBA, #RRGGBB or #RRGGBBAA.

4.13.6 background-color-stuff-fg
--------------------------------

 -- Command-line option: '--background-color-stuff-fg=<value>'
 -- Environment variable: 'LW6_BACKGROUND_COLOR_STUFF_FG'
 -- XML key: 'background-color-stuff-fg'
     Type: color

     Default value: #ffffff

     Defines a color which will be used to draw things (animations,
     sprites, text, whatever) in the background.  It should be different
     enough from color-alternate-bg so that one can really distinguish
     these colors.  Think of this as the sprite, the text, the
     whatever-needs-to-be-seen-uses-this color.  Will be automatically
     guessed from the map texture if color-auto is set.  Can be #RGB,
     #RGBA, #RRGGBB or #RRGGBBAA.

4.13.7 background-style
-----------------------

 -- Command-line option: '--background-style=<value>'
 -- Environment variable: 'LW6_BACKGROUND_STYLE'
 -- XML key: 'background-style'
     Type: string

     Default value: bubbles

     The background defines, of course, what is displayed at the
     background, but it also conditions the colors used for other items,
     such as the menus for instance.  The possible values are 'void' and
     'bubbles'.

4.13.8 blink-cursor
-------------------

 -- Command-line option: '--blink-cursor=<value>'
 -- Environment variable: 'LW6_BLINK_CURSOR'
 -- XML key: 'blink-cursor'
     Type: boolean

     Default value: false

     If set, then cursor will blink, allowing you to see what's under
     the cursor.  It's just a matter of taste, you might to always have
     your cursor displayed, or prefer to have it disappear from time to
     time so that you can see the action below

4.13.9 color-alternate-bg
-------------------------

 -- Command-line option: '--color-alternate-bg=<value>'
 -- Environment variable: 'LW6_COLOR_ALTERNATE_BG'
 -- XML key: 'color-alternate-bg'
     Type: color

     Default value: #333333

     Defines the alternate color, more precisely, its bg (background)
     part.  Colors are always defined by a bg/fg pair.  Most colors in
     the game can be deduced from this one, usually to color a map you
     only need to define color-base-bg, color-base-fg,
     color-alternate-bg and color-alternate-fg.

4.13.10 color-alternate-fg
--------------------------

 -- Command-line option: '--color-alternate-fg=<value>'
 -- Environment variable: 'LW6_COLOR_ALTERNATE_FG'
 -- XML key: 'color-alternate-fg'
     Type: color

     Default value: #ffffff

     Defines the alternate color, more precisely, its fg (foreground)
     part.  Colors are always defined by a bg/fg pair.  Most colors in
     the game can be deduced from this one, usually to color a map you
     only need to define color-base-bg, color-base-fg,
     color-alternate-bg and color-alternate-fg.

4.13.11 color-base-bg
---------------------

 -- Command-line option: '--color-base-bg=<value>'
 -- Environment variable: 'LW6_COLOR_BASE_BG'
 -- XML key: 'color-base-bg'
     Type: color

     Default value: #000000

     Defines the base color, more precisely, its bg (background) part.
     Colors are always defined by a bg/fg pair.  Most colors in the game
     can be deduced from this one, usually to color a map you only need
     to define color-base-bg, color-base-fg, color-alternate-bg and
     color-alternate-fg.

4.13.12 color-base-fg
---------------------

 -- Command-line option: '--color-base-fg=<value>'
 -- Environment variable: 'LW6_COLOR_BASE_FG'
 -- XML key: 'color-base-fg'
     Type: color

     Default value: #cccccc

     Defines the base color, more precisely, its fg (foreground) part.
     Colors are always defined by a bg/fg pair.  Most colors in the game
     can be deduced from this one, usually to color a map you only need
     to define color-base-bg, color-base-fg, color-alternate-bg and
     color-alternate-fg.

4.13.13 colorize
----------------

 -- Command-line option: '--colorize=<value>'
 -- Environment variable: 'LW6_COLORIZE'
 -- XML key: 'colorize'
     Type: boolean

     Default value: true

     If set, then all background drawings including textures will use
     the background colors.  This means, for instance, that if
     background colors are set automatically by color-auto from the map
     texture, then the background will adopt the same range of colors
     than the map itself.  In short, the background will mimic the map.

4.13.14 colorize-cursor
-----------------------

 -- Command-line option: '--colorize-cursor=<value>'
 -- Environment variable: 'LW6_COLORIZE_CURSOR'
 -- XML key: 'colorize-cursor'
     Type: boolean

     Default value: true

     If set, then all cursors will use the automatic guessed colors, or
     the specified colors, but basically they won't be displayed using
     their native colors.  This can be usefull for you can wish to use a
     generic non-colored texture for your cursor and let it be colorized
     automatically so that it's accorded to the level.

4.13.15 cursor-size
-------------------

 -- Command-line option: '--cursor-size=<value>'
 -- Environment variable: 'LW6_CURSOR_SIZE'
 -- XML key: 'cursor-size'
     Type: float

     Default value: 1.0 Min value: 0 Max value: 10

     Size of the cursors on the map.  1 is the default, setting it to a
     higher value will make cursors bigger, a lower value will make them
     smaller.

4.13.16 hidden-layer-alpha
--------------------------

 -- Command-line option: '--hidden-layer-alpha=<value>'
 -- Environment variable: 'LW6_HIDDEN_LAYER_ALPHA'
 -- XML key: 'hidden-layer-alpha'
     Type: float

     Default value: 0.1 Min value: 0 Max value: 1

     Whenever players are supposed to be hidden behind a wall, for
     instance if they are in layer 2 and layer 1 is filled with walls,
     it's still possible to see them, but with a low alpha value (almost
     transparent).  This parameter allows you to trick this value, 0
     will make these players absolutely invisible, 1 will make them
     totally opaque, like if they were on layer 1.

4.13.17 hud-color-frame-bg
--------------------------

 -- Command-line option: '--hud-color-frame-bg=<value>'
 -- Environment variable: 'LW6_HUD_COLOR_FRAME_BG'
 -- XML key: 'hud-color-frame-bg'
     Type: color

     Default value: #000000

     Defines the background color for the hud frame.  Ignored if
     hud-color-auto is set.  Can be #RGB, #RGBA, #RRGGBB or #RRGGBBAA.

4.13.18 hud-color-frame-fg
--------------------------

 -- Command-line option: '--hud-color-frame-fg=<value>'
 -- Environment variable: 'LW6_HUD_COLOR_FRAME_FG'
 -- XML key: 'hud-color-frame-fg'
     Type: color

     Default value: #cccccc

     Defines the foreground color for the hud frame.  Ignored if
     hud-color-auto is set.  Can be #RGB, #RGBA, #RRGGBB or #RRGGBBAA.

4.13.19 hud-color-text-bg
-------------------------

 -- Command-line option: '--hud-color-text-bg=<value>'
 -- Environment variable: 'LW6_HUD_COLOR_TEXT_BG'
 -- XML key: 'hud-color-text-bg'
     Type: color

     Default value: #333333

     Defines the background color for hud text.  Ignored if
     hud-color-auto is set.  Can be #RGB, #RGBA, #RRGGBB or #RRGGBBAA.

4.13.20 hud-color-text-fg
-------------------------

 -- Command-line option: '--hud-color-text-fg=<value>'
 -- Environment variable: 'LW6_HUD_COLOR_TEXT_FG'
 -- XML key: 'hud-color-text-fg'
     Type: color

     Default value: #ffffff

     Defines the foreground color for hud text.  Ignored if
     hud-color-auto is set.  Can be #RGB, #RGBA, #RRGGBB or #RRGGBBAA.

4.13.21 hud-style
-----------------

 -- Command-line option: '--hud-style=<value>'
 -- Environment variable: 'LW6_HUD_STYLE'
 -- XML key: 'hud-style'
     Type: string

     Default value: floating

     The hud is where informations about the game are displayed.  This
     means, who is winning, are other status-like informations.
     Possible values include 'floating' and 'tactical'.

4.13.22 keep-ratio
------------------

 -- Command-line option: '--keep-ratio=<value>'
 -- Environment variable: 'LW6_KEEP_RATIO'
 -- XML key: 'keep-ratio'
     Type: boolean

     Default value: true

     Defines wether the map should keep its ratio, or if it should be
     stretched to fill the shape of your screen.

4.13.23 menu-color-default-bg
-----------------------------

 -- Command-line option: '--menu-color-default-bg=<value>'
 -- Environment variable: 'LW6_MENU_COLOR_DEFAULT_BG'
 -- XML key: 'menu-color-default-bg'
     Type: color

     Default value: #333333

     Defines the default background color for menus.  Ignored if
     menu-color-auto is set.  Can be #RGB, #RGBA, #RRGGBB or #RRGGBBAA.

4.13.24 menu-color-default-fg
-----------------------------

 -- Command-line option: '--menu-color-default-fg=<value>'
 -- Environment variable: 'LW6_MENU_COLOR_DEFAULT_FG'
 -- XML key: 'menu-color-default-fg'
     Type: color

     Default value: #ffffff

     Defines the default foreground color for menus.  In fact, this is
     the main color for menu text, the color used to draw letters in
     menus.  Ignored if menu-color-auto is set.  Can be #RGB, #RGBA,
     #RRGGBB or #RRGGBBAA.

4.13.25 menu-color-disabled-bg
------------------------------

 -- Command-line option: '--menu-color-disabled-bg=<value>'
 -- Environment variable: 'LW6_MENU_COLOR_DISABLED_BG'
 -- XML key: 'menu-color-disabled-bg'
     Type: color

     Default value: #000000

     Defines the background color for a disabled menu item.  Ignored if
     menu-color-auto is set.  Can be #RGB, #RGBA, #RRGGBB or #RRGGBBAA.

4.13.26 menu-color-disabled-fg
------------------------------

 -- Command-line option: '--menu-color-disabled-fg=<value>'
 -- Environment variable: 'LW6_MENU_COLOR_DISABLED_FG'
 -- XML key: 'menu-color-disabled-fg'
     Type: color

     Default value: #cccccc

     Defines the foreground color for a disabled menu item.  Ignored if
     menu-color-auto is set.  Can be #RGB, #RGBA, #RRGGBB or #RRGGBBAA.

4.13.27 menu-color-selected-bg
------------------------------

 -- Command-line option: '--menu-color-selected-bg=<value>'
 -- Environment variable: 'LW6_MENU_COLOR_SELECTED_BG'
 -- XML key: 'menu-color-selected-bg'
     Type: color

     Default value: #ffffff

     Defines the background color for a selected menu item.  Ignored if
     menu-color-auto is set.  Can be #RGB, #RGBA, #RRGGBB or #RRGGBBAA.

4.13.28 menu-color-selected-fg
------------------------------

 -- Command-line option: '--menu-color-selected-fg=<value>'
 -- Environment variable: 'LW6_MENU_COLOR_SELECTED_FG'
 -- XML key: 'menu-color-selected-fg'
     Type: color

     Default value: #333333

     Defines the foreground color for a selected menu item.  Ignored if
     menu-color-auto is set.  Can be #RGB, #RGBA, #RRGGBB or #RRGGBBAA.

4.13.29 menu-style
------------------

 -- Command-line option: '--menu-style=<value>'
 -- Environment variable: 'LW6_MENU_STYLE'
 -- XML key: 'menu-style'
     Type: string

     Default value: cylinder

     The menu style is simply the name of the engine used to power the
     menu system.  The only possible value, for now, is 'cylinder'.

4.13.30 music-exclude
---------------------

 -- Command-line option: '--music-exclude=<value>'
 -- Environment variable: 'LW6_MUSIC_EXCLUDE'
 -- XML key: 'music-exclude'
     Type: string

     Default value: Chadburn

     If this string is found in a music file name, it will be excluded
     from the list when playing in random mode.

4.13.31 music-file
------------------

 -- Command-line option: '--music-file=<value>'
 -- Environment variable: 'LW6_MUSIC_FILE'
 -- XML key: 'music-file'
     Type: string

     Default value:

     Allows you to play a custom music file (typically your own ogg
     music) and override default game music.  If file does not exist,
     game will use its internal music.  The file will be searched for in
     the current 'music-path' but also in the current map directory.  No
     absolute or even relative path are allowed, only a plain filename
     with no slash or backslash.  Avoid special characters at all cost.

4.13.32 music-filter
--------------------

 -- Command-line option: '--music-filter=<value>'
 -- Environment variable: 'LW6_MUSIC_FILTER'
 -- XML key: 'music-filter'
     Type: string

     Default value:

     A music filter, used when files are played randomly.  This is not a
     complex regex-enabled filter, just a plain string search.  Even the
     '*' wildcard won't work.  If you want precise control on what music
     file to play, please consider reorganizing your files and/or use
     the 'music-file' parameter.

4.13.33 pixelize
----------------

 -- Command-line option: '--pixelize=<value>'
 -- Environment variable: 'LW6_PIXELIZE'
 -- XML key: 'pixelize'
     Type: boolean

     Default value: false

     Depending on the renderer capabilities, will try to pixelize some
     parts of the game.  This can be used to emulate the old LW5
     appearance.

4.13.34 system-color-bg
-----------------------

 -- Command-line option: '--system-color-bg=<value>'
 -- Environment variable: 'LW6_SYSTEM_COLOR_BG'
 -- XML key: 'system-color-bg'
     Type: color

     Default value: #333333

     Defines the system background color, used when displaying system
     info, such as the number of frames per second.  Can be #RGB, #RGBA,
     #RRGGBB or #RRGGBBAA.

4.13.35 system-color-fg
-----------------------

 -- Command-line option: '--system-color-fg=<value>'
 -- Environment variable: 'LW6_SYSTEM_COLOR_FG'
 -- XML key: 'system-color-fg'
     Type: color

     Default value: #ffffff

     Defines the system foreground color, used when displaying system
     info, such as the number of frames per second.  This will typically
     be text color.  Can be #RGB, #RGBA, #RRGGBB or #RRGGBBAA.

4.13.36 team-color-blue
-----------------------

 -- Command-line option: '--team-color-blue=<value>'
 -- Environment variable: 'LW6_TEAM_COLOR_BLUE'
 -- XML key: 'team-color-blue'
     Type: color

     Default value: #0000ff

     Defines the color for the blue team.  Syntax is HTML-like, #RGB or
     #RRGGBB.

4.13.37 team-color-cyan
-----------------------

 -- Command-line option: '--team-color-cyan=<value>'
 -- Environment variable: 'LW6_TEAM_COLOR_CYAN'
 -- XML key: 'team-color-cyan'
     Type: color

     Default value: #00ffff

     Defines the color for the cyan team.  Syntax is HTML-like, #RGB or
     #RRGGBB.

4.13.38 team-color-dead
-----------------------

 -- Command-line option: '--team-color-dead=<value>'
 -- Environment variable: 'LW6_TEAM_COLOR_DEAD'
 -- XML key: 'team-color-dead'
     Type: color

     Default value: #000000

     Defines the color for the teams when they are dead.  By default it
     is black, this means when a team is weak it becomes black.  Syntax
     is HTML-like, #RGB or #RRGGBB.

4.13.39 team-color-green
------------------------

 -- Command-line option: '--team-color-green=<value>'
 -- Environment variable: 'LW6_TEAM_COLOR_GREEN'
 -- XML key: 'team-color-green'
     Type: color

     Default value: #00ff00

     Defines the color for the green team.  Syntax is HTML-like, #RGB or
     #RRGGBB.

4.13.40 team-color-lightblue
----------------------------

 -- Command-line option: '--team-color-lightblue=<value>'
 -- Environment variable: 'LW6_TEAM_COLOR_LIGHTBLUE'
 -- XML key: 'team-color-lightblue'
     Type: color

     Default value: #88bbff

     Defines the color for the light blue team.  Syntax is HTML-like,
     #RGB or #RRGGBB.

4.13.41 team-color-magenta
--------------------------

 -- Command-line option: '--team-color-magenta=<value>'
 -- Environment variable: 'LW6_TEAM_COLOR_MAGENTA'
 -- XML key: 'team-color-magenta'
     Type: color

     Default value: #ff00ff

     Defines the color for the magenta team.  Syntax is HTML-like, #RGB
     or #RRGGBB.

4.13.42 team-color-orange
-------------------------

 -- Command-line option: '--team-color-orange=<value>'
 -- Environment variable: 'LW6_TEAM_COLOR_ORANGE'
 -- XML key: 'team-color-orange'
     Type: color

     Default value: #ff8800

     Defines the color for the orange team.  Syntax is HTML-like, #RGB
     or #RRGGBB.

4.13.43 team-color-pink
-----------------------

 -- Command-line option: '--team-color-pink=<value>'
 -- Environment variable: 'LW6_TEAM_COLOR_PINK'
 -- XML key: 'team-color-pink'
     Type: color

     Default value: #ff88bb

     Defines the color for the pink team.  Syntax is HTML-like, #RGB or
     #RRGGBB.

4.13.44 team-color-purple
-------------------------

 -- Command-line option: '--team-color-purple=<value>'
 -- Environment variable: 'LW6_TEAM_COLOR_PURPLE'
 -- XML key: 'team-color-purple'
     Type: color

     Default value: #bb88ff

     Defines the color for the purple team.  Syntax is HTML-like, #RGB
     or #RRGGBB.

4.13.45 team-color-red
----------------------

 -- Command-line option: '--team-color-red=<value>'
 -- Environment variable: 'LW6_TEAM_COLOR_RED'
 -- XML key: 'team-color-red'
     Type: color

     Default value: #ff0000

     Defines the color for the red team.  Syntax is HTML-like, #RGB or
     #RRGGBB.

4.13.46 team-color-yellow
-------------------------

 -- Command-line option: '--team-color-yellow=<value>'
 -- Environment variable: 'LW6_TEAM_COLOR_YELLOW'
 -- XML key: 'team-color-yellow'
     Type: color

     Default value: #ffff00

     Defines the color for the yellow team.  Syntax is HTML-like, #RGB
     or #RRGGBB.

4.13.47 view-color-cursor-bg
----------------------------

 -- Command-line option: '--view-color-cursor-bg=<value>'
 -- Environment variable: 'LW6_VIEW_COLOR_CURSOR_BG'
 -- XML key: 'view-color-cursor-bg'
     Type: color

     Default value: #333333

     Defines the background cursor color.  Will typically be used to
     draw the shape of the cursor.  Ignored if view-color-auto is set.
     Can be #RGB, #RGBA, #RRGGBB or #RRGGBBAA.

4.13.48 view-color-cursor-fg
----------------------------

 -- Command-line option: '--view-color-cursor-fg=<value>'
 -- Environment variable: 'LW6_VIEW_COLOR_CURSOR_FG'
 -- XML key: 'view-color-cursor-fg'
     Type: color

     Default value: #ffffff

     Defines the foreground cursor color.  Will typically be used to
     draw text in the cursor.  Ignored if view-color-auto is set.  Can
     be #RGB, #RGBA, #RRGGBB or #RRGGBBAA.

4.13.49 view-color-map-bg
-------------------------

 -- Command-line option: '--view-color-map-bg=<value>'
 -- Environment variable: 'LW6_VIEW_COLOR_MAP_BG'
 -- XML key: 'view-color-map-bg'
     Type: color

     Default value: #000000

     Defines the background map color.  If there's no map texture
     defined or if use-texture is false, this is the color of the places
     where armies will go.  Ignored if view-color-auto is set.  Can be
     #RGB, #RGBA, #RRGGBB or #RRGGBBAA.

4.13.50 view-color-map-fg
-------------------------

 -- Command-line option: '--view-color-map-fg=<value>'
 -- Environment variable: 'LW6_VIEW_COLOR_MAP_FG'
 -- XML key: 'view-color-map-fg'
     Type: color

     Default value: #cccccc

     Defines the foreground map color.  If there's no map texture
     defined or if use-texture is false, this is the color of walls,
     what armies can't go through.  Ignored if view-color-auto is set.
     Can be #RGB, #RGBA, #RRGGBB or #RRGGBBAA.

4.13.51 view-style
------------------

 -- Command-line option: '--view-style=<value>'
 -- Environment variable: 'LW6_VIEW_STYLE'
 -- XML key: 'view-style'
     Type: string

     Default value: flat

     The view style conditions which renderer is used for the map, the
     area where fighters are displayed.  This is not the graphics
     backend.  Indeed, the graphics backend defines which technical tool
     one uses (which library) one runs, wether this parameter says what
     kind of rendering one wants.

4.13.52 waves
-------------

 -- Command-line option: '--waves=<value>'
 -- Environment variable: 'LW6_WAVES'
 -- XML key: 'waves'
     Type: boolean

     Default value: true

     Activates the wave effect, that's to say level appears to be under
     water when playing.

4.13.53 x-wrap
--------------

 -- Command-line option: '--x-wrap=<value>'
 -- Environment variable: 'LW6_X_WRAP'
 -- XML key: 'x-wrap'
     Type: boolean

     Default value: true

     Defines wether the map should be wrapped on the x axis.  This is
     the companion of 'x-polarity', if no polarity is defined, map can't
     be wrapped, but in some cases, one might wish to have a map with
     polarity but without wrapping if, for instance, textures do not
     tile nicely.

4.13.54 y-wrap
--------------

 -- Command-line option: '--y-wrap=<value>'
 -- Environment variable: 'LW6_Y_WRAP'
 -- XML key: 'y-wrap'
     Type: boolean

     Default value: true

     Defines wether the map should be wrapped on the y axis.  This is
     the companion of 'y-polarity', if no polarity is defined, map can't
     be wrapped, but in some cases, one might wish to have a map with
     polarity but without wrapping if, for instance, textures do not
     tile nicely.

4.13.55 zoom
------------

 -- Command-line option: '--zoom=<value>'
 -- Environment variable: 'LW6_ZOOM'
 -- XML key: 'zoom'
     Type: float

     Default value: 1.0

     Defines the map zoom.  If lower than 1.0, map will occupy only a
     fraction of the screen, if greater than 1.0, some areas will be
     outside the screen, and the player will need to scroll through it.

4.13.56 zoom-max
----------------

 -- Command-line option: '--zoom-max=<value>'
 -- Environment variable: 'LW6_ZOOM_MAX'
 -- XML key: 'zoom-max'
     Type: float

     Default value: 30.0

     Defines the max map zoom.  If set to a high value, you'll be able
     to dynamically view the map with hudge fighters, seeing only a
     fraction of the level.

4.13.57 zoom-min
----------------

 -- Command-line option: '--zoom-min=<value>'
 -- Environment variable: 'LW6_ZOOM_MIN'
 -- XML key: 'zoom-min'
     Type: float

     Default value: 0.3

     Defines the min map zoom.  If set to a low value, you'll be able to
     dynamically view a very small, reduced map.


File: liquidwar6.info,  Node: Map teams.xml,  Next: Advanced settings,  Prev: Map style.xml,  Up: Reference

4.14 Map teams.xml
==================

4.14.1 bot-iq
-------------

 -- Command-line option: '--bot-iq=<value>'
 -- Environment variable: 'LW6_BOT_IQ'
 -- XML key: 'bot-iq'
     Type: integer

     Default value: 100 Min value: 0 Max value: 200

     The IQ (intelligence quotient) of bots.  Typically, a value of 100
     will make the bot behave normally, performing at its best.  A value
     of 0 will just make it act the worst way it can.  Values over 100
     probably won't change anything compared to 100, but this truely
     depends on which bot backend you're running.

4.14.2 bot-speed
----------------

 -- Command-line option: '--bot-speed=<value>'
 -- Environment variable: 'LW6_BOT_SPEED'
 -- XML key: 'bot-speed'
     Type: float

     Default value: 1.0f

     The speed of bots, 1 means normal speed, higher value will speed it
     up, lower will slow it down.  Note that this only has an impact on
     bot engines, not on the game speed itself.

4.14.3 bot1-ai
--------------

 -- Command-line option: '--bot1-ai=<value>'
 -- Environment variable: 'LW6_BOT1_AI'
 -- XML key: 'bot1-ai'
     Type: string

     Default value: idiot

     AI engine for bot number 1.

4.14.4 bot1-color
-----------------

 -- Command-line option: '--bot1-color=<value>'
 -- Environment variable: 'LW6_BOT1_COLOR'
 -- XML key: 'bot1-color'
     Type: string

     Default value: green

     Color for bot number 1.

4.14.5 bot2-ai
--------------

 -- Command-line option: '--bot2-ai=<value>'
 -- Environment variable: 'LW6_BOT2_AI'
 -- XML key: 'bot2-ai'
     Type: string

     Default value: idiot

     AI engine for bot number 2.

4.14.6 bot2-color
-----------------

 -- Command-line option: '--bot2-color=<value>'
 -- Environment variable: 'LW6_BOT2_COLOR'
 -- XML key: 'bot2-color'
     Type: string

     Default value: blue

     Color for bot number 2.

4.14.7 bot3-ai
--------------

 -- Command-line option: '--bot3-ai=<value>'
 -- Environment variable: 'LW6_BOT3_AI'
 -- XML key: 'bot3-ai'
     Type: string

     Default value: random

     AI engine for bot number 3.

4.14.8 bot3-color
-----------------

 -- Command-line option: '--bot3-color=<value>'
 -- Environment variable: 'LW6_BOT3_COLOR'
 -- XML key: 'bot3-color'
     Type: string

     Default value: yellow

     Color for bot number 3.

4.14.9 bot4-ai
--------------

 -- Command-line option: '--bot4-ai=<value>'
 -- Environment variable: 'LW6_BOT4_AI'
 -- XML key: 'bot4-ai'
     Type: string

     Default value: follow

     AI engine for bot number 4.

4.14.10 bot4-color
------------------

 -- Command-line option: '--bot4-color=<value>'
 -- Environment variable: 'LW6_BOT4_COLOR'
 -- XML key: 'bot4-color'
     Type: string

     Default value: cyan

     Color for bot number 4.

4.14.11 bot5-ai
---------------

 -- Command-line option: '--bot5-ai=<value>'
 -- Environment variable: 'LW6_BOT5_AI'
 -- XML key: 'bot5-ai'
     Type: string

     Default value: random

     AI engine for bot number 5.

4.14.12 bot5-color
------------------

 -- Command-line option: '--bot5-color=<value>'
 -- Environment variable: 'LW6_BOT5_COLOR'
 -- XML key: 'bot5-color'
     Type: string

     Default value: magenta

     Color for bot number 5.

4.14.13 bot6-ai
---------------

 -- Command-line option: '--bot6-ai=<value>'
 -- Environment variable: 'LW6_BOT6_AI'
 -- XML key: 'bot6-ai'
     Type: string

     Default value: follow

     AI engine for bot number 6.

4.14.14 bot6-color
------------------

 -- Command-line option: '--bot6-color=<value>'
 -- Environment variable: 'LW6_BOT6_COLOR'
 -- XML key: 'bot6-color'
     Type: string

     Default value: orange

     Color for bot number 6.

4.14.15 bot7-ai
---------------

 -- Command-line option: '--bot7-ai=<value>'
 -- Environment variable: 'LW6_BOT7_AI'
 -- XML key: 'bot7-ai'
     Type: string

     Default value: idiot

     AI engine for bot number 7.

4.14.16 bot7-color
------------------

 -- Command-line option: '--bot7-color=<value>'
 -- Environment variable: 'LW6_BOT7_COLOR'
 -- XML key: 'bot7-color'
     Type: string

     Default value: lightblue

     Color for bot number 7.

4.14.17 bot8-ai
---------------

 -- Command-line option: '--bot8-ai=<value>'
 -- Environment variable: 'LW6_BOT8_AI'
 -- XML key: 'bot8-ai'
     Type: string

     Default value: idiot

     AI engine for bot number 8.

4.14.18 bot8-color
------------------

 -- Command-line option: '--bot8-color=<value>'
 -- Environment variable: 'LW6_BOT8_COLOR'
 -- XML key: 'bot8-color'
     Type: string

     Default value: purple

     Color for bot number 8.

4.14.19 bot9-ai
---------------

 -- Command-line option: '--bot9-ai=<value>'
 -- Environment variable: 'LW6_BOT9_AI'
 -- XML key: 'bot9-ai'
     Type: string

     Default value: idiot

     AI engine for bot number 9.

4.14.20 bot9-color
------------------

 -- Command-line option: '--bot9-color=<value>'
 -- Environment variable: 'LW6_BOT9_COLOR'
 -- XML key: 'bot9-color'
     Type: string

     Default value: pink

     Color for bot number 9.

4.14.21 nb-bots
---------------

 -- Command-line option: '--nb-bots=<value>'
 -- Environment variable: 'LW6_NB_BOTS'
 -- XML key: 'nb-bots'
     Type: integer

     Default value: 2 Min value: 0 Max value: 9

     Number of bots on the map.  0 means no bots, if set to 1 the the
     bot1-...  settings will be used, if set to 2 then bot1-...  and
     bot2-...  will be used, and so on.

4.14.22 player1-color
---------------------

 -- Command-line option: '--player1-color=<value>'
 -- Environment variable: 'LW6_PLAYER1_COLOR'
 -- XML key: 'player1-color'
     Type: string

     Default value: red

     Color of the first player, must be red, green, blue, yellow, cyan,
     magenta, orange, lightblue, purple or pink

4.14.23 player2-color
---------------------

 -- Command-line option: '--player2-color=<value>'
 -- Environment variable: 'LW6_PLAYER2_COLOR'
 -- XML key: 'player2-color'
     Type: string

     Default value: green

     Color of the second player, must be red, green, blue, yellow, cyan,
     magenta, orange, lightblue, purple or pink

4.14.24 player3-color
---------------------

 -- Command-line option: '--player3-color=<value>'
 -- Environment variable: 'LW6_PLAYER3_COLOR'
 -- XML key: 'player3-color'
     Type: string

     Default value: blue

     Color of the third player, must be red, green, blue, yellow, cyan,
     magenta, orange, lightblue, purple or pink

4.14.25 player4-color
---------------------

 -- Command-line option: '--player4-color=<value>'
 -- Environment variable: 'LW6_PLAYER4_COLOR'
 -- XML key: 'player4-color'
     Type: string

     Default value: yellow

     Color of the fourth player, must be red, green, blue, yellow, cyan,
     magenta, orange, lightblue, purple or pink


File: liquidwar6.info,  Node: Advanced settings,  Next: C to Guile,  Prev: Map teams.xml,  Up: Reference

4.15 Advanced settings
======================

4.15.1 base64-decode
--------------------

 -- Command-line option: '--base64-decode'
     If specified, program will take stdin and base64 decode it to
     stdout.  This is for testing purpose (for network messages for
     instance).  Will decode in standard base64 encoding using
     characters + and / but also the url-compliant version using - and
     /, see RFC 4648 for details.

4.15.2 base64-encode
--------------------

 -- Command-line option: '--base64-encode'
     If specified, program will take stdin and base64 encode it to
     stdout.  This is for testing purpose (for network messages for
     instance).  Will *not* use standard base64 encoding using
     characters + and / but - and _ instead to be url-compliant, see RFC
     4648 for details.

4.15.3 bench
------------

 -- Command-line option: '--bench'
     Runs a benchmarking test which will report an approximative
     performance estimation of the game on your computer.  The result is
     in an arbitrary unit, but it is logarithmic, and works the way the
     audio decibels do.  That is, 30 is 10 times greater than 20.  10 is
     supposed to be a reference of a computer that can reasonnably run
     the game.  So if you get 40, you are 1000 times powerfull enough.
     Negative values can technically show up on very slow computers.

4.15.4 bench-value
------------------

 -- Command-line option: '--bench-value=<value>'
 -- Environment variable: 'LW6_BENCH_VALUE'
 -- XML key: 'bench-value'
     Type: integer

     Default value: LW6LDR_DEFAULT_BENCH_VALUE

     Contains the current bench value of the computer running the game.
     This is used internally to choose the right map settings.  You can
     override this value and use your own but...  use at your own risk.
     Pretending you have a faster computer than what you really have can
     lead to confusion.

4.15.5 bin-id
-------------

 -- Command-line option: '--bin-id=<value>'
 -- Environment variable: 'LW6_BIN_ID'
 -- XML key: 'bin-id'
     Type: integer

     Default value: 0

     The internal 'bin-id' value.  Note that this is not necessarly
     equal to the value returned by 'show-build-bin-id'.  When they are
     different, it is assumed this is because of a software upgrade.

4.15.6 check
------------

 -- Command-line option: '--check'
     Running the game with '-check' is almost like running '-test', the
     difference is that '-check' will not run tests which involve
     graphics or sound backends, so it's adapted to pure console mode.
     This can be usefull for automated checks on a build farm, or if you
     want to check things in a headless (pure console) environment.

4.15.7 commands-per-sec
-----------------------

 -- Command-line option: '--commands-per-sec=<value>'
 -- Environment variable: 'LW6_COMMANDS_PER_SEC'
 -- XML key: 'commands-per-sec'
     Type: integer

     Default value: 10 Min value: 1 Max value: 1000

     Defines the number of commands per second.  When a command is
     generated, orders are actually sent to the game engine, for
     instance, 'this cursor moved there'.  So this option will affect
     game responsiveness, setting this to a high value will make the
     game more responsive but consume bandwidth on network games.

4.15.8 cunit
------------

 -- Command-line option: '--cunit'
     Running the game with '-cunit' is almost like running '-test', the
     difference is that '-cunit' will use CUnit interactive interface,
     allowing the user to cherry-pick some tests, and avoid running the
     whole suite just for one test.  This can be usefull for debugging,
     when individual test binaries are not available.

4.15.9 daemon
-------------

 -- Command-line option: '--daemon'
     Start the game in daemon mode, this is typically used with the
     server mode, if you want the process to be detached from the
     console and executed in the background.

4.15.10 debug-layer-id
----------------------

 -- Command-line option: '--debug-layer-id=<value>'
 -- Environment variable: 'LW6_DEBUG_LAYER_ID'
 -- XML key: 'debug-layer-id'
     Type: integer

     Default value: 0 Min value: 0 Max value: 6

     A team id which will be used for debugging purposes, for instance
     when displaying gradient.

4.15.11 debug-team-id
---------------------

 -- Command-line option: '--debug-team-id=<value>'
 -- Environment variable: 'LW6_DEBUG_TEAM_ID'
 -- XML key: 'debug-team-id'
     Type: integer

     Default value: 0 Min value: 0 Max value: 9

     A team id which will be used for debugging purposes, for instance
     when displaying gradient.

4.15.12 demo
------------

 -- Command-line option: '--demo'
     Start the game in demo mode.  2 bots play against each other
     forever.

4.15.13 dialog-timeout
----------------------

 -- Command-line option: '--dialog-timeout=<value>'
 -- Environment variable: 'LW6_DIALOG_TIMEOUT'
 -- XML key: 'dialog-timeout'
     Type: integer

     Default value: 3600 Min value: 0 Max value: 86400

     Timeout, in seconds, after which a dialog will automatically be
     closed, wether user clicked on it or not.  Mostly used for testing,
     to avoid program being stall on a visual prompt.  0 will simply
     disable this feature and wait forever.  Note that some platforms
     might not support this.  Interfaces using Gtk do support it.

4.15.14 dirty-read
------------------

 -- Command-line option: '--dirty-read=<value>'
 -- Environment variable: 'LW6_DIRTY_READ'
 -- XML key: 'dirty-read'
     Type: integer

     Default value: 2 Min value: 0 Max value: 2

     How to handle dirty reads and locks when displaying stuff.  If set
     to 0, there will be no dirty reads at all, a lock (mutex) will be
     set whenever it's needed.  If set to 1, display might be done with
     inconsistent data, however the data itself won't be modified while
     displaying.  If set to 2, displayed data can (and will) be modified
     while the rendering thread is running.

4.15.15 display-background
--------------------------

 -- Command-line option: '--display-background=<value>'
 -- Environment variable: 'LW6_DISPLAY_BACKGROUND'
 -- XML key: 'display-background'
     Type: boolean

     Default value: true

     Decides wether the background animation/image should be displayed
     at all.

4.15.16 display-console
-----------------------

 -- Command-line option: '--display-console=<value>'
 -- Environment variable: 'LW6_DISPLAY_CONSOLE'
 -- XML key: 'display-console'
     Type: boolean

     Default value: false

     Defines wether the interactive system console must be displayed.
     Note that console support must have been enabled at compilation
     time.  It might not be available on your computer, for instance if
     you are running a system such as Microsoft Windows.

4.15.17 display-cursors
-----------------------

 -- Command-line option: '--display-cursors=<value>'
 -- Environment variable: 'LW6_DISPLAY_CURSORS'
 -- XML key: 'display-cursors'
     Type: boolean

     Default value: true

     Debugging option which can be set to 'false' to disable the display
     of cursors when playing.

4.15.18 display-debug-gradient
------------------------------

 -- Command-line option: '--display-debug-gradient=<value>'
 -- Environment variable: 'LW6_DISPLAY_DEBUG_GRADIENT'
 -- XML key: 'display-debug-gradient'
     Type: boolean

     Default value: false

     Set this to 'true' to display the gradient, this is usefull to
     debug the core algorithm or understand how it works.

4.15.19 display-debug-zones
---------------------------

 -- Command-line option: '--display-debug-zones=<value>'
 -- Environment variable: 'LW6_DISPLAY_DEBUG_ZONES'
 -- XML key: 'display-debug-zones'
     Type: boolean

     Default value: false

     Set this to 'true' to display the zones, this is usefull to debug
     the core algorithm or understand how it works.

4.15.20 display-fighters
------------------------

 -- Command-line option: '--display-fighters=<value>'
 -- Environment variable: 'LW6_DISPLAY_FIGHTERS'
 -- XML key: 'display-fighters'
     Type: boolean

     Default value: true

     Debugging option which can be set to 'false' to disable the display
     of fighters when playing.

4.15.21 display-fps
-------------------

 -- Command-line option: '--display-fps=<value>'
 -- Environment variable: 'LW6_DISPLAY_FPS'
 -- XML key: 'display-fps'
     Type: boolean

     Default value: false

     Set this to 'true' to display the number of frames per second.
     When this gets too low...  play a smaller map, buy a new computer
     or contribute and hack Liquid War 6 so that it runs faster!

4.15.22 display-hud
-------------------

 -- Command-line option: '--display-hud=<value>'
 -- Environment variable: 'LW6_DISPLAY_HUD'
 -- XML key: 'display-hud'
     Type: boolean

     Default value: true

     Decides wether the hud (informations while playing) should be
     displayed.

4.15.23 display-log
-------------------

 -- Command-line option: '--display-log=<value>'
 -- Environment variable: 'LW6_DISPLAY_LOG'
 -- XML key: 'display-log'
     Type: boolean

     Default value: true

     Set this to 'false' to disable the display of error messages on the
     screen.  Mote that you can miss valuable informations.

4.15.24 display-map
-------------------

 -- Command-line option: '--display-map=<value>'
 -- Environment variable: 'LW6_DISPLAY_MAP'
 -- XML key: 'display-map'
     Type: boolean

     Default value: true

     Debugging option which can be set to 'false' to disable map (level)
     display when playing.

4.15.25 display-menu
--------------------

 -- Command-line option: '--display-menu=<value>'
 -- Environment variable: 'LW6_DISPLAY_MENU'
 -- XML key: 'display-menu'
     Type: boolean

     Default value: true

     Debugging option which can be set to 'false' to disable the display
     of menus.

4.15.26 display-meta
--------------------

 -- Command-line option: '--display-meta=<value>'
 -- Environment variable: 'LW6_DISPLAY_META'
 -- XML key: 'display-meta'
     Type: boolean

     Default value: true

     Set to 'false' to disable the display of meta information, this
     includes the help, tootips and breadcrumbs in menus.

4.15.27 display-mouse
---------------------

 -- Command-line option: '--display-mouse=<value>'
 -- Environment variable: 'LW6_DISPLAY_MOUSE'
 -- XML key: 'display-mouse'
     Type: boolean

     Default value: true

     Set this to 'false' to always hide the mouse pointer.

4.15.28 display-mps
-------------------

 -- Command-line option: '--display-mps=<value>'
 -- Environment variable: 'LW6_DISPLAY_MPS'
 -- XML key: 'display-mps'
     Type: boolean

     Default value: false

     Set this to 'true' to display the number of moves per second.  In
     theory the game should maintain this constant but in practise it
     can get low if your computer is too slow or too busy.

4.15.29 display-preview
-----------------------

 -- Command-line option: '--display-preview=<value>'
 -- Environment variable: 'LW6_DISPLAY_PREVIEW'
 -- XML key: 'display-preview'
     Type: boolean

     Default value: true

     Decides wether a map preview should be displayed when choosing a
     level.

4.15.30 display-progress
------------------------

 -- Command-line option: '--display-progress=<value>'
 -- Environment variable: 'LW6_DISPLAY_PROGRESS'
 -- XML key: 'display-progress'
     Type: boolean

     Default value: true

     Decides wether a progress bar should be displayed when a long
     operation is realized as a background task.

4.15.31 display-score
---------------------

 -- Command-line option: '--display-score=<value>'
 -- Environment variable: 'LW6_DISPLAY_SCORE'
 -- XML key: 'display-score'
     Type: boolean

     Default value: true

     Decides wether the score screen should be displayed.

4.15.32 display-splash
----------------------

 -- Command-line option: '--display-splash=<value>'
 -- Environment variable: 'LW6_DISPLAY_SPLASH'
 -- XML key: 'display-splash'
     Type: boolean

     Default value: true

     Set this to 'false' to disable the display of the splash screen at
     game startup.

4.15.33 display-url
-------------------

 -- Command-line option: '--display-url=<value>'
 -- Environment variable: 'LW6_DISPLAY_URL'
 -- XML key: 'display-url'
     Type: boolean

     Default value: false

     Set this to 'true' to display the URL (homepage) of the game.  This
     is mostly used when doing screenshots, so that generated images
     contain a link to the homepage.

4.15.34 executed-again
----------------------

 -- Command-line option: '--executed-again=<value>'
 -- Environment variable: 'LW6_EXECUTED_AGAIN'
 -- XML key: 'executed-again'
     Type: boolean

     Default value: false

     This environment variable/keyword is used to detect wether the
     program has been launched by itself with an internal execv call.
     This is used as a workarround to set some environment variables
     (DYLD_LIBRARY_PATH on Mac OS X for instance) before the program is
     run, as sometimes using setenv() inside the program does not work.

4.15.35 gfx-cpu-usage
---------------------

 -- Command-line option: '--gfx-cpu-usage=<value>'
 -- Environment variable: 'LW6_GFX_CPU_USAGE'
 -- XML key: 'gfx-cpu-usage'
     Type: float

     Default value: 0.75 Min value: 0 Max value: 1

     Percentage of the CPU which will be used by the display thread.
     It's wise to leave some time to other threads to execute.  The OS
     does it naturally, but setting this helps the whole process by
     explicitely pausing (sleep call) the display thread.  You could
     change this to a low value if you have lagging games but smooth
     display.

4.15.36 gfx-debug
-----------------

 -- Command-line option: '--gfx-debug=<value>'
 -- Environment variable: 'LW6_GFX_DEBUG'
 -- XML key: 'gfx-debug'
     Type: boolean

     Default value: false

     Enables dedicated graphics debugging tools.  This is different from
     'debug' mode which is global, this one is really graphics specific.

4.15.37 io-per-sec
------------------

 -- Command-line option: '--io-per-sec=<value>'
 -- Environment variable: 'LW6_IO_PER_SEC'
 -- XML key: 'io-per-sec'
     Type: integer

     Default value: 20 Min value: 1 Max value: 1000

     Defines the number of calls to input/output functions per second.
     This can affect speed of menus but also cursors, but won't change
     the speed of the game itself.  It's a cosmectic, comfort option.

4.15.38 jpeg-quality
--------------------

 -- Command-line option: '--jpeg-quality=<value>'
 -- Environment variable: 'LW6_JPEG_QUALITY'
 -- XML key: 'jpeg-quality'
     Type: integer

     Default value: 85 Min value: 0 Max value: 85

     Quality used by libjpeg when creating screenshot images.  The same
     value you would give to Gimp before exporting an image as a JPEG.

4.15.39 loader-sleep
--------------------

 -- Command-line option: '--loader-sleep=<value>'
 -- Environment variable: 'LW6_LOADER_SLEEP'
 -- XML key: 'loader-sleep'
     Type: float

     Default value: 0.5

     Defines how long the loader thread should wait between two polls.
     Default value should fit in most cases.

4.15.40 local-bench-delta
-------------------------

 -- Command-line option: '--local-bench-delta=<value>'
 -- Environment variable: 'LW6_LOCAL_BENCH_DELTA'
 -- XML key: 'local-bench-delta'
     Type: integer

     Default value: 0 Min value: -70 Max value: 20

     A value which is added to bench before starting a local game.  This
     is typically zero or negative, as adding to bench is like
     pretending your computer is faster than it really is.

4.15.41 log-level
-----------------

 -- Command-line option: '--log-level=<value>'
 -- Environment variable: 'LW6_LOG_LEVEL'
 -- XML key: 'log-level'
     Type: integer

     Default value: 3 Min value: 0 Max value: 4

     Defines the log level, that is, how verbose the program will be
     regarding logs and console output.  0 (ERROR) is the minimum, only
     errors are reported.  1 (WARNING) means errors + warnings.  2
     (NOTICE) displays most important messages.  3 (INFO) is the
     default, the log file will contain all messages but debug stuff.  4
     (DEBUG) logs everything, including debug informations.

4.15.42 log-timeout
-------------------

 -- Command-line option: '--log-timeout=<value>'
 -- Environment variable: 'LW6_LOG_TIMEOUT'
 -- XML key: 'log-timeout'
     Type: integer

     Default value: 5000

     Delay, in msec, for which a log message will stay displayed on the
     screen.

4.15.43 magic-number
--------------------

 -- Command-line option: '--magic-number=<value>'
 -- Environment variable: 'LW6_MAGIC_NUMBER'
 -- XML key: 'magic-number'
     Type: integer

     Default value: LW6LDR_DEFAULT_MAGIC_NUMBER

     This 'magic' number probably requires an explanation.  It's used to
     estimate how big a map can be built.  The calculus is very
     approximative, basically
     bench_value*magic_number=total_fighters_on_map*rounds_per_sec*moves_per_round
     with total_fighters_on_map depending on various parameters such as
     map size but also how many fighters are on the map.  The map loader
     will try and adjust the map size so that it is just big enough not
     to saturate your CPU while being as high-res as possible.  The
     magic number in itself has no real meaning, the higher it gets, the
     more optimized it means the game is.  Normally you shouldn't change
     this but if you find the map resizing is too agressively
     pessimistic, or if for some reason bench returns bogus values, you
     can modify it.

4.15.44 max-local-bench-value
-----------------------------

 -- Command-line option: '--max-local-bench-value=<value>'
 -- Environment variable: 'LW6_MAX_LOCAL_BENCH_VALUE'
 -- XML key: 'max-local-bench-value'
     Type: integer

     Default value: LW6LDR_DEFAULT_MAX_LOCAL_BENCH_VALUE

     Even if your computer is very fast, this parameter will be used to
     tame the optimism of the test, and do not load maps in very high
     detail.  It's believed at some point, it's best to keep your extra
     power to deal with unordinary situations rather than waste it on
     useless details.  Game should be fun with that setting, but if you
     really want to use your shiny CPU at its maximum, raise this.

4.15.45 max-network-bench-value
-------------------------------

 -- Command-line option: '--max-network-bench-value=<value>'
 -- Environment variable: 'LW6_MAX_NETWORK_BENCH_VALUE'
 -- XML key: 'max-network-bench-value'
     Type: integer

     Default value: LW6LDR_DEFAULT_MAX_NETWORK_BENCH_VALUE

     On network games, we need to be sure everyone can play in correct
     conditions, therefore maps won't be loaded with more details than
     this, by default.  You're free to increase this parameter but it
     can cause your games to be unjoignable by some people.

4.15.46 memory-bazooka-eraser
-----------------------------

 -- Command-line option: '--memory-bazooka-eraser=<value>'
 -- Environment variable: 'LW6_MEMORY_BAZOOKA_ERASER'
 -- XML key: 'memory-bazooka-eraser'
     Type: boolean

     Default value: true

     The memory eraser is a tool which will systematically fill
     allocated memory with 'M', and overwrite all allocated bytes with
     'F' before freeing memory.  It will even handle realloc calls.
     This is usefull to track bugs.  Indeed, with this option enabled,
     freshly allocated memory will never contain zeroes unless one calls
     calloc, and if you ever free some memory zone before being done
     with it, it will be filled with junk and therefore not be usable.
     The memory bazooka must be big enough if you want this feature to
     actually work.

4.15.47 memory-bazooka-size
---------------------------

 -- Command-line option: '--memory-bazooka-size=<value>'
 -- Environment variable: 'LW6_MEMORY_BAZOOKA_SIZE'
 -- XML key: 'memory-bazooka-size'
     Type: integer

     Default value: 99991

     The memory bazooka is a brute-force tool, conceived after a full
     night spent tracking some memory leak.  The idea is to keep a track
     of all allocated pointers, when the data was allocated (timestamp),
     where in the code (file, line), and even point out what data there
     is in that place.  A memory bazooka report at the end of the game
     will just show what's left.  There should be nothing.  This
     parameter is here to avoid wasting CPU cycles on a feature which is
     very debug-oriented and does not really make sense for the casual
     user.  Set it to 0 for best performance, something like 100 might
     just be helpfull, but 1000000 is the right way to seriously debug
     code.

4.15.48 net-log
---------------

 -- Command-line option: '--net-log=<value>'
 -- Environment variable: 'LW6_NET_LOG'
 -- XML key: 'net-log'
     Type: boolean

     Default value: false

     Activates network log, that is, logs everything sent/received over
     the network, except data which is sent through a third party
     library such as libCurl.  This is mostly for debugging purpose, it
     can lead to rather big log files.

4.15.49 net-per-sec
-------------------

 -- Command-line option: '--net-per-sec=<value>'
 -- Environment variable: 'LW6_NET_PER_SEC'
 -- XML key: 'net-per-sec'
     Type: integer

     Default value: 500 Min value: 1 Max value: 1000

     Defines the number of calls to network functions per second.  This
     can technically change the network transfers speed, the higher the
     number, the faster it should be, but at the same time it can
     technically be more CPU greedy.

4.15.50 network-bench-delta
---------------------------

 -- Command-line option: '--network-bench-delta=<value>'
 -- Environment variable: 'LW6_NETWORK_BENCH_DELTA'
 -- XML key: 'network-bench-delta'
     Type: integer

     Default value: -5 Min value: -70 Max value: 20

     A value which is added to bench before starting a network game.
     This is typically a negative value, lower than the one added to
     local game.  This is because network games can be more CPU greedy.

4.15.51 network-reliability
---------------------------

 -- Command-line option: '--network-reliability=<value>'
 -- Environment variable: 'LW6_NETWORK_RELIABILITY'
 -- XML key: 'network-reliability'
     Type: integer

     Default value: 1000 Min value: 1 Max value: 1000000000

     The program assumes network is non-reliable, however the problem
     with those assumptions is that when you test, network is always
     reliable, even with non-garanteed protocols like UDP. This option
     will force the program to actually ignore some calls to send or
     recv functions, simulating a network disfunction.  This is to
     ensure the internal mecanisms correcting network problems do work
     for good, on daily regular use.  It's not possible to set it to a
     perfect behavior, never dropping any packet, however using the
     default settings you probably won't even notice the performance
     drop induced by having to fix problems.  The highest the number is,
     the most reliable network will look, the algorithm is simply to
     drop one message out of X.

4.15.52 open-relay
------------------

 -- Command-line option: '--open-relay=<value>'
 -- Environment variable: 'LW6_OPEN_RELAY'
 -- XML key: 'open-relay'
     Type: boolean

     Default value: false

     Enables forwarding of abritrary network messages.  If open relay is
     forbidden, the game will only forward messages when physical sender
     and logical sender are the same.  This is to say if messages come
     from A for C and is sent by A to B, B will forward it to C. But if
     message comes from X to C and is sent by A to B, then B won't
     forward it.  In practice, it means without open relay, messages can
     only be forwarded once.

4.15.53 pilot-lag
-----------------

 -- Command-line option: '--pilot-lag=<value>'
 -- Environment variable: 'LW6_PILOT_LAG'
 -- XML key: 'pilot-lag'
     Type: integer

     Default value: 10

     Maximum lag, in rounds, until the game engine is slowed down.  This
     will typically be usefull if your computer is too slow for the map
     resolution and the game speed you set up.

4.15.54 quick-start
-------------------

 -- Command-line option: '--quick-start'
     Start the game just like if the player had requested a quick start,
     without showing any menu.

4.15.55 reset
-------------

 -- Command-line option: '--reset'
     Clears the config file so that the game will run with defaults next
     time.  The idea is to get rid of traces of previous executions.
     The difference with '-defaults' is that '-reset' does not run the
     game, while '-defaults' does.

4.15.56 reset-config-on-upgrade
-------------------------------

 -- Command-line option: '--reset-config-on-upgrade=<value>'
 -- Environment variable: 'LW6_RESET_CONFIG_ON_UPGRADE'
 -- XML key: 'reset-config-on-upgrade'
     Type: boolean

     Default value: true

     If set, then a reset (config file set to defaults) is run every
     time you upgrade the game.

4.15.57 screenshots-per-min
---------------------------

 -- Command-line option: '--screenshots-per-min=<value>'
 -- Environment variable: 'LW6_SCREENSHOTS_PER_MIN'
 -- XML key: 'screenshots-per-min'
     Type: integer

     Default value: 12

     Defines the number of screenshots / node info per minute.  This can
     a quite costly operation, but still it must not be too low else
     screenshots are too outdated.

4.15.58 server
--------------

 -- Command-line option: '--server'
     Start the game in server mode, without requiring any graphics
     backend.  Server mode is usefull if you just want to start a
     network node without hosting any real game on it.  It can be used
     to list existing nodes and sessions or as a bounce server in case
     some clients can't contact each other because firewalled.  If you
     only want to start a server game on your computer, don't use this
     option, just start the game normally and start a game server by
     clicking on the GUI buttons.

4.15.59 simulate-basic
----------------------

 -- Command-line option: '--simulate-basic'
     Simulates some fights using the basic colors red, green, yellow and
     blue.  Will output on the console a percentage based on scores
     obtained by the teams.  This is typically for map designers and/or
     people who want to fiddle with team profiles, if some team is
     really stronger than another one, it should appear in these
     percentages.

4.15.60 simulate-full
---------------------

 -- Command-line option: '--simulate-full'
     Simulates some fights using all available colors.  This can be very
     long, it will run approximatively 1000 games consecutively, you can
     look in the log file to see the progress.  Will output on the
     console a percentage based on scores obtained by the teams.  This
     is typically for map designers and/or people who want to fiddle
     with team profiles, if some team is really stronger than another
     one, it should appear in these percentages.

4.15.61 target-fps
------------------

 -- Command-line option: '--target-fps=<value>'
 -- Environment variable: 'LW6_TARGET_FPS'
 -- XML key: 'target-fps'
     Type: integer

     Default value: 60 Min value: 1 Max value: 1000

     Defines how many frames will be displayed per second.  Of course
     this is a maximum value, if your hardware can't keep up with this
     value, display will just be slow, no matter what value you define
     here.  Note that you might really wish to have something rather low
     here, to keep network and 'logic' function responsiveness.  Passed
     60 frames per second, speed is really only for visual comfort, as
     Liquid War 6 is now so fast-paced that it requires 200 frames/sec
     to outperform opponents.

4.15.62 trap-errors
-------------------

 -- Command-line option: '--trap-errors=<value>'
 -- Environment variable: 'LW6_TRAP_ERRORS'
 -- XML key: 'trap-errors'
     Type: boolean

     Default value: false

     If set to true, will trap segmentation fault and floating point
     errors, and display messages about those in a custom box instead of
     the default one

4.15.63 trojan
--------------

 -- Command-line option: '--trojan=<value>'
 -- Environment variable: 'LW6_TROJAN'
 -- XML key: 'trojan'
     Type: boolean

     Default value: false

     Make the program act like a (stupid) trojan horse, trying to fake
     messages, sending various inconsistent informations.  This is to
     check the normal version of the program is able to detect such a
     fake and kick it out of the game.  It's of no use for regular
     players, be sure to unset this if you want to play for good.

4.15.64 z-decode
----------------

 -- Command-line option: '--z-decode'
     If specified, program will take stdin and z-decode it to stdout.
     This is for testing purpose (for network messages for instance).
     Z-decoding, here means verifying there a Z at the beginning, base64
     decode and pass the content through Zlib inflating.  I content is
     not Z-prefixed, will be returned as is.

4.15.65 z-encode
----------------

 -- Command-line option: '--z-encode'
     If specified, program will take stdin and z-encode it to stdout.
     This is for testing purpose (for network messages for instance).
     Z-encoding, here means passing the message through Zlib deflating
     then base64 encoding and prefix it with a Z.


File: liquidwar6.info,  Node: C to Guile,  Next: Script hooks,  Prev: Advanced settings,  Up: Reference

4.16 C to Guile
===============

4.16.1 c-gettext
----------------

 -- C function exported to Guile: 'c-gettext'
     Calls GNU gettext to convert string in current locale.  Note that
     '_' (plain underscode) is exported as well, so that code can be
     written using '_' as a function.

4.16.2 c-lw6-exit
-----------------

 -- C function exported to Guile: 'c-lw6-exit'
     Wrapper on lw6_exit.

4.16.3 c-lw6-get-ret
--------------------

 -- C function exported to Guile: 'c-lw6-get-ret'
     Wrapper on lw6_get_ret.

4.16.4 c-lw6-release
--------------------

 -- C function exported to Guile: 'c-lw6-release'
     Wrapper on lw6_release.

4.16.5 c-lw6-set-ret
--------------------

 -- C function exported to Guile: 'c-lw6-set-ret'
     Wrapper on lw6_set_ret.

4.16.6 c-lw6bot-get-backends
----------------------------

 -- C function exported to Guile: 'c-lw6bot-get-backends'
     Wrapper on lw6bot_get_backends.

4.16.7 c-lw6bot-new
-------------------

 -- C function exported to Guile: 'c-lw6bot-new'
     Wrapper on lw6bot_new.

4.16.8 c-lw6bot-next-move
-------------------------

 -- C function exported to Guile: 'c-lw6bot-next-move'
     Wrapper on lw6bot_next_move.

4.16.9 c-lw6cfg-defaults
------------------------

 -- C function exported to Guile: 'c-lw6cfg-defaults'
     Wrapper on lw6cfg_defaults.

4.16.10 c-lw6cfg-get-option
---------------------------

 -- C function exported to Guile: 'c-lw6cfg-get-option'
     Wrapper on lw6cfg_get_option.

4.16.11 c-lw6cfg-init
---------------------

 -- C function exported to Guile: 'c-lw6cfg-init'
     Wrapper on lw6cfg_init.

4.16.12 c-lw6cfg-load
---------------------

 -- C function exported to Guile: 'c-lw6cfg-load'
     Wrapper on lw6cfg_load.

4.16.13 c-lw6cfg-option-exists
------------------------------

 -- C function exported to Guile: 'c-lw6cfg-option-exists'
     Wrapper on lw6cfg_option_exists.

4.16.14 c-lw6cfg-quit
---------------------

 -- C function exported to Guile: 'c-lw6cfg-quit'
     Wrapper on lw6cfg_quit.

4.16.15 c-lw6cfg-save
---------------------

 -- C function exported to Guile: 'c-lw6cfg-save'
     Wrapper on lw6cfg_save.

4.16.16 c-lw6cfg-set-option
---------------------------

 -- C function exported to Guile: 'c-lw6cfg-set-option'
     Wrapper on lw6cfg_set_option.

4.16.17 c-lw6cfg-unified-get-log-file
-------------------------------------

 -- C function exported to Guile: 'c-lw6cfg-unified-get-log-file'
     Wrapper on lw6cfg_unified_get_log_file.

4.16.18 c-lw6cfg-unified-get-map-path
-------------------------------------

 -- C function exported to Guile: 'c-lw6cfg-unified-get-map-path'
     Wrapper on lw6cfg_unified_get_map_path.

4.16.19 c-lw6cfg-unified-get-music-path
---------------------------------------

 -- C function exported to Guile: 'c-lw6cfg-unified-get-music-path'
     Wrapper on lw6cfg_unified_get_music_path.

4.16.20 c-lw6cfg-unified-get-user-dir
-------------------------------------

 -- C function exported to Guile: 'c-lw6cfg-unified-get-user-dir'
     Wrapper on lw6cfg_unified_get_user_dir.

4.16.21 c-lw6cli-get-backends
-----------------------------

 -- C function exported to Guile: 'c-lw6cli-get-backends'
     Wrapper on lw6cli_get_backends.

4.16.22 c-lw6cns-console-support
--------------------------------

 -- C function exported to Guile: 'c-lw6cns-console-support'
     Wrapper on lw6cns_console_support.

4.16.23 c-lw6cns-init
---------------------

 -- C function exported to Guile: 'c-lw6cns-init'
     Wrapper on lw6cns_init.

4.16.24 c-lw6cns-poll
---------------------

 -- C function exported to Guile: 'c-lw6cns-poll'
     Wrapper on lw6cns_poll.

4.16.25 c-lw6cns-quit
---------------------

 -- C function exported to Guile: 'c-lw6cns-quit'
     Wrapper on lw6cns_quit.

4.16.26 c-lw6cns-term-support
-----------------------------

 -- C function exported to Guile: 'c-lw6cns-term-support'
     Wrapper on lw6cns_term_support.

4.16.27 c-lw6dsp-get-average-fps
--------------------------------

 -- C function exported to Guile: 'c-lw6dsp-get-average-fps'
     Wrapper on lw6dsp_get_average_fps.

4.16.28 c-lw6dsp-get-fullscreen-modes
-------------------------------------

 -- C function exported to Guile: 'c-lw6dsp-get-fullscreen-modes'
     Wrapper on lw6dsp_get_fullscreen_modes.

4.16.29 c-lw6dsp-get-instant-fps
--------------------------------

 -- C function exported to Guile: 'c-lw6dsp-get-instant-fps'
     Wrapper on lw6dsp_get_instant_fps.

4.16.30 c-lw6dsp-get-last-frame-rendering-time
----------------------------------------------

 -- C function exported to Guile:
          'c-lw6dsp-get-last-frame-rendering-time'
     Wrapper on lw6dsp_get_last_frame_rendering_time.

4.16.31 c-lw6dsp-get-nb-frames
------------------------------

 -- C function exported to Guile: 'c-lw6dsp-get-nb-frames'
     Wrapper on lw6dsp_get_nb_frames.

4.16.32 c-lw6dsp-get-video-mode
-------------------------------

 -- C function exported to Guile: 'c-lw6dsp-get-video-mode'
     Wrapper on lw6dsp_get_video_mode.

4.16.33 c-lw6dsp-new
--------------------

 -- C function exported to Guile: 'c-lw6dsp-new'
     Wrapper on lw6dsp_new.

4.16.34 c-lw6dsp-release
------------------------

 -- C function exported to Guile: 'c-lw6dsp-release'
     Wrapper on lw6dsp_release.

4.16.35 c-lw6dsp-update
-----------------------

 -- C function exported to Guile: 'c-lw6dsp-update'
     Wrapper on lw6dsp_update.

4.16.36 c-lw6gen-create-from-seed
---------------------------------

 -- C function exported to Guile: 'c-lw6gen-create-from-seed'
     Wrapper on lw6gen_create_from_seed.

4.16.37 c-lw6gen-seed-new
-------------------------

 -- C function exported to Guile: 'c-lw6gen-seed-new'
     Wrapper on lw6gen_seed_new.

4.16.38 c-lw6gen-seed-normalize
-------------------------------

 -- C function exported to Guile: 'c-lw6gen-seed-normalize'
     Wrapper on lw6gen_seed_normalize.

4.16.39 c-lw6gfx-get-backends
-----------------------------

 -- C function exported to Guile: 'c-lw6gfx-get-backends'
     Wrapper on lw6gfx_get_backends.

4.16.40 c-lw6gui-default-look
-----------------------------

 -- C function exported to Guile: 'c-lw6gui-default-look'
     Wrapper on lw6gui_default_look.

4.16.41 c-lw6gui-input-reset
----------------------------

 -- C function exported to Guile: 'c-lw6gui-input-reset'
     Wrapper on lw6gui_input_reset.

4.16.42 c-lw6gui-joystick1-get-move-pad
---------------------------------------

 -- C function exported to Guile: 'c-lw6gui-joystick1-get-move-pad'
     Wrapper on lw6gui_joystick1_get_move_pad.

4.16.43 c-lw6gui-joystick1-pop-button-a
---------------------------------------

 -- C function exported to Guile: 'c-lw6gui-joystick1-pop-button-a'
     Wrapper on lw6gui_joystick1_pop_button_a.

4.16.44 c-lw6gui-joystick1-pop-button-b
---------------------------------------

 -- C function exported to Guile: 'c-lw6gui-joystick1-pop-button-b'
     Wrapper on lw6gui_joystick1_pop_button_b.

4.16.45 c-lw6gui-joystick1-pop-button-c
---------------------------------------

 -- C function exported to Guile: 'c-lw6gui-joystick1-pop-button-c'
     Wrapper on lw6gui_joystick1_pop_button_c.

4.16.46 c-lw6gui-joystick1-pop-button-d
---------------------------------------

 -- C function exported to Guile: 'c-lw6gui-joystick1-pop-button-d'
     Wrapper on lw6gui_joystick1_pop_button_d.

4.16.47 c-lw6gui-joystick1-pop-button-e
---------------------------------------

 -- C function exported to Guile: 'c-lw6gui-joystick1-pop-button-e'
     Wrapper on lw6gui_joystick1_pop_button_e.

4.16.48 c-lw6gui-joystick1-pop-button-f
---------------------------------------

 -- C function exported to Guile: 'c-lw6gui-joystick1-pop-button-f'
     Wrapper on lw6gui_joystick1_pop_button_f.

4.16.49 c-lw6gui-joystick1-pop-pad-down
---------------------------------------

 -- C function exported to Guile: 'c-lw6gui-joystick1-pop-pad-down'
     Wrapper on lw6gui_joystick1_pop_pad_down.

4.16.50 c-lw6gui-joystick1-pop-pad-left
---------------------------------------

 -- C function exported to Guile: 'c-lw6gui-joystick1-pop-pad-left'
     Wrapper on lw6gui_joystick1_pop_pad_left.

4.16.51 c-lw6gui-joystick1-pop-pad-right
----------------------------------------

 -- C function exported to Guile: 'c-lw6gui-joystick1-pop-pad-right'
     Wrapper on lw6gui_joystick1_pop_pad_right.

4.16.52 c-lw6gui-joystick1-pop-pad-up
-------------------------------------

 -- C function exported to Guile: 'c-lw6gui-joystick1-pop-pad-up'
     Wrapper on lw6gui_joystick1_pop_pad_up.

4.16.53 c-lw6gui-joystick2-get-move-pad
---------------------------------------

 -- C function exported to Guile: 'c-lw6gui-joystick2-get-move-pad'
     Wrapper on lw6gui_joystick2_get_move_pad.

4.16.54 c-lw6gui-joystick2-pop-button-a
---------------------------------------

 -- C function exported to Guile: 'c-lw6gui-joystick2-pop-button-a'
     Wrapper on lw6gui_joystick2_pop_button_a.

4.16.55 c-lw6gui-joystick2-pop-button-b
---------------------------------------

 -- C function exported to Guile: 'c-lw6gui-joystick2-pop-button-b'
     Wrapper on lw6gui_joystick2_pop_button_b.

4.16.56 c-lw6gui-joystick2-pop-button-c
---------------------------------------

 -- C function exported to Guile: 'c-lw6gui-joystick2-pop-button-c'
     Wrapper on lw6gui_joystick2_pop_button_c.

4.16.57 c-lw6gui-joystick2-pop-button-d
---------------------------------------

 -- C function exported to Guile: 'c-lw6gui-joystick2-pop-button-d'
     Wrapper on lw6gui_joystick2_pop_button_d.

4.16.58 c-lw6gui-joystick2-pop-button-e
---------------------------------------

 -- C function exported to Guile: 'c-lw6gui-joystick2-pop-button-e'
     Wrapper on lw6gui_joystick2_pop_button_e.

4.16.59 c-lw6gui-joystick2-pop-button-f
---------------------------------------

 -- C function exported to Guile: 'c-lw6gui-joystick2-pop-button-f'
     Wrapper on lw6gui_joystick2_pop_button_f.

4.16.60 c-lw6gui-joystick2-pop-pad-down
---------------------------------------

 -- C function exported to Guile: 'c-lw6gui-joystick2-pop-pad-down'
     Wrapper on lw6gui_joystick2_pop_pad_down.

4.16.61 c-lw6gui-joystick2-pop-pad-left
---------------------------------------

 -- C function exported to Guile: 'c-lw6gui-joystick2-pop-pad-left'
     Wrapper on lw6gui_joystick2_pop_pad_left.

4.16.62 c-lw6gui-joystick2-pop-pad-right
----------------------------------------

 -- C function exported to Guile: 'c-lw6gui-joystick2-pop-pad-right'
     Wrapper on lw6gui_joystick2_pop_pad_right.

4.16.63 c-lw6gui-joystick2-pop-pad-up
-------------------------------------

 -- C function exported to Guile: 'c-lw6gui-joystick2-pop-pad-up'
     Wrapper on lw6gui_joystick2_pop_pad_up.

4.16.64 c-lw6gui-keyboard-get-move-pad
--------------------------------------

 -- C function exported to Guile: 'c-lw6gui-keyboard-get-move-pad'
     Wrapper on lw6gui_keyboard_get_move_pad.

4.16.65 c-lw6gui-keyboard-is-pressed
------------------------------------

 -- C function exported to Guile: 'c-lw6gui-keyboard-is-pressed'
     Wrapper on lw6gui_keyboard_is_pressed.

4.16.66 c-lw6gui-keyboard-pop-arrow-down
----------------------------------------

 -- C function exported to Guile: 'c-lw6gui-keyboard-pop-arrow-down'
     Wrapper on lw6gui_keyboard_pop_arrow_down.

4.16.67 c-lw6gui-keyboard-pop-arrow-left
----------------------------------------

 -- C function exported to Guile: 'c-lw6gui-keyboard-pop-arrow-left'
     Wrapper on lw6gui_keyboard_pop_arrow_left.

4.16.68 c-lw6gui-keyboard-pop-arrow-right
-----------------------------------------

 -- C function exported to Guile: 'c-lw6gui-keyboard-pop-arrow-right'
     Wrapper on lw6gui_keyboard_pop_arrow_right.

4.16.69 c-lw6gui-keyboard-pop-arrow-up
--------------------------------------

 -- C function exported to Guile: 'c-lw6gui-keyboard-pop-arrow-up'
     Wrapper on lw6gui_keyboard_pop_arrow_up.

4.16.70 c-lw6gui-keyboard-pop-key-alt
-------------------------------------

 -- C function exported to Guile: 'c-lw6gui-keyboard-pop-key-alt'
     Wrapper on lw6gui_keyboard_pop_key_alt.

4.16.71 c-lw6gui-keyboard-pop-key-ctrl
--------------------------------------

 -- C function exported to Guile: 'c-lw6gui-keyboard-pop-key-ctrl'
     Wrapper on lw6gui_keyboard_pop_key_ctrl.

4.16.72 c-lw6gui-keyboard-pop-key-enter
---------------------------------------

 -- C function exported to Guile: 'c-lw6gui-keyboard-pop-key-enter'
     Wrapper on lw6gui_keyboard_pop_key_enter.

4.16.73 c-lw6gui-keyboard-pop-key-esc
-------------------------------------

 -- C function exported to Guile: 'c-lw6gui-keyboard-pop-key-esc'
     Wrapper on lw6gui_keyboard_pop_key_esc.

4.16.74 c-lw6gui-keyboard-pop-key-pgdown
----------------------------------------

 -- C function exported to Guile: 'c-lw6gui-keyboard-pop-key-pgdown'
     Wrapper on lw6gui_keyboard_pop_key_pgdown.

4.16.75 c-lw6gui-keyboard-pop-key-pgup
--------------------------------------

 -- C function exported to Guile: 'c-lw6gui-keyboard-pop-key-pgup'
     Wrapper on lw6gui_keyboard_pop_key_pgup.

4.16.76 c-lw6gui-look-get
-------------------------

 -- C function exported to Guile: 'c-lw6gui-look-get'
     Wrapper on lw6gui_look_get.

4.16.77 c-lw6gui-look-set
-------------------------

 -- C function exported to Guile: 'c-lw6gui-look-set'
     Wrapper on lw6gui_look_set.

4.16.78 c-lw6gui-look-zoom-in
-----------------------------

 -- C function exported to Guile: 'c-lw6gui-look-zoom-in'
     Wrapper on lw6gui_look_zoom_in.

4.16.79 c-lw6gui-look-zoom-out
------------------------------

 -- C function exported to Guile: 'c-lw6gui-look-zoom-out'
     Wrapper on lw6gui_look_zoom_out.

4.16.80 c-lw6gui-menu-append
----------------------------

 -- C function exported to Guile: 'c-lw6gui-menu-append'
     Wrapper on lw6gui_menu_append.

4.16.81 c-lw6gui-menu-close-popup
---------------------------------

 -- C function exported to Guile: 'c-lw6gui-menu-close-popup'
     Wrapper on lw6gui_menu_close_popup.

4.16.82 c-lw6gui-menu-enable-esc
--------------------------------

 -- C function exported to Guile: 'c-lw6gui-menu-enable-esc'
     Wrapper on lw6gui_menu_enable_esc.

4.16.83 c-lw6gui-menu-has-popup
-------------------------------

 -- C function exported to Guile: 'c-lw6gui-menu-has-popup'
     Wrapper on lw6gui_menu_has_popup.

4.16.84 c-lw6gui-menu-new
-------------------------

 -- C function exported to Guile: 'c-lw6gui-menu-new'
     Wrapper on lw6gui_menu_new.

4.16.85 c-lw6gui-menu-remove
----------------------------

 -- C function exported to Guile: 'c-lw6gui-menu-remove'
     Wrapper on lw6gui_menu_remove.

4.16.86 c-lw6gui-menu-remove-all
--------------------------------

 -- C function exported to Guile: 'c-lw6gui-menu-remove-all'
     Wrapper on lw6gui_menu_remove_all.

4.16.87 c-lw6gui-menu-scroll-down
---------------------------------

 -- C function exported to Guile: 'c-lw6gui-menu-scroll-down'
     Wrapper on lw6gui_menu_scroll_down.

4.16.88 c-lw6gui-menu-scroll-up
-------------------------------

 -- C function exported to Guile: 'c-lw6gui-menu-scroll-up'
     Wrapper on lw6gui_menu_scroll_up.

4.16.89 c-lw6gui-menu-select
----------------------------

 -- C function exported to Guile: 'c-lw6gui-menu-select'
     Wrapper on lw6gui_menu_select.

4.16.90 c-lw6gui-menu-select-esc
--------------------------------

 -- C function exported to Guile: 'c-lw6gui-menu-select-esc'
     Wrapper on lw6gui_menu_select_esc.

4.16.91 c-lw6gui-menu-set-breadcrumbs
-------------------------------------

 -- C function exported to Guile: 'c-lw6gui-menu-set-breadcrumbs'
     Wrapper on lw6gui_menu_set_breadcrumbs.

4.16.92 c-lw6gui-menu-sync
--------------------------

 -- C function exported to Guile: 'c-lw6gui-menu-sync'
     Wrapper on lw6gui_menu_sync.

4.16.93 c-lw6gui-mouse-get-state
--------------------------------

 -- C function exported to Guile: 'c-lw6gui-mouse-get-state'
     Wrapper on lw6gui_mouse_get_state.

4.16.94 c-lw6gui-mouse-poll-move
--------------------------------

 -- C function exported to Guile: 'c-lw6gui-mouse-poll-move'
     Wrapper on lw6gui_mouse_poll_move.

4.16.95 c-lw6gui-mouse-pop-button-left
--------------------------------------

 -- C function exported to Guile: 'c-lw6gui-mouse-pop-button-left'
     Wrapper on lw6gui_mouse_pop_button_left.

4.16.96 c-lw6gui-mouse-pop-button-middle
----------------------------------------

 -- C function exported to Guile: 'c-lw6gui-mouse-pop-button-middle'
     Wrapper on lw6gui_mouse_pop_button_middle.

4.16.97 c-lw6gui-mouse-pop-button-right
---------------------------------------

 -- C function exported to Guile: 'c-lw6gui-mouse-pop-button-right'
     Wrapper on lw6gui_mouse_pop_button_right.

4.16.98 c-lw6gui-mouse-pop-double-click
---------------------------------------

 -- C function exported to Guile: 'c-lw6gui-mouse-pop-double-click'
     Wrapper on lw6gui_mouse_pop_double_click.

4.16.99 c-lw6gui-mouse-pop-simple-click
---------------------------------------

 -- C function exported to Guile: 'c-lw6gui-mouse-pop-simple-click'
     Wrapper on lw6gui_mouse_pop_simple_click.

4.16.100 c-lw6gui-mouse-pop-triple-click
----------------------------------------

 -- C function exported to Guile: 'c-lw6gui-mouse-pop-triple-click'
     Wrapper on lw6gui_mouse_pop_triple_click.

4.16.101 c-lw6gui-mouse-pop-wheel-down
--------------------------------------

 -- C function exported to Guile: 'c-lw6gui-mouse-pop-wheel-down'
     Wrapper on lw6gui_mouse_pop_wheel_down.

4.16.102 c-lw6gui-mouse-pop-wheel-up
------------------------------------

 -- C function exported to Guile: 'c-lw6gui-mouse-pop-wheel-up'
     Wrapper on lw6gui_mouse_pop_wheel_up.

4.16.103 c-lw6hlp-about
-----------------------

 -- C function exported to Guile: 'c-lw6hlp-about'
     Wrapper on lw6hlp_about.

4.16.104 c-lw6hlp-get-default-value
-----------------------------------

 -- C function exported to Guile: 'c-lw6hlp-get-default-value'
     Wrapper on lw6hlp_get_default_value.

4.16.105 c-lw6hlp-list
----------------------

 -- C function exported to Guile: 'c-lw6hlp-list'
     Wrapper on lw6hlp_list.

4.16.106 c-lw6hlp-list-advanced
-------------------------------

 -- C function exported to Guile: 'c-lw6hlp-list-advanced'
     Wrapper on lw6hlp_list_advanced.

4.16.107 c-lw6hlp-list-aliases
------------------------------

 -- C function exported to Guile: 'c-lw6hlp-list-aliases'
     Wrapper on lw6hlp_list_aliases.

4.16.108 c-lw6hlp-list-doc
--------------------------

 -- C function exported to Guile: 'c-lw6hlp-list-doc'
     Wrapper on lw6hlp_list_doc.

4.16.109 c-lw6hlp-list-funcs
----------------------------

 -- C function exported to Guile: 'c-lw6hlp-list-funcs'
     Wrapper on lw6hlp_list_funcs.

4.16.110 c-lw6hlp-list-graphics
-------------------------------

 -- C function exported to Guile: 'c-lw6hlp-list-graphics'
     Wrapper on lw6hlp_list_graphics.

4.16.111 c-lw6hlp-list-hooks
----------------------------

 -- C function exported to Guile: 'c-lw6hlp-list-hooks'
     Wrapper on lw6hlp_list_hooks.

4.16.112 c-lw6hlp-list-input
----------------------------

 -- C function exported to Guile: 'c-lw6hlp-list-input'
     Wrapper on lw6hlp_list_input.

4.16.113 c-lw6hlp-list-map
--------------------------

 -- C function exported to Guile: 'c-lw6hlp-list-map'
     Wrapper on lw6hlp_list_map.

4.16.114 c-lw6hlp-list-map-hints
--------------------------------

 -- C function exported to Guile: 'c-lw6hlp-list-map-hints'
     Wrapper on lw6hlp_list_map_hints.

4.16.115 c-lw6hlp-list-map-rules
--------------------------------

 -- C function exported to Guile: 'c-lw6hlp-list-map-rules'
     Wrapper on lw6hlp_list_map_rules.

4.16.116 c-lw6hlp-list-map-style
--------------------------------

 -- C function exported to Guile: 'c-lw6hlp-list-map-style'
     Wrapper on lw6hlp_list_map_style.

4.16.117 c-lw6hlp-list-map-teams
--------------------------------

 -- C function exported to Guile: 'c-lw6hlp-list-map-teams'
     Wrapper on lw6hlp_list_map_teams.

4.16.118 c-lw6hlp-list-network
------------------------------

 -- C function exported to Guile: 'c-lw6hlp-list-network'
     Wrapper on lw6hlp_list_network.

4.16.119 c-lw6hlp-list-path
---------------------------

 -- C function exported to Guile: 'c-lw6hlp-list-path'
     Wrapper on lw6hlp_list_path.

4.16.120 c-lw6hlp-list-players
------------------------------

 -- C function exported to Guile: 'c-lw6hlp-list-players'
     Wrapper on lw6hlp_list_players.

4.16.121 c-lw6hlp-list-quick
----------------------------

 -- C function exported to Guile: 'c-lw6hlp-list-quick'
     Wrapper on lw6hlp_list_quick.

4.16.122 c-lw6hlp-list-show
---------------------------

 -- C function exported to Guile: 'c-lw6hlp-list-show'
     Wrapper on lw6hlp_list_show.

4.16.123 c-lw6hlp-list-sound
----------------------------

 -- C function exported to Guile: 'c-lw6hlp-list-sound'
     Wrapper on lw6hlp_list_sound.

4.16.124 c-lw6hlp-list-team-colors
----------------------------------

 -- C function exported to Guile: 'c-lw6hlp-list-team-colors'
     Wrapper on lw6hlp_list_team_colors.

4.16.125 c-lw6hlp-list-weapons
------------------------------

 -- C function exported to Guile: 'c-lw6hlp-list-weapons'
     Wrapper on lw6hlp_list_weapons.

4.16.126 c-lw6img-screenshot
----------------------------

 -- C function exported to Guile: 'c-lw6img-screenshot'
     Wrapper on lw6img_screenshot.

4.16.127 c-lw6ker-add-cursor
----------------------------

 -- C function exported to Guile: 'c-lw6ker-add-cursor'
     Wrapper on lw6ker_add_cursor.

4.16.128 c-lw6ker-build-game-state
----------------------------------

 -- C function exported to Guile: 'c-lw6ker-build-game-state'
     Wrapper on lw6ker_build_game_state.

4.16.129 c-lw6ker-build-game-struct
-----------------------------------

 -- C function exported to Guile: 'c-lw6ker-build-game-struct'
     Wrapper on lw6ker_build_game_struct.

4.16.130 c-lw6ker-cursor-exists
-------------------------------

 -- C function exported to Guile: 'c-lw6ker-cursor-exists'
     Wrapper on lw6ker_cursor_exists.

4.16.131 c-lw6ker-did-cursor-win
--------------------------------

 -- C function exported to Guile: 'c-lw6ker-did-cursor-win'
     Wrapper on lw6ker_did_cursor_win.

4.16.132 c-lw6ker-do-round
--------------------------

 -- C function exported to Guile: 'c-lw6ker-do-round'
     Wrapper on lw6ker_do_round.

4.16.133 c-lw6ker-dup-game-state
--------------------------------

 -- C function exported to Guile: 'c-lw6ker-dup-game-state'
     Wrapper on lw6ker_dup_game_state.

4.16.134 c-lw6ker-game-state-checksum
-------------------------------------

 -- C function exported to Guile: 'c-lw6ker-game-state-checksum'
     Wrapper on lw6ker_game_state_checksum.

4.16.135 c-lw6ker-game-struct-checksum
--------------------------------------

 -- C function exported to Guile: 'c-lw6ker-game-struct-checksum'
     Wrapper on lw6ker_game_struct_checksum.

4.16.136 c-lw6ker-get-cursor
----------------------------

 -- C function exported to Guile: 'c-lw6ker-get-cursor'
     Wrapper on lw6ker_get_cursor.

4.16.137 c-lw6ker-get-moves
---------------------------

 -- C function exported to Guile: 'c-lw6ker-get-moves'
     Wrapper on lw6ker_get_moves.

4.16.138 c-lw6ker-get-nb-colors
-------------------------------

 -- C function exported to Guile: 'c-lw6ker-get-nb-colors'
     Wrapper on lw6ker_game_state_get_nb_colors.

4.16.139 c-lw6ker-get-nb-cursors
--------------------------------

 -- C function exported to Guile: 'c-lw6ker-get-nb-cursors'
     Wrapper on lw6ker_game_state_get_nb_cursors.

4.16.140 c-lw6ker-get-nb-nodes
------------------------------

 -- C function exported to Guile: 'c-lw6ker-get-nb-nodes'
     Wrapper on lw6ker_game_state_get_nb_nodes.

4.16.141 c-lw6ker-get-rounds
----------------------------

 -- C function exported to Guile: 'c-lw6ker-get-rounds'
     Wrapper on lw6ker_get_rounds.

4.16.142 c-lw6ker-get-spreads
-----------------------------

 -- C function exported to Guile: 'c-lw6ker-get-spreads'
     Wrapper on lw6ker_get_spreads.

4.16.143 c-lw6ker-is-over
-------------------------

 -- C function exported to Guile: 'c-lw6ker-is-over'
     Wrapper on lw6ker_is_over.

4.16.144 c-lw6ker-node-exists
-----------------------------

 -- C function exported to Guile: 'c-lw6ker-node-exists'
     Wrapper on lw6ker_node_exists.

4.16.145 c-lw6ker-register-node
-------------------------------

 -- C function exported to Guile: 'c-lw6ker-register-node'
     Wrapper on lw6ker_register_node.

4.16.146 c-lw6ker-remove-cursor
-------------------------------

 -- C function exported to Guile: 'c-lw6ker-remove-cursor'
     Wrapper on lw6ker_remove_cursor.

4.16.147 c-lw6ker-set-cursor
----------------------------

 -- C function exported to Guile: 'c-lw6ker-set-cursor'
     Wrapper on lw6ker_set_cursor.

4.16.148 c-lw6ker-sync-game-state
---------------------------------

 -- C function exported to Guile: 'c-lw6ker-sync-game-state'
     Wrapper on lw6ker_sync_game_state.

4.16.149 c-lw6ker-unregister-node
---------------------------------

 -- C function exported to Guile: 'c-lw6ker-unregister-node'
     Wrapper on lw6ker_unregister_node.

4.16.150 c-lw6ldr-chain-entry
-----------------------------

 -- C function exported to Guile: 'c-lw6ldr-chain-entry'
     Wrapper on lw6ldr_chain_entry.

4.16.151 c-lw6ldr-exp-validate
------------------------------

 -- C function exported to Guile: 'c-lw6ldr-exp-validate'
     Wrapper on lw6ldr_exp_validate.

4.16.152 c-lw6ldr-get-entries
-----------------------------

 -- C function exported to Guile: 'c-lw6ldr-get-entries'
     Wrapper on lw6ldr_get_entries.

4.16.153 c-lw6ldr-hints-get-default
-----------------------------------

 -- C function exported to Guile: 'c-lw6ldr-hints-get-default'
     Wrapper on lw6ldr_hints_get_default.

4.16.154 c-lw6ldr-print-examples
--------------------------------

 -- C function exported to Guile: 'c-lw6ldr-print-examples'
     Wrapper on lw6ldr_print_examples.

4.16.155 c-lw6ldr-read
----------------------

 -- C function exported to Guile: 'c-lw6ldr-read'
     Wrapper on lw6ldr_read.

4.16.156 c-lw6ldr-read-relative
-------------------------------

 -- C function exported to Guile: 'c-lw6ldr-read-relative'
     Wrapper on lw6ldr_read_relative.

4.16.157 c-lw6map-exp-get-unlocked-team-color
---------------------------------------------

 -- C function exported to Guile: 'c-lw6map-exp-get-unlocked-team-color'
     Wrapper on lw6map_exp_get_unlocked_team_color.

4.16.158 c-lw6map-exp-get-unlocked-weapon
-----------------------------------------

 -- C function exported to Guile: 'c-lw6map-exp-get-unlocked-weapon'
     Wrapper on lw6map_exp_get_unlocked_weapon.

4.16.159 c-lw6map-exp-is-team-color-allowed
-------------------------------------------

 -- C function exported to Guile: 'c-lw6map-exp-is-team-color-allowed'
     Wrapper on lw6map_exp_is_team_color_allowed.

4.16.160 c-lw6map-exp-is-weapon-allowed
---------------------------------------

 -- C function exported to Guile: 'c-lw6map-exp-is-weapon-allowed'
     Wrapper on lw6map_exp_is_weapon_allowed.

4.16.161 c-lw6map-get-look
--------------------------

 -- C function exported to Guile: 'c-lw6map-get-look'
     Wrapper on lw6map_get_look.

4.16.162 c-lw6map-get-max-nb-colors
-----------------------------------

 -- C function exported to Guile: 'c-lw6map-get-max-nb-colors'
     Wrapper on lw6map_get_max_nb_colors.

4.16.163 c-lw6map-get-max-nb-cursors
------------------------------------

 -- C function exported to Guile: 'c-lw6map-get-max-nb-cursors'
     Wrapper on lw6map_get_max_nb_cursors.

4.16.164 c-lw6map-get-max-nb-nodes
----------------------------------

 -- C function exported to Guile: 'c-lw6map-get-max-nb-nodes'
     Wrapper on lw6map_get_max_nb_nodes.

4.16.165 c-lw6map-get-music-dir
-------------------------------

 -- C function exported to Guile: 'c-lw6map-get-music-dir'
     Wrapper on lw6map_get_music_dir.

4.16.166 c-lw6map-get-title
---------------------------

 -- C function exported to Guile: 'c-lw6map-get-title'
     Wrapper on lw6map_get_title.

4.16.167 c-lw6map-param-get
---------------------------

 -- C function exported to Guile: 'c-lw6map-param-get'
     Wrapper on lw6map_param_get.

4.16.168 c-lw6map-rules-get-default
-----------------------------------

 -- C function exported to Guile: 'c-lw6map-rules-get-default'
     Wrapper on lw6map_rules_get_default.

4.16.169 c-lw6map-rules-get-int
-------------------------------

 -- C function exported to Guile: 'c-lw6map-rules-get-int'
     Wrapper on lw6map_rules_get_int.

4.16.170 c-lw6map-rules-get-max
-------------------------------

 -- C function exported to Guile: 'c-lw6map-rules-get-max'
     Wrapper on lw6map_rules_get_max.

4.16.171 c-lw6map-rules-get-min
-------------------------------

 -- C function exported to Guile: 'c-lw6map-rules-get-min'
     Wrapper on lw6map_rules_get_min.

4.16.172 c-lw6map-style-get-default
-----------------------------------

 -- C function exported to Guile: 'c-lw6map-style-get-default'
     Wrapper on lw6map_style_get_default.

4.16.173 c-lw6map-team-color-index-to-key
-----------------------------------------

 -- C function exported to Guile: 'c-lw6map-team-color-index-to-key'
     Wrapper on lw6map_team_color_index_to_key.

4.16.174 c-lw6map-team-color-index-to-label
-------------------------------------------

 -- C function exported to Guile: 'c-lw6map-team-color-index-to-label'
     Wrapper on lw6map_team_color_index_to_label.

4.16.175 c-lw6map-team-color-key-to-index
-----------------------------------------

 -- C function exported to Guile: 'c-lw6map-team-color-key-to-index'
     Wrapper on lw6map_team_color_key_to_index.

4.16.176 c-lw6map-team-color-list
---------------------------------

 -- C function exported to Guile: 'c-lw6map-team-color-list'
     Wrapper on lw6map_team_color_list.

4.16.177 c-lw6map-teams-get-default
-----------------------------------

 -- C function exported to Guile: 'c-lw6map-teams-get-default'
     Wrapper on lw6map_teams_get_default.

4.16.178 c-lw6map-weapon-index-to-key
-------------------------------------

 -- C function exported to Guile: 'c-lw6map-weapon-index-to-key'
     Wrapper on lw6map_weapon_index_to_key.

4.16.179 c-lw6map-weapon-index-to-label
---------------------------------------

 -- C function exported to Guile: 'c-lw6map-weapon-index-to-label'
     Wrapper on lw6map_weapon_index_to_label.

4.16.180 c-lw6map-weapon-key-to-index
-------------------------------------

 -- C function exported to Guile: 'c-lw6map-weapon-key-to-index'
     Wrapper on lw6map_weapon_key_to_index.

4.16.181 c-lw6map-weapon-list
-----------------------------

 -- C function exported to Guile: 'c-lw6map-weapon-list'
     Wrapper on lw6map_weapon_list.

4.16.182 c-lw6net-init
----------------------

 -- C function exported to Guile: 'c-lw6net-init'
     Wrapper on lw6net_init.

4.16.183 c-lw6net-quit
----------------------

 -- C function exported to Guile: 'c-lw6net-quit'
     Wrapper on lw6net_quit.

4.16.184 c-lw6p2p-db-default-name
---------------------------------

 -- C function exported to Guile: 'c-lw6p2p-db-default-name'
     Wrapper on lw6p2p_db_default_name.

4.16.185 c-lw6p2p-db-new
------------------------

 -- C function exported to Guile: 'c-lw6p2p-db-new'
     Wrapper on lw6p2p_db_new.

4.16.186 c-lw6p2p-db-reset
--------------------------

 -- C function exported to Guile: 'c-lw6p2p-db-reset'
     Wrapper on lw6p2p_db_reset.

4.16.187 c-lw6p2p-node-calibrate
--------------------------------

 -- C function exported to Guile: 'c-lw6p2p-node-calibrate'
     Wrapper on lw6p2p_node_calibrate.

4.16.188 c-lw6p2p-node-client-join
----------------------------------

 -- C function exported to Guile: 'c-lw6p2p-node-client-join'
     Wrapper on lw6p2p_node_client_join.

4.16.189 c-lw6p2p-node-close
----------------------------

 -- C function exported to Guile: 'c-lw6p2p-node-close'
     Wrapper on lw6p2p_node_close.

4.16.190 c-lw6p2p-node-disconnect
---------------------------------

 -- C function exported to Guile: 'c-lw6p2p-node-disconnect'
     Wrapper on lw6p2p_node_disconnect.

4.16.191 c-lw6p2p-node-get-entries
----------------------------------

 -- C function exported to Guile: 'c-lw6p2p-node-get-entries'
     Wrapper on lw6p2p_node_get_entries.

4.16.192 c-lw6p2p-node-get-id
-----------------------------

 -- C function exported to Guile: 'c-lw6p2p-node-get-id'
     Wrapper on lw6p2p_node_get_id.

4.16.193 c-lw6p2p-node-get-local-seq-0
--------------------------------------

 -- C function exported to Guile: 'c-lw6p2p-node-get-local-seq-0'
     Wrapper on lw6p2p_node_get_local_seq_0.

4.16.194 c-lw6p2p-node-get-local-seq-last
-----------------------------------------

 -- C function exported to Guile: 'c-lw6p2p-node-get-local-seq-last'
     Wrapper on lw6p2p_node_get_local_seq_last.

4.16.195 c-lw6p2p-node-get-next-draft-msg
-----------------------------------------

 -- C function exported to Guile: 'c-lw6p2p-node-get-next-draft-msg'
     Wrapper on lw6p2p_node_get_next_draft_msg.

4.16.196 c-lw6p2p-node-get-next-reference-msg
---------------------------------------------

 -- C function exported to Guile: 'c-lw6p2p-node-get-next-reference-msg'
     Wrapper on lw6p2p_node_get_next_reference_msg.

4.16.197 c-lw6p2p-node-get-seq-draft
------------------------------------

 -- C function exported to Guile: 'c-lw6p2p-node-get-seq-draft'
     Wrapper on lw6p2p_node_get_seq_draft.

4.16.198 c-lw6p2p-node-get-seq-max
----------------------------------

 -- C function exported to Guile: 'c-lw6p2p-node-get-seq-max'
     Wrapper on lw6p2p_node_get_seq_max.

4.16.199 c-lw6p2p-node-get-seq-min
----------------------------------

 -- C function exported to Guile: 'c-lw6p2p-node-get-seq-min'
     Wrapper on lw6p2p_node_get_seq_min.

4.16.200 c-lw6p2p-node-get-seq-reference
----------------------------------------

 -- C function exported to Guile: 'c-lw6p2p-node-get-seq-reference'
     Wrapper on lw6p2p_node_get_seq_reference.

4.16.201 c-lw6p2p-node-is-dump-needed
-------------------------------------

 -- C function exported to Guile: 'c-lw6p2p-node-is-dump-needed'
     Wrapper on lw6p2p_node_is_dump_needed.

4.16.202 c-lw6p2p-node-is-peer-connected
----------------------------------------

 -- C function exported to Guile: 'c-lw6p2p-node-is-peer-connected'
     Wrapper on lw6p2p_node_is_peer_connected.

4.16.203 c-lw6p2p-node-is-peer-registered
-----------------------------------------

 -- C function exported to Guile: 'c-lw6p2p-node-is-peer-registered'
     Wrapper on lw6p2p_node_is_peer_registered.

4.16.204 c-lw6p2p-node-is-seed-needed
-------------------------------------

 -- C function exported to Guile: 'c-lw6p2p-node-is-seed-needed'
     Wrapper on lw6p2p_node_is_seed_needed.

4.16.205 c-lw6p2p-node-new
--------------------------

 -- C function exported to Guile: 'c-lw6p2p-node-new'
     Wrapper on lw6p2p_node_new.

4.16.206 c-lw6p2p-node-poll
---------------------------

 -- C function exported to Guile: 'c-lw6p2p-node-poll'
     Wrapper on lw6p2p_node_poll.

4.16.207 c-lw6p2p-node-put-local-msg
------------------------------------

 -- C function exported to Guile: 'c-lw6p2p-node-put-local-msg'
     Wrapper on lw6p2p_node_put_local_msg.

4.16.208 c-lw6p2p-node-refresh-peer
-----------------------------------

 -- C function exported to Guile: 'c-lw6p2p-node-refresh-peer'
     Wrapper on lw6p2p_node_refresh_peer.

4.16.209 c-lw6p2p-node-server-start
-----------------------------------

 -- C function exported to Guile: 'c-lw6p2p-node-server-start'
     Wrapper on lw6p2p_node_server_start.

4.16.210 c-lw6p2p-node-update-info
----------------------------------

 -- C function exported to Guile: 'c-lw6p2p-node-update-info'
     Wrapper on lw6p2p_node_update_info.

4.16.211 c-lw6pil-bench
-----------------------

 -- C function exported to Guile: 'c-lw6pil-bench'
     Wrapper on lw6pil_bench.

4.16.212 c-lw6pil-build-pilot
-----------------------------

 -- C function exported to Guile: 'c-lw6pil-build-pilot'
     Wrapper on lw6pil_build_pilot.

4.16.213 c-lw6pil-calibrate
---------------------------

 -- C function exported to Guile: 'c-lw6pil-calibrate'
     Wrapper on lw6pil_calibrate.

4.16.214 c-lw6pil-commit
------------------------

 -- C function exported to Guile: 'c-lw6pil-commit'
     Wrapper on lw6pil_commit.

4.16.215 c-lw6pil-did-cursor-win
--------------------------------

 -- C function exported to Guile: 'c-lw6pil-did-cursor-win'
     Wrapper on lw6pil_did_cursor_win.

4.16.216 c-lw6pil-dump-command-generate
---------------------------------------

 -- C function exported to Guile: 'c-lw6pil-dump-command-generate'
     Wrapper on lw6pil_dump_command_generate.

4.16.217 c-lw6pil-execute-command
---------------------------------

 -- C function exported to Guile: 'c-lw6pil-execute-command'
     Wrapper on lw6pil_execute_command.

4.16.218 c-lw6pil-fix-coords
----------------------------

 -- C function exported to Guile: 'c-lw6pil-fix-coords'
     Wrapper on lw6pil_coords_fix.

4.16.219 c-lw6pil-fix-coords-x10
--------------------------------

 -- C function exported to Guile: 'c-lw6pil-fix-coords-x10'
     Wrapper on lw6pil_coords_fix_x10.

4.16.220 c-lw6pil-get-last-commit-seq
-------------------------------------

 -- C function exported to Guile: 'c-lw6pil-get-last-commit-seq'
     Wrapper on lw6pil_get_last_commit_seq.

4.16.221 c-lw6pil-get-looser
----------------------------

 -- C function exported to Guile: 'c-lw6pil-get-looser'
     Wrapper on lw6pil_get_looser.

4.16.222 c-lw6pil-get-max-seq
-----------------------------

 -- C function exported to Guile: 'c-lw6pil-get-max-seq'
     Wrapper on lw6pil_get_max_seq.

4.16.223 c-lw6pil-get-next-seq
------------------------------

 -- C function exported to Guile: 'c-lw6pil-get-next-seq'
     Wrapper on lw6pil_get_next_seq.

4.16.224 c-lw6pil-get-reference-current-seq
-------------------------------------------

 -- C function exported to Guile: 'c-lw6pil-get-reference-current-seq'
     Wrapper on lw6pil_get_reference_current_seq.

4.16.225 c-lw6pil-get-reference-target-seq
------------------------------------------

 -- C function exported to Guile: 'c-lw6pil-get-reference-target-seq'
     Wrapper on lw6pil_get_reference_target_seq.

4.16.226 c-lw6pil-get-round-0
-----------------------------

 -- C function exported to Guile: 'c-lw6pil-get-round-0'
     Wrapper on lw6pil_get_round_0.

4.16.227 c-lw6pil-get-seq-0
---------------------------

 -- C function exported to Guile: 'c-lw6pil-get-seq-0'
     Wrapper on lw6pil_get_seq_0.

4.16.228 c-lw6pil-get-winner
----------------------------

 -- C function exported to Guile: 'c-lw6pil-get-winner'
     Wrapper on lw6pil_get_winner.

4.16.229 c-lw6pil-is-over
-------------------------

 -- C function exported to Guile: 'c-lw6pil-is-over'
     Wrapper on lw6pil_is_over.

4.16.230 c-lw6pil-local-command
-------------------------------

 -- C function exported to Guile: 'c-lw6pil-local-command'
     Wrapper on lw6pil_local_command.

4.16.231 c-lw6pil-local-cursors-set-main
----------------------------------------

 -- C function exported to Guile: 'c-lw6pil-local-cursors-set-main'
     Wrapper on lw6pil_local_cursors_set_main.

4.16.232 c-lw6pil-local-cursors-set-mouse-controlled
----------------------------------------------------

 -- C function exported to Guile:
          'c-lw6pil-local-cursors-set-mouse-controlled'
     Wrapper on lw6pil_local_cursors_set_mouse_controlled.

4.16.233 c-lw6pil-make-backup
-----------------------------

 -- C function exported to Guile: 'c-lw6pil-make-backup'
     Wrapper on lw6pil_make_backup.

4.16.234 c-lw6pil-poll-dump
---------------------------

 -- C function exported to Guile: 'c-lw6pil-poll-dump'
     Wrapper on lw6pil_poll_dump.

4.16.235 c-lw6pil-round2seq
---------------------------

 -- C function exported to Guile: 'c-lw6pil-round2seq'
     Wrapper on lw6pil_round2seq.

4.16.236 c-lw6pil-seed-command-generate
---------------------------------------

 -- C function exported to Guile: 'c-lw6pil-seed-command-generate'
     Wrapper on lw6pil_seed_command_generate.

4.16.237 c-lw6pil-send-command
------------------------------

 -- C function exported to Guile: 'c-lw6pil-send-command'
     Wrapper on lw6pil_send_command.

4.16.238 c-lw6pil-seq-random-0
------------------------------

 -- C function exported to Guile: 'c-lw6pil-seq-random-0'
     Wrapper on lw6pil_seq_random_0.

4.16.239 c-lw6pil-seq2round
---------------------------

 -- C function exported to Guile: 'c-lw6pil-seq2round'
     Wrapper on lw6pil_seq2round.

4.16.240 c-lw6pil-slow-down
---------------------------

 -- C function exported to Guile: 'c-lw6pil-slow-down'
     Wrapper on lw6pil_slow_down.

4.16.241 c-lw6pil-speed-up
--------------------------

 -- C function exported to Guile: 'c-lw6pil-speed-up'
     Wrapper on lw6pil_speed_up.

4.16.242 c-lw6pil-suite-get-checkpoint
--------------------------------------

 -- C function exported to Guile: 'c-lw6pil-suite-get-checkpoint'
     Wrapper on lw6pil_suite_get_checkpoint.

4.16.243 c-lw6pil-suite-get-commands-by-node-index
--------------------------------------------------

 -- C function exported to Guile:
          'c-lw6pil-suite-get-commands-by-node-index'
     Wrapper on lw6pil_suite_get_command_by_node_index, returns the list
     of all steps.

4.16.244 c-lw6pil-suite-get-commands-by-stage
---------------------------------------------

 -- C function exported to Guile: 'c-lw6pil-suite-get-commands-by-stage'
     Wrapper on lw6pil_suite_get_command_by_stage, returns the list of
     all steps.

4.16.245 c-lw6pil-suite-get-node-id
-----------------------------------

 -- C function exported to Guile: 'c-lw6pil-suite-get-node-id'
     Wrapper on lw6pil_suite_get_node_id.

4.16.246 c-lw6pil-suite-get-seq-0
---------------------------------

 -- C function exported to Guile: 'c-lw6pil-suite-get-seq-0'
     Wrapper on lw6pil_suite_get_seq_0.

4.16.247 c-lw6pil-suite-init
----------------------------

 -- C function exported to Guile: 'c-lw6pil-suite-init'
     Wrapper on lw6pil_suite_init.

4.16.248 c-lw6pil-sync-from-backup
----------------------------------

 -- C function exported to Guile: 'c-lw6pil-sync-from-backup'
     Wrapper on lw6pil_sync_from_backup.

4.16.249 c-lw6pil-sync-from-draft
---------------------------------

 -- C function exported to Guile: 'c-lw6pil-sync-from-draft'
     Wrapper on lw6pil_sync_from_draft.

4.16.250 c-lw6pil-sync-from-reference
-------------------------------------

 -- C function exported to Guile: 'c-lw6pil-sync-from-reference'
     Wrapper on lw6pil_sync_from_reference.

4.16.251 c-lw6snd-get-backends
------------------------------

 -- C function exported to Guile: 'c-lw6snd-get-backends'
     Wrapper on lw6snd_get_backends.

4.16.252 c-lw6snd-is-music-file
-------------------------------

 -- C function exported to Guile: 'c-lw6snd-is-music-file'
     Wrapper on lw6snd_is_music_file.

4.16.253 c-lw6snd-new
---------------------

 -- C function exported to Guile: 'c-lw6snd-new'
     Wrapper on lw6snd_new.

4.16.254 c-lw6snd-play-fx
-------------------------

 -- C function exported to Guile: 'c-lw6snd-play-fx'
     Wrapper on lw6snd_play_fx.

4.16.255 c-lw6snd-play-music-file
---------------------------------

 -- C function exported to Guile: 'c-lw6snd-play-music-file'
     Wrapper on lw6snd_play_music_file.

4.16.256 c-lw6snd-play-music-random
-----------------------------------

 -- C function exported to Guile: 'c-lw6snd-play-music-random'
     Wrapper on lw6snd_play_music_random.

4.16.257 c-lw6snd-poll
----------------------

 -- C function exported to Guile: 'c-lw6snd-poll'
     Wrapper on lw6snd_poll.

4.16.258 c-lw6snd-release
-------------------------

 -- C function exported to Guile: 'c-lw6snd-release'
     Wrapper on lw6snd_release.

4.16.259 c-lw6snd-set-fx-volume
-------------------------------

 -- C function exported to Guile: 'c-lw6snd-set-fx-volume'
     Wrapper on lw6snd_set_fx_volume.

4.16.260 c-lw6snd-set-music-volume
----------------------------------

 -- C function exported to Guile: 'c-lw6snd-set-music-volume'
     Wrapper on lw6snd_set_music_volume.

4.16.261 c-lw6snd-set-water-volume
----------------------------------

 -- C function exported to Guile: 'c-lw6snd-set-water-volume'
     Wrapper on lw6snd_set_water_volume.

4.16.262 c-lw6snd-stop-music
----------------------------

 -- C function exported to Guile: 'c-lw6snd-stop-music'
     Wrapper on lw6snd_stop_music.

4.16.263 c-lw6srv-get-backends
------------------------------

 -- C function exported to Guile: 'c-lw6srv-get-backends'
     Wrapper on lw6srv_get_backends.

4.16.264 c-lw6sys-build-get-abs-srcdir
--------------------------------------

 -- C function exported to Guile: 'c-lw6sys-build-get-abs-srcdir'
     Wrapper on lw6sys_build_get_abs_srcdir.

4.16.265 c-lw6sys-build-get-bin-id
----------------------------------

 -- C function exported to Guile: 'c-lw6sys-build-get-bin-id'
     Wrapper on lw6sys_build_get_bin_id.

4.16.266 c-lw6sys-build-get-bugs-url
------------------------------------

 -- C function exported to Guile: 'c-lw6sys-build-get-bugs-url'
     Wrapper on lw6sys_build_get_bugs_url.

4.16.267 c-lw6sys-build-get-cflags
----------------------------------

 -- C function exported to Guile: 'c-lw6sys-build-get-cflags'
     Wrapper on lw6sys_build_get_cflags.

4.16.268 c-lw6sys-build-get-codename
------------------------------------

 -- C function exported to Guile: 'c-lw6sys-build-get-codename'
     Wrapper on lw6sys_build_get_codename.

4.16.269 c-lw6sys-build-get-configure-args
------------------------------------------

 -- C function exported to Guile: 'c-lw6sys-build-get-configure-args'
     Wrapper on lw6sys_build_get_configure_args.

4.16.270 c-lw6sys-build-get-copyright
-------------------------------------

 -- C function exported to Guile: 'c-lw6sys-build-get-copyright'
     Wrapper on lw6sys_build_get_copyright.

4.16.271 c-lw6sys-build-get-datadir
-----------------------------------

 -- C function exported to Guile: 'c-lw6sys-build-get-datadir'
     Wrapper on lw6sys_build_get_datadir.

4.16.272 c-lw6sys-build-get-date
--------------------------------

 -- C function exported to Guile: 'c-lw6sys-build-get-date'
     Wrapper on lw6sys_build_get_date.

4.16.273 c-lw6sys-build-get-docdir
----------------------------------

 -- C function exported to Guile: 'c-lw6sys-build-get-docdir'
     Wrapper on lw6sys_build_get_docdir.

4.16.274 c-lw6sys-build-get-enable-allinone
-------------------------------------------

 -- C function exported to Guile: 'c-lw6sys-build-get-enable-allinone'
     Wrapper on lw6sys_build_get_enable_allinone.

4.16.275 c-lw6sys-build-get-enable-console
------------------------------------------

 -- C function exported to Guile: 'c-lw6sys-build-get-enable-console'
     Wrapper on lw6sys_build_get_enable_console.

4.16.276 c-lw6sys-build-get-enable-fullstatic
---------------------------------------------

 -- C function exported to Guile: 'c-lw6sys-build-get-enable-fullstatic'
     Wrapper on lw6sys_build_get_enable_fullstatic.

4.16.277 c-lw6sys-build-get-enable-gcov
---------------------------------------

 -- C function exported to Guile: 'c-lw6sys-build-get-enable-gcov'
     Wrapper on lw6sys_build_get_enable_gcov.

4.16.278 c-lw6sys-build-get-enable-gprof
----------------------------------------

 -- C function exported to Guile: 'c-lw6sys-build-get-enable-gprof'
     Wrapper on lw6sys_build_get_enable_gprof.

4.16.279 c-lw6sys-build-get-enable-gtk
--------------------------------------

 -- C function exported to Guile: 'c-lw6sys-build-get-enable-gtk'
     Wrapper on lw6sys_build_get_enable_gtk.

4.16.280 c-lw6sys-build-get-enable-instrument
---------------------------------------------

 -- C function exported to Guile: 'c-lw6sys-build-get-enable-instrument'
     Wrapper on lw6sys_build_get_enable_instrument.

4.16.281 c-lw6sys-build-get-enable-mod-caca
-------------------------------------------

 -- C function exported to Guile: 'c-lw6sys-build-get-enable-mod-caca'
     Wrapper on lw6sys_build_get_enable_mod_caca.

4.16.282 c-lw6sys-build-get-enable-mod-csound
---------------------------------------------

 -- C function exported to Guile: 'c-lw6sys-build-get-enable-mod-csound'
     Wrapper on lw6sys_build_get_enable_mod_csound.

4.16.283 c-lw6sys-build-get-enable-mod-gl1
------------------------------------------

 -- C function exported to Guile: 'c-lw6sys-build-get-enable-mod-gl1'
     Wrapper on lw6sys_build_get_enable_mod_gl1.

4.16.284 c-lw6sys-build-get-enable-mod-gles2
--------------------------------------------

 -- C function exported to Guile: 'c-lw6sys-build-get-enable-mod-gles2'
     Wrapper on lw6sys_build_get_enable_mod_gles2.

4.16.285 c-lw6sys-build-get-enable-mod-http
-------------------------------------------

 -- C function exported to Guile: 'c-lw6sys-build-get-enable-mod-http'
     Wrapper on lw6sys_build_get_enable_mod_http.

4.16.286 c-lw6sys-build-get-enable-mod-ogg
------------------------------------------

 -- C function exported to Guile: 'c-lw6sys-build-get-enable-mod-ogg'
     Wrapper on lw6sys_build_get_enable_mod_ogg.

4.16.287 c-lw6sys-build-get-enable-mod-soft
-------------------------------------------

 -- C function exported to Guile: 'c-lw6sys-build-get-enable-mod-soft'
     Wrapper on lw6sys_build_get_enable_mod_soft.

4.16.288 c-lw6sys-build-get-enable-openmp
-----------------------------------------

 -- C function exported to Guile: 'c-lw6sys-build-get-enable-openmp'
     Wrapper on lw6sys_build_get_enable_openmp.

4.16.289 c-lw6sys-build-get-enable-optimize
-------------------------------------------

 -- C function exported to Guile: 'c-lw6sys-build-get-enable-optimize'
     Wrapper on lw6sys_build_get_enable_optimize.

4.16.290 c-lw6sys-build-get-enable-paranoid
-------------------------------------------

 -- C function exported to Guile: 'c-lw6sys-build-get-enable-paranoid'
     Wrapper on lw6sys_build_get_enable_paranoid.

4.16.291 c-lw6sys-build-get-enable-profiler
-------------------------------------------

 -- C function exported to Guile: 'c-lw6sys-build-get-enable-profiler'
     Wrapper on lw6sys_build_get_enable_profiler.

4.16.292 c-lw6sys-build-get-enable-valgrind
-------------------------------------------

 -- C function exported to Guile: 'c-lw6sys-build-get-enable-valgrind'
     Wrapper on lw6sys_build_get_enable_valgrind.

4.16.293 c-lw6sys-build-get-endianness
--------------------------------------

 -- C function exported to Guile: 'c-lw6sys-build-get-endianness'
     Wrapper on lw6sys_build_get_endianness.

4.16.294 c-lw6sys-build-get-gcc-version
---------------------------------------

 -- C function exported to Guile: 'c-lw6sys-build-get-gcc-version'
     Wrapper on lw6sys_build_get_gcc_version.

4.16.295 c-lw6sys-build-get-home-url
------------------------------------

 -- C function exported to Guile: 'c-lw6sys-build-get-home-url'
     Wrapper on lw6sys_build_get_home_url.

4.16.296 c-lw6sys-build-get-host-cpu
------------------------------------

 -- C function exported to Guile: 'c-lw6sys-build-get-host-cpu'
     Wrapper on lw6sys_build_get_host_cpu.

4.16.297 c-lw6sys-build-get-host-os
-----------------------------------

 -- C function exported to Guile: 'c-lw6sys-build-get-host-os'
     Wrapper on lw6sys_build_get_host_os.

4.16.298 c-lw6sys-build-get-hostname
------------------------------------

 -- C function exported to Guile: 'c-lw6sys-build-get-hostname'
     Wrapper on lw6sys_build_get_hostname.

4.16.299 c-lw6sys-build-get-includedir
--------------------------------------

 -- C function exported to Guile: 'c-lw6sys-build-get-includedir'
     Wrapper on lw6sys_build_get_includedir.

4.16.300 c-lw6sys-build-get-ldflags
-----------------------------------

 -- C function exported to Guile: 'c-lw6sys-build-get-ldflags'
     Wrapper on lw6sys_build_get_ldflags.

4.16.301 c-lw6sys-build-get-libdir
----------------------------------

 -- C function exported to Guile: 'c-lw6sys-build-get-libdir'
     Wrapper on lw6sys_build_get_libdir.

4.16.302 c-lw6sys-build-get-license
-----------------------------------

 -- C function exported to Guile: 'c-lw6sys-build-get-license'
     Wrapper on lw6sys_build_get_license.

4.16.303 c-lw6sys-build-get-localedir
-------------------------------------

 -- C function exported to Guile: 'c-lw6sys-build-get-localedir'
     Wrapper on lw6sys_build_get_localedir.

4.16.304 c-lw6sys-build-get-md5sum
----------------------------------

 -- C function exported to Guile: 'c-lw6sys-build-get-md5sum'
     Wrapper on lw6sys_build_get_md5sum.

4.16.305 c-lw6sys-build-get-package-id
--------------------------------------

 -- C function exported to Guile: 'c-lw6sys-build-get-package-id'
     Wrapper on lw6sys_build_get_package_id.

4.16.306 c-lw6sys-build-get-package-name
----------------------------------------

 -- C function exported to Guile: 'c-lw6sys-build-get-package-name'
     Wrapper on lw6sys_build_get_package_name.

4.16.307 c-lw6sys-build-get-package-string
------------------------------------------

 -- C function exported to Guile: 'c-lw6sys-build-get-package-string'
     Wrapper on lw6sys_build_get_package_string.

4.16.308 c-lw6sys-build-get-package-tarname
-------------------------------------------

 -- C function exported to Guile: 'c-lw6sys-build-get-package-tarname'
     Wrapper on lw6sys_build_get_package_tarname.

4.16.309 c-lw6sys-build-get-pointer-size
----------------------------------------

 -- C function exported to Guile: 'c-lw6sys-build-get-pointer-size'
     Wrapper on lw6sys_build_get_pointer_size.

4.16.310 c-lw6sys-build-get-prefix
----------------------------------

 -- C function exported to Guile: 'c-lw6sys-build-get-prefix'
     Wrapper on lw6sys_build_get_prefix.

4.16.311 c-lw6sys-build-get-stamp
---------------------------------

 -- C function exported to Guile: 'c-lw6sys-build-get-stamp'
     Wrapper on lw6sys_build_get_stamp.

4.16.312 c-lw6sys-build-get-time
--------------------------------

 -- C function exported to Guile: 'c-lw6sys-build-get-time'
     Wrapper on lw6sys_build_get_time.

4.16.313 c-lw6sys-build-get-top-srcdir
--------------------------------------

 -- C function exported to Guile: 'c-lw6sys-build-get-top-srcdir'
     Wrapper on lw6sys_build_get_top_srcdir.

4.16.314 c-lw6sys-build-get-version
-----------------------------------

 -- C function exported to Guile: 'c-lw6sys-build-get-version'
     Wrapper on lw6sys_build_get_version.

4.16.315 c-lw6sys-build-get-version-base
----------------------------------------

 -- C function exported to Guile: 'c-lw6sys-build-get-version-base'
     Wrapper on lw6sys_build_get_version_base.

4.16.316 c-lw6sys-build-get-version-major
-----------------------------------------

 -- C function exported to Guile: 'c-lw6sys-build-get-version-major'
     Wrapper on lw6sys_build_get_version_major.

4.16.317 c-lw6sys-build-get-version-minor
-----------------------------------------

 -- C function exported to Guile: 'c-lw6sys-build-get-version-minor'
     Wrapper on lw6sys_build_get_version_minor.

4.16.318 c-lw6sys-build-is-gnu
------------------------------

 -- C function exported to Guile: 'c-lw6sys-build-is-gnu'
     Wrapper on lw6sys_build_is_gnu.

4.16.319 c-lw6sys-build-is-gp2x
-------------------------------

 -- C function exported to Guile: 'c-lw6sys-build-is-gp2x'
     Wrapper on lw6sys_build_is_gp2x.

4.16.320 c-lw6sys-build-is-mac-os-x
-----------------------------------

 -- C function exported to Guile: 'c-lw6sys-build-is-mac-os-x'
     Wrapper on lw6sys_build_is_mac_os_x.

4.16.321 c-lw6sys-build-is-ms-windows
-------------------------------------

 -- C function exported to Guile: 'c-lw6sys-build-is-ms-windows'
     Wrapper on lw6sys_build_is_ms_windows.

4.16.322 c-lw6sys-build-is-unix
-------------------------------

 -- C function exported to Guile: 'c-lw6sys-build-is-unix'
     Wrapper on lw6sys_build_is_unix.

4.16.323 c-lw6sys-build-is-x86
------------------------------

 -- C function exported to Guile: 'c-lw6sys-build-is-x86'
     Wrapper on lw6sys_build_is_x86.

4.16.324 c-lw6sys-debug-get
---------------------------

 -- C function exported to Guile: 'c-lw6sys-debug-get'
     Wrapper on lw6sys_debug_get.

4.16.325 c-lw6sys-debug-set
---------------------------

 -- C function exported to Guile: 'c-lw6sys-debug-set'
     Wrapper on lw6sys_debug_set.

4.16.326 c-lw6sys-delay
-----------------------

 -- C function exported to Guile: 'c-lw6sys-delay'
     Wrapper on lw6sys_delay.

4.16.327 c-lw6sys-dump
----------------------

 -- C function exported to Guile: 'c-lw6sys-dump'
     Wrapper on lw6sys_dump.

4.16.328 c-lw6sys-dump-clear
----------------------------

 -- C function exported to Guile: 'c-lw6sys-dump-clear'
     Wrapper on lw6sys_dump_clear.

4.16.329 c-lw6sys-generate-id-16
--------------------------------

 -- C function exported to Guile: 'c-lw6sys-generate-id-16'
     Wrapper on lw6sys_generate_id_16.

4.16.330 c-lw6sys-generate-id-32
--------------------------------

 -- C function exported to Guile: 'c-lw6sys-generate-id-32'
     Wrapper on lw6sys_generate_id_32.

4.16.331 c-lw6sys-generate-id-64
--------------------------------

 -- C function exported to Guile: 'c-lw6sys-generate-id-64'
     Wrapper on lw6sys_generate_id_64.

4.16.332 c-lw6sys-get-config-file
---------------------------------

 -- C function exported to Guile: 'c-lw6sys-get-config-file'
     Wrapper on lw6sys_get_config_file.

4.16.333 c-lw6sys-get-cwd
-------------------------

 -- C function exported to Guile: 'c-lw6sys-get-cwd'
     Wrapper on lw6sys_get_cwd.

4.16.334 c-lw6sys-get-cycle
---------------------------

 -- C function exported to Guile: 'c-lw6sys-get-cycle'
     Wrapper on lw6sys_get_cycle.

4.16.335 c-lw6sys-get-data-dir
------------------------------

 -- C function exported to Guile: 'c-lw6sys-get-data-dir'
     Wrapper on lw6sys_get_data_dir.

4.16.336 c-lw6sys-get-default-config-file
-----------------------------------------

 -- C function exported to Guile: 'c-lw6sys-get-default-config-file'
     Wrapper on lw6sys_get_default_config_file.

4.16.337 c-lw6sys-get-default-data-dir
--------------------------------------

 -- C function exported to Guile: 'c-lw6sys-get-default-data-dir'
     Wrapper on lw6sys_get_default_data_dir.

4.16.338 c-lw6sys-get-default-log-file
--------------------------------------

 -- C function exported to Guile: 'c-lw6sys-get-default-log-file'
     Wrapper on lw6sys_get_default_log_file.

4.16.339 c-lw6sys-get-default-map-dir
-------------------------------------

 -- C function exported to Guile: 'c-lw6sys-get-default-map-dir'
     Wrapper on lw6sys_get_default_map_dir.

4.16.340 c-lw6sys-get-default-map-path
--------------------------------------

 -- C function exported to Guile: 'c-lw6sys-get-default-map-path'
     Wrapper on lw6sys_get_default_map_path.

4.16.341 c-lw6sys-get-default-mod-dir
-------------------------------------

 -- C function exported to Guile: 'c-lw6sys-get-default-mod-dir'
     Wrapper on lw6sys_get_default_mod_dir.

4.16.342 c-lw6sys-get-default-music-dir
---------------------------------------

 -- C function exported to Guile: 'c-lw6sys-get-default-music-dir'
     Wrapper on lw6sys_get_default_music_dir.

4.16.343 c-lw6sys-get-default-music-path
----------------------------------------

 -- C function exported to Guile: 'c-lw6sys-get-default-music-path'
     Wrapper on lw6sys_get_default_music_path.

4.16.344 c-lw6sys-get-default-prefix
------------------------------------

 -- C function exported to Guile: 'c-lw6sys-get-default-prefix'
     Wrapper on lw6sys_get_default_prefix.

4.16.345 c-lw6sys-get-default-script-file
-----------------------------------------

 -- C function exported to Guile: 'c-lw6sys-get-default-script-file'
     Wrapper on lw6sys_get_default_script_file.

4.16.346 c-lw6sys-get-default-user-dir
--------------------------------------

 -- C function exported to Guile: 'c-lw6sys-get-default-user-dir'
     Wrapper on lw6sys_get_default_user_dir.

4.16.347 c-lw6sys-get-hostname
------------------------------

 -- C function exported to Guile: 'c-lw6sys-get-hostname'
     Wrapper on lw6sys_get_hostname.

4.16.348 c-lw6sys-get-log-file
------------------------------

 -- C function exported to Guile: 'c-lw6sys-get-log-file'
     Wrapper on lw6sys_get_log_file.

4.16.349 c-lw6sys-get-map-dir
-----------------------------

 -- C function exported to Guile: 'c-lw6sys-get-map-dir'
     Wrapper on lw6sys_get_map_dir.

4.16.350 c-lw6sys-get-map-path
------------------------------

 -- C function exported to Guile: 'c-lw6sys-get-map-path'
     Wrapper on lw6sys_get_map_path.

4.16.351 c-lw6sys-get-memory-bazooka-eraser
-------------------------------------------

 -- C function exported to Guile: 'c-lw6sys-get-memory-bazooka-eraser'
     Wrapper on lw6sys_get_memory_bazooka_eraser.

4.16.352 c-lw6sys-get-memory-bazooka-size
-----------------------------------------

 -- C function exported to Guile: 'c-lw6sys-get-memory-bazooka-size'
     Wrapper on lw6sys_get_memory_bazooka_size.

4.16.353 c-lw6sys-get-mod-dir
-----------------------------

 -- C function exported to Guile: 'c-lw6sys-get-mod-dir'
     Wrapper on lw6sys_get_mod_dir.

4.16.354 c-lw6sys-get-music-dir
-------------------------------

 -- C function exported to Guile: 'c-lw6sys-get-music-dir'
     Wrapper on lw6sys_get_music_dir.

4.16.355 c-lw6sys-get-music-path
--------------------------------

 -- C function exported to Guile: 'c-lw6sys-get-music-path'
     Wrapper on lw6sys_get_music_path.

4.16.356 c-lw6sys-get-prefix
----------------------------

 -- C function exported to Guile: 'c-lw6sys-get-prefix'
     Wrapper on lw6sys_get_prefix.

4.16.357 c-lw6sys-get-run-dir
-----------------------------

 -- C function exported to Guile: 'c-lw6sys-get-run-dir'
     Wrapper on lw6sys_get_run_dir.

4.16.358 c-lw6sys-get-script-file
---------------------------------

 -- C function exported to Guile: 'c-lw6sys-get-script-file'
     Wrapper on lw6sys_get_script_file.

4.16.359 c-lw6sys-get-timestamp
-------------------------------

 -- C function exported to Guile: 'c-lw6sys-get-timestamp'
     Wrapper on lw6sys_get_timestamp.

4.16.360 c-lw6sys-get-uptime
----------------------------

 -- C function exported to Guile: 'c-lw6sys-get-uptime'
     Wrapper on lw6sys_get_uptime.

4.16.361 c-lw6sys-get-user-dir
------------------------------

 -- C function exported to Guile: 'c-lw6sys-get-user-dir'
     Wrapper on lw6sys_get_user_dir.

4.16.362 c-lw6sys-get-username
------------------------------

 -- C function exported to Guile: 'c-lw6sys-get-username'
     Wrapper on lw6sys_get_username.

4.16.363 c-lw6sys-getenv
------------------------

 -- C function exported to Guile: 'c-lw6sys-getenv'
     Wrapper on lw6sys_getenv.

4.16.364 c-lw6sys-getenv-prefixed
---------------------------------

 -- C function exported to Guile: 'c-lw6sys-getenv-prefixed'
     Wrapper on lw6sys_getenv_prefixed.

4.16.365 c-lw6sys-idle
----------------------

 -- C function exported to Guile: 'c-lw6sys-idle'
     Wrapper on lw6sys_idle.

4.16.366 c-lw6sys-log
---------------------

 -- C function exported to Guile: 'c-lw6sys-log'
     Wrapper on lw6sys_log.

4.16.367 c-lw6sys-log-get-backtrace-mode
----------------------------------------

 -- C function exported to Guile: 'c-lw6sys-log-get-backtrace-mode'
     Wrapper on lw6sys_log_get_backtrace_mode.

4.16.368 c-lw6sys-log-get-level
-------------------------------

 -- C function exported to Guile: 'c-lw6sys-log-get-level'
     Wrapper on lw6sys_log_get_level.

4.16.369 c-lw6sys-log-set-backtrace-mode
----------------------------------------

 -- C function exported to Guile: 'c-lw6sys-log-set-backtrace-mode'
     Wrapper on lw6sys_log_set_backtrace_mode.

4.16.370 c-lw6sys-log-set-dialog-timeout
----------------------------------------

 -- C function exported to Guile: 'c-lw6sys-log-set-dialog-timeout'
     Wrapper on lw6sys_log_set_dialog_timeout.

4.16.371 c-lw6sys-log-set-level
-------------------------------

 -- C function exported to Guile: 'c-lw6sys-log-set-level'
     Wrapper on lw6sys_log_set_level.

4.16.372 c-lw6sys-megabytes-available
-------------------------------------

 -- C function exported to Guile: 'c-lw6sys-megabytes-available'
     Wrapper on lw6sys_megabytes_available.

4.16.373 c-lw6sys-openmp-get-num-procs
--------------------------------------

 -- C function exported to Guile: 'c-lw6sys-openmp-get-num-procs'
     Wrapper on lw6sys_openmp_get_num_procs.

4.16.374 c-lw6sys-path-concat
-----------------------------

 -- C function exported to Guile: 'c-lw6sys-path-concat'
     Wrapper on lw6sys_path_concat.

4.16.375 c-lw6sys-path-file-only
--------------------------------

 -- C function exported to Guile: 'c-lw6sys-path-file-only'
     Wrapper on lw6sys_path_file_only.

4.16.376 c-lw6sys-path-parent
-----------------------------

 -- C function exported to Guile: 'c-lw6sys-path-parent'
     Wrapper on lw6sys_path_parent.

4.16.377 c-lw6sys-path-split
----------------------------

 -- C function exported to Guile: 'c-lw6sys-path-split'
     Wrapper on lw6sys_path_split.

4.16.378 c-lw6sys-set-memory-bazooka-eraser
-------------------------------------------

 -- C function exported to Guile: 'c-lw6sys-set-memory-bazooka-eraser'
     Wrapper on lw6sys_set_memory_bazooka_eraser.

4.16.379 c-lw6sys-set-memory-bazooka-size
-----------------------------------------

 -- C function exported to Guile: 'c-lw6sys-set-memory-bazooka-size'
     Wrapper on lw6sys_set_memory_bazooka_size.

4.16.380 c-lw6sys-signal-custom
-------------------------------

 -- C function exported to Guile: 'c-lw6sys-signal-custom'
     Wrapper on lw6sys_signal_custom.

4.16.381 c-lw6sys-signal-default
--------------------------------

 -- C function exported to Guile: 'c-lw6sys-signal-default'
     Wrapper on lw6sys_signal_default.

4.16.382 c-lw6sys-signal-poll-quit
----------------------------------

 -- C function exported to Guile: 'c-lw6sys-signal-poll-quit'
     Wrapper on lw6sys_signal_poll_quit.

4.16.383 c-lw6sys-signal-send-quit
----------------------------------

 -- C function exported to Guile: 'c-lw6sys-signal-send-quit'
     Wrapper on lw6sys_signal_send_quit.

4.16.384 c-lw6sys-sleep
-----------------------

 -- C function exported to Guile: 'c-lw6sys-sleep'
     Wrapper on lw6sys_sleep.

4.16.385 c-lw6sys-snooze
------------------------

 -- C function exported to Guile: 'c-lw6sys-snooze'
     Wrapper on lw6sys_snooze.

4.16.386 c-lw6sys-url-canonize
------------------------------

 -- C function exported to Guile: 'c-lw6sys-url-canonize'
     Wrapper on lw6sys_url_canonize.

4.16.387 c-lw6tsk-loader-get-stage
----------------------------------

 -- C function exported to Guile: 'c-lw6tsk-loader-get-stage'
     Wrapper on lw6tsk_loader_get_stage.

4.16.388 c-lw6tsk-loader-new
----------------------------

 -- C function exported to Guile: 'c-lw6tsk-loader-new'
     Wrapper on lw6tsk_loader_new.

4.16.389 c-lw6tsk-loader-pop
----------------------------

 -- C function exported to Guile: 'c-lw6tsk-loader-pop'
     Wrapper on lw6tsk_loader_pop.

4.16.390 c-lw6tsk-loader-push-gen
---------------------------------

 -- C function exported to Guile: 'c-lw6tsk-loader-push-gen'
     Wrapper on lw6tsk_loader_push_gen.

4.16.391 c-lw6tsk-loader-push-ldr
---------------------------------

 -- C function exported to Guile: 'c-lw6tsk-loader-push-ldr'
     Wrapper on lw6tsk_loader_push_ldr.


File: liquidwar6.info,  Node: Script hooks,  Prev: C to Guile,  Up: Reference

4.17 Script hooks
=================


File: liquidwar6.info,  Node: C API,  Prev: Reference,  Up: Top

5 C API
*******

This chapter contains a description of all modules and a list of all
documented C functions in the program.  It contains many references and
is self-generated from C comments using gdoc
(http://josefsson.org/gdoc/) by Simon Josefsson (http://josefsson.org/).

   In order to reduce the number of pages of printed output, this
complete reference is, by default, disabled in printable versions of the
documentation (PostScript, PDF). This is both to make the manual more
readable and to avoid wasting paper.  Think about the environment.

   It is however available in the HTML version of the documentation,
which you can read online on
<http://www.gnu.org/software/liquidwar6/manual/html_node/>.

   Additionnally, the following adresses contain various view on the
source code, giving informations on all the internal and public C
interfaces:

   * <http://www.ufoot.org/liquidwar/v6/doc/coverage/>: the lcov
     (http://ltp.sourceforge.net/coverage/lcov.php) output when running
     './liquidwar6 --test'.  It shows what functions are actually
     tested, and how many times they are called.
   * <http://www.ufoot.org/liquidwar/v6/doc/global/>: the GNU global
     (http://www.gnu.org/software/global/) output gives complete
     cross-references, macros, headers, contants declaration.  It's a
     very good place to start browsing the code.
   * <http://www.ufoot.org/liquidwar/v6/doc/cyclo/>: the pmccabe
     (http://parisc-linux.org/~bame/pmccabe/) output shows the
     cyclomatic complexity of functions.  It enables the programmer to
     spots the "ugly" and dangerous parts of the program.
   * <http://www.ufoot.org/liquidwar/v6/doc/doxygen/>: the Doxygen
     (http://www.stack.nl/~dimitri/doxygen/) documentation gives an
     interactive access to the code, the structures and functions, and
     their dependencies.

* Menu:

* libliquidwar6::       Top-level functions.
* libbot::              Bot algorithms.
* mod-brute::           Brute-force bot.
* mod-follow::          A bot that follows others.
* mod-idiot::           Basic idiot bot.
* mod-random::          Totally random bot.
* libcfg::              Loading and saving config files.
* libcli::              Network clients.
* mod-http::            Web client.
* mod-tcp::             Tcp client using native protocol.
* mod-udp::             Udp client using native protocol.
* libcns::              Console handling.
* libcnx::              Connection common code.
* libdat::              Storing network data.
* libdef::              Keywords definitions.
* libdsp::              Threaded display.
* libdyn::              Dynamic module loading.
* libgen::              Pseudo-random map generation.
* libgfx::              Graphics.
* mod-gl1::             Initial 3D graphics backend.
* mod-gles2::           Embedded 3D graphics backend.
* mod-soft::            Software only graphics backend.
* shared-sdl::          SDL utils shared in some graphics backends.
* mod-caca::            TTY/xterm text graphics backend.
* libglb::              Gnulib embedded routines.
* libgui::              GUI utilities.
* libhlp::              Built-in help system.
* libimg::              Generating screenshots.
* libker::              Main kernel module (core algorithm).
* libldr::              Loading maps.
* libmap::              Map, AKA levels.
* libmat::              Math and matrix utilities.
* libmsg::              Network messages.
* libnet::              Low-level network routines.
* libnod::              Manipulating node data.
* libp2p::              A la peer to peer network system.
* libpil::              Dealing with game lag.
* libscm::              Guile wrapper.
* libsim::              Simulating fights.
* libsnd::              Sound.
* mod-csound::          Csound sound backend (vaporware).
* mod-ogg::             Ogg/libSDL default sound backend.
* libsrv::              Network servers.
* mod-httpd::           Embedded web server.
* mod-tcpd::            Tcp server using native protocol.
* mod-udpd::            Udp server using native protocol.
* libsys::              Low-level system utilities.
* libtsk::              Asynchronous loading.
* libvox::              Voxel-based 3D rendering.


File: liquidwar6.info,  Node: libliquidwar6,  Next: libbot,  Up: C API

5.1 libliquidwar6
=================

5.1.1 Overview
--------------

View lcov (http://ltp.sourceforge.net/coverage/lcov.php) test coverage
results on
<http://www.ufoot.org/liquidwar/v6/doc/coverage/src/lib/index.html>.

5.1.2 API
---------

 -- Function: void lw6_resize_callback (lw6sys_context_t * SYS_CONTEXT,
          lw6gui_video_mode_t * VIDEO_MODE)
     SYS_CONTEXT: global system context

     VIDEO_MODE: the new video mode

     This callback is here because gfx needs to update the config when
     the screen is resized.  But...  we did not want to make gfx depend
     on cfg "directly".  It's cleaner to pass parameters with Scheme, in
     the long run, it should make things easier.  So this callback is
     the solution.  Another side effect is that this way there's a
     tangible obvious trace of this updating of config status by the gfx
     module.  Seeing it sticking out like a thumb isn't a bad thing.

     *Return value:* none

 -- Function: void lw6_release (lw6sys_context_t * SYS_CONTEXT)
     SYS_CONTEXT: global system context

     Functions which will call 'quit', 'free', 'destroy' on whatever
     smob object that has threads and/or requires hardware ressources.
     This is to be called before the Guile interpreter ends.  This is
     because when it garbage collects objects at the end of the program,
     it has no idea of what order to use when freeing objects.  So if an
     object which uses another one in a thread is freed after the other
     is freed, you get a (rather unexplainabled if not warned) segfault.

     *Return value:* none

 -- Function: void lw6_exit (lw6sys_context_t * SYS_CONTEXT)
     SYS_CONTEXT: global system context

     Sends a quit message and displays a newline.

     *Return value:* none

 -- Function: void lw6_set_ret (lw6sys_context_t * SYS_CONTEXT, int RET)
     SYS_CONTEXT: global system context

     RET: return value to set, 1 for success, 0 for failure

     Sets the ret value for the script.

     *Return value:* none

 -- Function: int lw6_get_ret (lw6sys_context_t * SYS_CONTEXT)
     SYS_CONTEXT: global system context

     Get the ret value for the script.

     *Return value:* 1 if success, 0 if not.

 -- Function: int lw6_fix_env (lw6sys_context_t * SYS_CONTEXT, int ARGC,
          const char * [] ARGV)
     SYS_CONTEXT: global system context

     ARGC: number of args as passed to main

     ARGV: array of strings as passed to main

     Fixes environment variables (path related) so that program can find
     its requirements.  This must be called early in the program flow
     (else other calls might fail).

     *Return value:* 1 if success, 0 if failure

 -- Function: int lw6_register_funcs_bot (lw6sys_context_t *
          SYS_CONTEXT)
     SYS_CONTEXT: global system context

     Register the functions of the bot module, make them callable from
     Guile.

     *Return value:* 1 on success, 0 if failed.

 -- Function: int lw6_register_funcs (lw6sys_context_t * SYS_CONTEXT)
     SYS_CONTEXT: global system context

     Register all the functions, make them callable from Guile.  This is
     a very simple yet long and very usefull function, without it Guile
     has no knowledge of what LW6 is.

     *Return value:* 1 on success, 0 if failed.

 -- Function: extern void lw6_cns_handler (lw6sys_context_t *
          SYS_CONTEXT, char * C_LINE)
     SYS_CONTEXT: global system context

     C_LINE: the line typed by the user

     This function will be called every time a message is typed on the
     console.  It runs the given line in the current Guile environment.

     *Return value:* none

 -- Function: int lw6_register_funcs_cfg (lw6sys_context_t *
          SYS_CONTEXT)
     SYS_CONTEXT: global system context

     Register the functions of the cfg module, make them callable from
     Guile.

     *Return value:* 1 on success, 0 if failed.

 -- Function: int lw6_register_funcs_cli (lw6sys_context_t *
          SYS_CONTEXT)
     SYS_CONTEXT: global system context

     Register the functions of the cli module, make them callable from
     Guile.

     *Return value:* 1 on success, 0 if failed.

 -- Function: int lw6_register_funcs_cns (lw6sys_context_t *
          SYS_CONTEXT)
     SYS_CONTEXT: global system context

     Register the functions of the cns module, make them callable from
     Guile.

     *Return value:* 1 on success, 0 if failed.

 -- Function: int lw6_register_funcs_dsp (lw6sys_context_t *
          SYS_CONTEXT)
     SYS_CONTEXT: global system context

     Register the functions of the dsp module, make them callable from
     Guile.

     *Return value:* 1 on success, 0 if failed.

 -- Function: int lw6_register_funcs_gen (lw6sys_context_t *
          SYS_CONTEXT)
     SYS_CONTEXT: global system context

     Register the functions of the gen module, make them callable from
     Guile.

     *Return value:* 1 on success, 0 if failed.

 -- Function: int lw6_register_funcs_gfx (lw6sys_context_t *
          SYS_CONTEXT)
     SYS_CONTEXT: global system context

     Register the functions of the gfx module, make them callable from
     Guile.

     *Return value:* 1 on success, 0 if failed.

 -- Function: int lw6_register_funcs_gui (lw6sys_context_t *
          SYS_CONTEXT)
     SYS_CONTEXT: global system context

     Register the functions of the gui module, make them callable from
     Guile.

     *Return value:* 1 on success, 0 if failed.

 -- Function: int lw6_register_funcs_hlp (lw6sys_context_t *
          SYS_CONTEXT)
     SYS_CONTEXT: global system context

     Register the functions of the hlp module, make them callable from
     Guile.

     *Return value:* 1 on success, 0 if failed.

 -- Function: int lw6_register_funcs_img (lw6sys_context_t *
          SYS_CONTEXT)
     SYS_CONTEXT: global system context

     Register the functions of the img module, make them callable from
     Guile.

     *Return value:* 1 on success, 0 if failed.

 -- Function: int lw6_register_funcs_ker (lw6sys_context_t *
          SYS_CONTEXT)
     SYS_CONTEXT: global system context

     Register the functions of the ker module, make them callable from
     Guile.

     *Return value:* 1 on success, 0 if failed.

 -- Function: int lw6_register_funcs_ldr (lw6sys_context_t *
          SYS_CONTEXT)
     SYS_CONTEXT: global system context

     Register the functions of the ldr module, make them callable from
     Guile.

     *Return value:* 1 on success, 0 if failed.

 -- Function: int lw6_register_funcs_map (lw6sys_context_t *
          SYS_CONTEXT)
     SYS_CONTEXT: global system context

     Register the functions of the map module, make them callable from
     Guile.

     *Return value:* 1 on success, 0 if failed.

 -- Function: int lw6_register_funcs_net (lw6sys_context_t *
          SYS_CONTEXT)
     SYS_CONTEXT: global system context

     Register the functions of the net module, make them callable from
     Guile.

     *Return value:* 1 on success, 0 if failed.

 -- Function: int lw6_register_funcs_p2p (lw6sys_context_t *
          SYS_CONTEXT)
     SYS_CONTEXT: global system context

     Register the functions of the p2p module, make them callable from
     Guile.

     *Return value:* 1 on success, 0 if failed.

 -- Function: int lw6_register_funcs_pil (lw6sys_context_t *
          SYS_CONTEXT)
     SYS_CONTEXT: global system context

     Register the functions of the pil module, make them callable from
     Guile.

     *Return value:* 1 on success, 0 if failed.

 -- Function: int lw6_register_funcs_snd (lw6sys_context_t *
          SYS_CONTEXT)
     SYS_CONTEXT: global system context

     Register the functions of the snd module, make them callable from
     Guile.

     *Return value:* 1 on success, 0 if failed.

 -- Function: int lw6_register_funcs_srv (lw6sys_context_t *
          SYS_CONTEXT)
     SYS_CONTEXT: global system context

     Register the functions of the srv module, make them callable from
     Guile.

     *Return value:* 1 on success, 0 if failed.

 -- Function: int lw6_register_funcs_sys (lw6sys_context_t *
          SYS_CONTEXT)
     SYS_CONTEXT: global system context

     Register the functions of the sys module, make them callable from
     Guile.

     *Return value:* 1 on success, 0 if failed.

 -- Function: int lw6_register_funcs_tsk (lw6sys_context_t *
          SYS_CONTEXT)
     SYS_CONTEXT: global system context

     Register the functions of the tsk module, make them callable from
     Guile.

     *Return value:* 1 on success, 0 if failed.

 -- Function: int lw6_init_global (lw6sys_context_t * SYS_CONTEXT, int
          ARGC, const char * [] ARGV)
     SYS_CONTEXT: global system context

     ARGC: number of args as passed to main

     ARGV: array of strings as passed to main

     Initializes global values to their defaults.

     *Return value:* 1 on success, 0 if failed

 -- Function: void lw6_quit_global (lw6sys_context_t * SYS_CONTEXT)
     SYS_CONTEXT: global system context

     Frees global values.  Will also garbage collect objects in case
     Guile failed to do it perfectly (or we failed to tell Guile how to
     do it).  Important note: this function can only be called once in a
     program, usually at the end.  If called twice, and typically, if
     *any* Guile code is run after it, the risk is that Guile code does
     not find objects that it should, or said differently, Guile might
     try to manipulate stuff that has been deleted without its being
     warned about it.  In practice, libGC way of doing thing is usually
     a good thing, since it will from time to time keep objects in
     memory that shouldn't, so there's no point in changing that, but as
     we are pedantic in LW6 about the fact that everything at program
     exit must be perfectly freed, the problem arises.  So well, only
     call this once at the end, else problem will show up, the usual
     form is a segfault on the delete callback, as when Guile finally
     runs its GC, the object does not exist any more.

     *Return value:* none.

 -- Function: int lw6_main (lw6sys_context_t * SYS_CONTEXT, int ARGC,
          const char * [] ARGV)
     SYS_CONTEXT: global system context

     ARGC: the argc parameter of the 'main' function, that is, the
     number of command-line args.

     ARGV: the argv parameter of the 'main' function, that is, an array
     containing pointers on command-line args.

     This function is directly called by 'main'.  This means by linking
     against libliquidwar6 and calling it, you would have a program that
     is almost exactly the "official" upstream liquidwar6 binary, except
     you can tweak it and have all the power to call whatever other
     functions you like, embed it.  In short, everything the binary
     does, you can do it in your own binarn, by linking against the
     library and calling this function.

     *Return value:* 1 if success, zero if failure.  Note that this is
     the "standard" C / liquidwar6 way to proceed, but your 'main'
     function should return 0 if success, else an error code.  Typical
     use is "return !lw6_main(argc, argv);".

 -- Function: int lw6_process_non_run_options (lw6sys_context_t *
          SYS_CONTEXT, int ARGC, const char * [] ARGV, int * RUN_GAME)
     SYS_CONTEXT: global system context

     ARGC: the number of command-line args, as passed to main

     ARGV: an array of strings containing command-line args, as passed
     to main

     RUN_GAME: a pointer to a boolean which will contain true (1) if the
     game must be launched, or false (0) if the option is such that game
     must be skipped.  Example: -copyright, -help, ...

     Interprets command line arguments, and if some need to be
     processed, typically those args that are used to display stuff on
     the console, then perform the corresponding actions.

     *Return value:* non-zero if success, 0 if error.  The error can be,
     for instance, the test suite returning "no, tests were not OK".

 -- Function: SCM lw6_make_scm_dsp (lw6sys_context_t * SYS_CONTEXT,
          lw6dsp_backend_t * C_DSP)
     SYS_CONTEXT: global system context

     C_DSP: the display object

     Creates an SCM 'dsp' object from C data.

     *Return value:* the SCM object

 -- Function: lw6dsp_backend_t * lw6_scm_to_dsp (lw6sys_context_t *
          SYS_CONTEXT, SCM DSP)
     SYS_CONTEXT: global system context

     DSP: the dsp to convert (SCM object)

     Gets the internal C pointer corresponding to the scheme 'dsp'
     object.

     *Return value:* a pointer, *not* a copy, must not be freed

 -- Function: void lw6_free_dsp_smob (lw6sys_context_t * SYS_CONTEXT,
          lw6_dsp_smob_t * DSP_SMOB)
     SYS_CONTEXT: global system context

     DSP_SMOB: the smob to free

     Frees a dsp smob, we need a special function to do that as
     structures like assoc hold pointers to these objects and therefore
     need a proper callback when being destroyed.

     *Return value:* none

 -- Function: SCM lw6_make_scm_snd (lw6sys_context_t * SYS_CONTEXT,
          lw6snd_backend_t * C_SND)
     SYS_CONTEXT: global system context

     C_SND: the sound object

     Creates an SCM 'snd' object from C data.

     *Return value:* the SCM object

 -- Function: lw6snd_backend_t * lw6_scm_to_snd (lw6sys_context_t *
          SYS_CONTEXT, SCM SND)
     SYS_CONTEXT: global system context

     SND: the snd to convert (SCM object)

     Gets the internal C pointer corresponding to the scheme 'snd'
     object.

     *Return value:* a pointer, *not* a copy, must not be freed

 -- Function: void lw6_free_snd_smob (lw6sys_context_t * SYS_CONTEXT,
          lw6_snd_smob_t * SND_SMOB)
     SYS_CONTEXT: global system context

     SND_SMOB: the smob to free

     Frees a snd smob, we need a special function to do that as
     structures like assoc hold pointers to these objects and therefore
     need a proper callback when being destroyed.

     *Return value:* none

 -- Function: SCM lw6_make_scm_map (lw6sys_context_t * SYS_CONTEXT,
          lw6map_level_t * C_MAP)
     SYS_CONTEXT: global system context

     C_MAP: the map object

     Creates an SCM 'map' object from C data.

     *Return value:* the SCM object

 -- Function: lw6map_level_t * lw6_scm_to_map (lw6sys_context_t *
          SYS_CONTEXT, SCM MAP)
     SYS_CONTEXT: global system context

     MAP: the map to convert (SCM object)

     Gets the internal C pointer corresponding to the scheme 'map'
     object.

     *Return value:* a pointer, *not* a copy, must not be freed

 -- Function: void lw6_free_map_smob (lw6sys_context_t * SYS_CONTEXT,
          lw6_map_smob_t * MAP_SMOB)
     SYS_CONTEXT: global system context

     MAP_SMOB: the smob to free

     Frees a map smob, we need a special function to do that as
     structures like assoc hold pointers to these objects and therefore
     need a proper callback when being destroyed.

     *Return value:* none

 -- Function: SCM lw6_make_scm_menu (lw6sys_context_t * SYS_CONTEXT,
          lw6gui_menu_t * C_MENU)
     SYS_CONTEXT: global system context

     C_MENU: the menu object

     Creates an SCM 'menu' object from C data.

     *Return value:* the SCM object

 -- Function: lw6gui_menu_t * lw6_scm_to_menu (lw6sys_context_t *
          SYS_CONTEXT, SCM MENU)
     SYS_CONTEXT: global system context

     MENU: the menu to convert (SCM object)

     Gets the internal C pointer corresponding to the scheme 'menu'
     object.

     *Return value:* a pointer, *not* a copy, must not be freed

 -- Function: void lw6_free_menu_smob (lw6sys_context_t * SYS_CONTEXT,
          lw6_menu_smob_t * MENU_SMOB)
     SYS_CONTEXT: global system context

     MENU_SMOB: the smob to free

     Frees a menu smob, we need a special function to do that as
     structures like assoc hold pointers to these objects and therefore
     need a proper callback when being destroyed.

     *Return value:* none

 -- Function: SCM lw6_make_scm_game_struct (lw6sys_context_t *
          SYS_CONTEXT, lw6ker_game_struct_t * C_GAME_STRUCT, SCM MAP)
     SYS_CONTEXT: global system context

     C_GAME_STRUCT: the game struct object

     MAP: the map (SCM object) referenced

     Creates an SCM 'game-struct' object from C data.  Passing the map
     object enables the garbage collector not to free the map until the
     game struct is freed.

     *Return value:* the SCM object

 -- Function: lw6ker_game_struct_t * lw6_scm_to_game_struct
          (lw6sys_context_t * SYS_CONTEXT, SCM GAME_STRUCT)
     SYS_CONTEXT: global system context

     GAME_STRUCT: the game_struct to convert (SCM object)

     Gets the internal C pointer corresponding to the scheme
     'game_struct' object.

     *Return value:* a pointer, *not* a copy, must not be freed

 -- Function: void lw6_free_game_struct_smob (lw6sys_context_t *
          SYS_CONTEXT, lw6_game_struct_smob_t * GAME_STRUCT_SMOB)
     SYS_CONTEXT: global system context

     GAME_STRUCT_SMOB: the smob to free

     Frees a game_struct smob, we need a special function to do that as
     structures like assoc hold pointers to these objects and therefore
     need a proper callback when being destroyed.

     *Return value:* none

 -- Function: SCM lw6_make_scm_game_state (lw6sys_context_t *
          SYS_CONTEXT, lw6ker_game_state_t * C_GAME_STATE, SCM
          GAME_STRUCT)
     SYS_CONTEXT: global system context

     C_GAME_STATE: the game state object

     GAME_STRUCT: the game struct (SCM object) referenced

     Creates an SCM 'game_state' object from C data.  Passing
     game_struct enables the garbage collector not to free the
     game_struct until the game_state is freed.

     *Return value:* the SCM object

 -- Function: lw6ker_game_state_t * lw6_scm_to_game_state
          (lw6sys_context_t * SYS_CONTEXT, SCM GAME_STATE)
     SYS_CONTEXT: global system context

     GAME_STATE: the game_state to convert (SCM object)

     Gets the internal C pointer corresponding to the scheme
     'game_state' object.

     *Return value:* a pointer, *not* a copy, must not be freed

 -- Function: void lw6_free_game_state_smob (lw6sys_context_t *
          SYS_CONTEXT, lw6_game_state_smob_t * GAME_STATE_SMOB)
     SYS_CONTEXT: global system context

     GAME_STATE_SMOB: the smob to free

     Frees a game_state smob, we need a special function to do that as
     structures like assoc hold pointers to these objects and therefore
     need a proper callback when being destroyed.

     *Return value:* none

 -- Function: SCM lw6_make_scm_pilot (lw6sys_context_t * SYS_CONTEXT,
          lw6pil_pilot_t * C_PILOT)
     SYS_CONTEXT: global system context

     C_PILOT: the pilot object

     Creates an SCM 'pilot' object from C data.

     *Return value:* the SCM object

 -- Function: lw6pil_pilot_t * lw6_scm_to_pilot (lw6sys_context_t *
          SYS_CONTEXT, SCM PILOT)
     SYS_CONTEXT: global system context

     PILOT: the pilot to convert (SCM object)

     Gets the internal C pointer corresponding to the scheme 'pilot'
     object.

     *Return value:* a pointer, *not* a copy, must not be freed

 -- Function: void lw6_free_pilot_smob (lw6sys_context_t * SYS_CONTEXT,
          lw6_pilot_smob_t * PILOT_SMOB)
     SYS_CONTEXT: global system context

     PILOT_SMOB: the smob to free

     Frees a pilot smob, we need a special function to do that as
     structures like assoc hold pointers to these objects and therefore
     need a proper callback when being destroyed.

     *Return value:* none

 -- Function: SCM lw6_make_scm_bot (lw6sys_context_t * SYS_CONTEXT,
          lw6bot_backend_t * C_BOT, SCM GAME_STATE, SCM PILOT)
     SYS_CONTEXT: global system context

     C_BOT: the bot object

     GAME_STATE: the game state

     PILOT: the pilot

     Creates an SCM 'bot' object from C data.  Passing game_state and
     pilot enables the garbage collector not the free them until bot is
     freed.

     *Return value:* the SCM object

 -- Function: lw6bot_backend_t * lw6_scm_to_bot (lw6sys_context_t *
          SYS_CONTEXT, SCM BOT)
     SYS_CONTEXT: global system context

     BOT: the bot to convert (SCM object)

     Gets the internal C pointer corresponding to the scheme 'bot'
     object.

     *Return value:* a pointer, *not* a copy, must not be freed

 -- Function: void lw6_free_bot_smob (lw6sys_context_t * SYS_CONTEXT,
          lw6_bot_smob_t * BOT_SMOB)
     SYS_CONTEXT: global system context

     BOT_SMOB: the smob to free

     Frees a bot smob, we need a special function to do that as
     structures like assoc hold pointers to these objects and therefore
     need a proper callback when being destroyed.

     *Return value:* none

 -- Function: SCM lw6_make_scm_look (lw6sys_context_t * SYS_CONTEXT,
          lw6gui_look_t * C_LOOK)
     SYS_CONTEXT: global system context

     C_LOOK: the look object

     Creates an SCM 'look' object from C data.

     *Return value:* the SCM object

 -- Function: lw6gui_look_t * lw6_scm_to_look (lw6sys_context_t *
          SYS_CONTEXT, SCM LOOK)
     SYS_CONTEXT: global system context

     LOOK: the look to convert (SCM object)

     Gets the internal C pointer corresponding to the scheme 'look'
     object.

     *Return value:* a pointer, *not* a copy, must not be freed

 -- Function: void lw6_free_look_smob (lw6sys_context_t * SYS_CONTEXT,
          lw6_look_smob_t * LOOK_SMOB)
     SYS_CONTEXT: global system context

     LOOK_SMOB: the smob to free

     Frees a look smob, we need a special function to do that as
     structures like assoc hold pointers to these objects and therefore
     need a proper callback when being destroyed.

     *Return value:* none

 -- Function: SCM lw6_make_scm_loader (lw6sys_context_t * SYS_CONTEXT,
          lw6tsk_loader_t * C_LOADER)
     SYS_CONTEXT: global system context

     C_LOADER: the loader object

     Creates an SCM 'loader' object from C data.

     *Return value:* the SCM object

 -- Function: lw6tsk_loader_t * lw6_scm_to_loader (lw6sys_context_t *
          SYS_CONTEXT, SCM LOADER)
     SYS_CONTEXT: global system context

     LOADER: the loader to convert (SCM object)

     Gets the internal C pointer corresponding to the scheme 'loader'
     object.

     *Return value:* a pointer, *not* a copy, must not be freed

 -- Function: void lw6_free_loader_smob (lw6sys_context_t * SYS_CONTEXT,
          lw6_loader_smob_t * LOADER_SMOB)
     SYS_CONTEXT: global system context

     LOADER_SMOB: the smob to free

     Frees a loader smob, we need a special function to do that as
     structures like assoc hold pointers to these objects and therefore
     need a proper callback when being destroyed.

     *Return value:* none

 -- Function: SCM lw6_make_scm_db (lw6sys_context_t * SYS_CONTEXT,
          lw6p2p_db_t * C_DB)
     SYS_CONTEXT: global system context

     C_DB: the database object

     Creates an SCM 'db' object from C data.

     *Return value:* the SCM object

 -- Function: lw6p2p_db_t * lw6_scm_to_db (lw6sys_context_t *
          SYS_CONTEXT, SCM DB)
     SYS_CONTEXT: global system context

     DB: the db to convert (SCM object)

     Gets the internal C pointer corresponding to the scheme 'db'
     object.

     *Return value:* a pointer, *not* a copy, must not be freed

 -- Function: void lw6_free_db_smob (lw6sys_context_t * SYS_CONTEXT,
          lw6_db_smob_t * DB_SMOB)
     SYS_CONTEXT: global system context

     DB_SMOB: the smob to free

     Frees a db smob, we need a special function to do that as
     structures like assoc hold pointers to these objects and therefore
     need a proper callback when being destroyed.

     *Return value:* none

 -- Function: SCM lw6_make_scm_node (lw6sys_context_t * SYS_CONTEXT,
          lw6p2p_node_t * C_NODE, SCM DB)
     SYS_CONTEXT: global system context

     C_NODE: the node object

     DB: the db (SCM object) referenced

     Creates an SCM 'node' object from C data.  Passing db enables the
     garbage collector not to free db until node is freed.

     *Return value:* the SCM object

 -- Function: lw6p2p_node_t * lw6_scm_to_node (lw6sys_context_t *
          SYS_CONTEXT, SCM NODE)
     SYS_CONTEXT: global system context

     NODE: the node to convert (SCM object)

     Gets the internal C pointer corresponding to the scheme 'node'
     object.

     *Return value:* a pointer, *not* a copy, must not be freed

 -- Function: void lw6_free_node_smob (lw6sys_context_t * SYS_CONTEXT,
          lw6_node_smob_t * NODE_SMOB)
     SYS_CONTEXT: global system context

     NODE_SMOB: the smob to free

     Frees a node smob, we need a special function to do that as
     structures like assoc hold pointers to these objects and therefore
     need a proper callback when being destroyed.

     *Return value:* none

 -- Function: SCM lw6_make_scm_jpeg (lw6sys_context_t * SYS_CONTEXT,
          lw6img_jpeg_t * C_JPEG)
     SYS_CONTEXT: global system context

     C_JPEG: the database object

     Creates an SCM 'jpeg' object from C data.

     *Return value:* the SCM object

 -- Function: lw6img_jpeg_t * lw6_scm_to_jpeg (lw6sys_context_t *
          SYS_CONTEXT, SCM JPEG)
     SYS_CONTEXT: global system context

     JPEG: the jpeg to convert (SCM object)

     Gets the internal C pointer corresponding to the scheme 'jpeg'
     object.

     *Return value:* a pointer, *not* a copy, must not be freed

 -- Function: void lw6_free_jpeg_smob (lw6sys_context_t * SYS_CONTEXT,
          lw6_jpeg_smob_t * JPEG_SMOB)
     SYS_CONTEXT: global system context

     JPEG_SMOB: the smob to free

     Frees a jpeg smob, we need a special function to do that as
     structures like assoc hold pointers to these objects and therefore
     need a proper callback when being destroyed.

     *Return value:* none

 -- Function: int lw6_register_smobs (lw6sys_context_t * SYS_CONTEXT)
     SYS_CONTEXT: global system context

     Register all smobs to Guile.

     *Return value:* 1 on success, 0 if failed.

 -- Function: int lw6_test_register (lw6sys_context_t * SYS_CONTEXT, int
          MODE)
     SYS_CONTEXT: global system context

     MODE: test mode (bitmask)

     Registers all tests for the lw6 module.

     *Return value:* 1 if test is successfull, 0 on error.

 -- Function: int lw6_test_run (lw6sys_context_t * SYS_CONTEXT, int
          MODE)
     SYS_CONTEXT: global system context

     MODE: test mode (bitmask)

     Runs the liquidwar6 core module test suite, this will mostly test
     how Guile script integration works, loading a sample script and
     running it.  It does not launch all the other sub modules tests.

     *Return value:* 1 if test is successfull, 0 on error.


File: liquidwar6.info,  Node: libbot,  Next: mod-brute,  Prev: libliquidwar6,  Up: C API

5.2 libbot
==========

5.2.1 Overview
--------------

View lcov (http://ltp.sourceforge.net/coverage/lcov.php) test coverage
results on
<http://www.ufoot.org/liquidwar/v6/doc/coverage/src/lib/bot/index.html>.

5.2.2 API
---------

 -- Function: int lw6bot_init (lw6sys_context_t * SYS_CONTEXT,
          lw6bot_backend_t * BACKEND, lw6bot_seed_t * SEED)
     SYS_CONTEXT: global system context

     BACKEND: backend to use

     SEED: parameters required to build bot (game state, among other
     things)

     Initializes a bot object.  Must be performed before any other call.
     The seed is absolutely required, for a bot really needs to know
     what map/context it's working on, including at creation time

     *Return value:* 1 on success, 0 on failure.

 -- Function: void lw6bot_quit (lw6sys_context_t * SYS_CONTEXT,
          lw6bot_backend_t * BACKEND)
     SYS_CONTEXT: global system context

     BACKEND: unitialize a bot backend

     Closes a bot, but does not free all ressources.

 -- Function: int lw6bot_next_move (lw6sys_context_t * SYS_CONTEXT,
          lw6bot_backend_t * BACKEND, int * X, int * Y)
     SYS_CONTEXT: global system context

     BACKEND: bot to work on

     X: next x position (out param)

     Y: next y position (out param)

     Queries the bot for its next move, this is actually the one
     interesting function in the whole bot API.

     *Return value:* 1 on success, 0 on failure.

 -- Function: char * lw6bot_repr (lw6sys_context_t * SYS_CONTEXT, const
          lw6bot_backend_t * BACKEND)
     SYS_CONTEXT: global system context

     BACKEND: bot to represent

     Gives a human readable representation of bot

     *Return value:* dynamically allocated string.

 -- Function: lw6sys_assoc_t * lw6bot_get_backends (lw6sys_context_t *
          SYS_CONTEXT, int ARGC, const char * [] ARGV)
     SYS_CONTEXT: global system context

     ARGC: argc, as passed to 'main'

     ARGV: argv, as passed to 'main'

     List available bot backends.  The hash contains pairs with id and
     name for each backend.  The id is the technical key you can use to
     load the backend, the name is something more readable you can
     display in an interface.  The backend objects themselves are not
     instanciated by this (in fact, they are, but released on the fly)
     you need to load and initialize them afterwards.

     *Return value:* hash containing id/name pairs.

 -- Function: lw6bot_backend_t * lw6bot_create_backend (lw6sys_context_t
          * SYS_CONTEXT, int ARGC, const char * [] ARGV, const char *
          NAME)
     SYS_CONTEXT: global system context

     ARGC: argc, as passed to 'main'

     ARGV: argv, as passed to 'main'

     NAME: string containing bot key, typically got from
     'lw6bot_get_backends'

     Creates a bot backend, this is just about loading the dynamic
     library if needed, and/or check bot engine is available, and
     connect to it.  It does not perform initialization.

     *Return value:* bot backend.

 -- Function: void lw6bot_destroy_backend (lw6sys_context_t *
          SYS_CONTEXT, lw6bot_backend_t * BACKEND)
     SYS_CONTEXT: global system context

     BACKEND: bot backend to destroy

     Frees the ressources associated to a bot, which must have been
     properly uninitialized before.

     *Return value:* none.

 -- Function: int lw6bot_test_register (lw6sys_context_t * SYS_CONTEXT,
          int MODE)
     SYS_CONTEXT: global system context

     MODE: test mode (bitmask)

     Registers all tests for the libbot module.

     *Return value:* 1 if test is successfull, 0 on error.

 -- Function: int lw6bot_test_run (lw6sys_context_t * SYS_CONTEXT, int
          MODE)
     SYS_CONTEXT: global system context

     MODE: test mode (bitmask)

     Runs the 'bot' module test suite, testing most (if not all...)
     functions.

     *Return value:* 1 if test is successfull, 0 on error.

 -- Struct: lw6bot_backend_s

     The bot backend is the first argument passed to any bot function,
     it contains reference to all the functions which can be used as
     well as a pointer on associated data.  In OO, this would just be an
     object, with members and methods, using polymorphism through opaque
     pointers.

 -- Member of lw6bot_backend_s: dl_handle
     *Type:* 'lw6dyn_dl_handle_t *'

     *Definition:* 'lw6dyn_dl_handle_t* lw6bot_backend_s::dl_handle'

     Handle on dynamic library (if it makes sense).

 -- Member of lw6bot_backend_s: bot_context
     *Type:* 'void *'

     *Definition:* 'void* lw6bot_backend_s::bot_context'

     Bot specific data, what is behind this pointer really depends on
     the bot engine.

 -- Member of lw6bot_backend_s: argc
     *Type:* 'int'

     *Definition:* 'int lw6bot_backend_s::argc'

     The argc value passed to main.

 -- Member of lw6bot_backend_s: argv
     *Type:* 'const char **'

     *Definition:* 'const char** lw6bot_backend_s::argv'

     The argv value passed to main.

 -- Member of lw6bot_backend_s: id
     *Type:* 'u_int32_t'

     *Definition:* 'u_int32_t lw6bot_backend_s::id'

     The id of the object, this is non-zero and unique within one run
     session, incremented at each object creation.

 -- Member of lw6bot_backend_s: seed
     *Type:* 'lw6bot_seed_t'

     *Definition:* 'lw6bot_seed_t lw6bot_backend_s::seed'

     Parameters passed at initialization.

 -- Member of lw6bot_backend_s: init
     *Type:* 'void *(*'

     *Definition:* 'void*(* lw6bot_backend_s::init)(lw6sys_context_t
     *sys_context, int argc, const char *argv[], lw6bot_data_t *data)'

     Pointer on lw6bot_init callback code.

 -- Member of lw6bot_backend_s: quit
     *Type:* 'void(*'

     *Definition:* 'void(* lw6bot_backend_s::quit)(lw6sys_context_t
     *sys_context, void *bot_context)'

     Pointer on lw6bot_context callback code.

 -- Member of lw6bot_backend_s: next_move
     *Type:* 'int(*'

     *Definition:* 'int(* lw6bot_backend_s::next_move)(lw6sys_context_t
     *sys_context, void *bot_context, int *x, int *y, lw6bot_data_t
     *data)'

     Pointer on lw6bot_next_move callback code.

 -- Member of lw6bot_backend_s: repr
     *Type:* 'char *(*'

     *Definition:* 'char*(* lw6bot_backend_s::repr)(lw6sys_context_t
     *sys_context, void *bot_context, u_int32_t id)'

     Pointer on lw6bot_repr callback code.

 -- Struct: lw6bot_data_s

     Data used by a bot, those are essentially stable data passed as an
     argument plus changing data, that is, the game state.

 -- Member of lw6bot_data_s: game_state
     *Type:* 'const lw6ker_game_state_t *'

     *Definition:* 'const lw6ker_game_state_t*
     lw6bot_data_s::game_state'

     Game state the bot will have to base its reflexion upon.  This not
     need be always the same game state, the pointer might change, but
     it should always refer to the same logical game, that is, at least,
     same struct.

 -- Member of lw6bot_data_s: param
     *Type:* 'lw6bot_param_t'

     *Definition:* 'lw6bot_param_t lw6bot_data_s::param'

     Constant parameters passed to the bot at creation.

 -- Struct: lw6bot_param_s

     Parameters usable by a bot engine.  Those are the stable, fixed
     parameters passed at bot creation, they don't change during the bot
     life.

 -- Member of lw6bot_param_s: speed
     *Type:* 'float'

     *Definition:* 'float lw6bot_param_s::speed'

     Speed of the bot, this is a value between 0.0f and 1.0f, 1 means
     normal speed, 0 is as slow as possible.  Values over 1 will make
     the bot act/move faster than usual.

 -- Member of lw6bot_param_s: iq
     *Type:* 'int'

     *Definition:* 'int lw6bot_param_s::iq'

     IQ is supposed to reflect the cleverness of the bot.  The default
     is 100 (this value is basically a percentage), 0 means just so
     stupid, and a high value, for instance 200, means very clever.

 -- Member of lw6bot_param_s: cursor_id
     *Type:* 'u_int16_t'

     *Definition:* 'u_int16_t lw6bot_param_s::cursor_id'

     The cursor ID, which is a 16-bit non-null integer.

 -- Struct: lw6bot_seed_s

     Parameters passed at bot creation, the only use for this is to
     simplify the protoype of the init function.

 -- Member of lw6bot_seed_s: game_state
     *Type:* 'const lw6ker_game_state_t *'

     *Definition:* 'const lw6ker_game_state_t*
     lw6bot_seed_s::game_state'

     Game state, that is, the level used, the fighters on it, the other
     cursors positions, and so on.

 -- Member of lw6bot_seed_s: pilot
     *Type:* 'lw6pil_pilot_t *'

     *Definition:* 'lw6pil_pilot_t* lw6bot_seed_s::pilot'

     This can be NULL, it's a pilot object which can be used in some
     case, when, for instance, in dirty read mode, we want to read the
     level on the fly without syncing.

 -- Member of lw6bot_seed_s: dirty_read
     *Type:* 'int'

     *Definition:* 'int lw6bot_seed_s::dirty_read'

     The dirty read mode (between 0 and 2).

 -- Member of lw6bot_seed_s: param
     *Type:* 'lw6bot_param_t'

     *Definition:* 'lw6bot_param_t lw6bot_seed_s::param'

     Parameters given to the bot at creation.


File: liquidwar6.info,  Node: mod-brute,  Next: mod-follow,  Prev: libbot,  Up: C API

5.3 mod-brute
=============

5.3.1 Overview
--------------

View lcov (http://ltp.sourceforge.net/coverage/lcov.php) test coverage
results on
<http://www.ufoot.org/liquidwar/v6/doc/coverage/src/lib/bot/mod-brute/index.html>.

5.3.2 API
---------

 -- Function: void mod_brute_is_GPL_compatible ()

     Defined to tell mod_brute is compatible with GNU General Public
     License.  Of course it is.  This function does nothing, but the
     fact it's declared makes its GPL compatibility obvious.  Having
     this declared is required.

     *Return value:* none

 -- Function: void mod_brute_is_dlclose_safe ()

     Defined to tell mod_brute has no dlclose issue, once can safely
     call lt_dlclose on it when done with it, without risking any
     segfault.  Some other LW6 modules/shared libraries do have this
     problem.

     *Return value:* none

 -- Function: lw6sys_module_pedigree_t * mod_brute_get_pedigree
          (lw6sys_context_t * SYS_CONTEXT)
     SYS_CONTEXT: global system context

     Returns the pedigree for mod-brute, giving details about the
     module, including name, description, licence, date/time of
     compilation.

     *Return value:* dynamically allocated object.

 -- Function: lw6bot_backend_t * mod_brute_create_backend
          (lw6sys_context_t * SYS_CONTEXT)
     SYS_CONTEXT: global system context

     Creates a mod-brute backend.

     *Return value:* backend pointer.


File: liquidwar6.info,  Node: mod-follow,  Next: mod-idiot,  Prev: mod-brute,  Up: C API

5.4 mod-follow
==============

5.4.1 Overview
--------------

View lcov (http://ltp.sourceforge.net/coverage/lcov.php) test coverage
results on
<http://www.ufoot.org/liquidwar/v6/doc/coverage/src/lib/bot/mod-follow/index.html>.

5.4.2 API
---------

 -- Function: void mod_follow_is_GPL_compatible ()

     Defined to tell mod_follow is compatible with GNU General Public
     License.  Of course it is.  This function does nothing, but the
     fact it's declared makes its GPL compatibility obvious.  Having
     this declared is required.

     *Return value:* none

 -- Function: void mod_follow_is_dlclose_safe ()

     Defined to tell mod_follow has no dlclose issue, once can safely
     call lt_dlclose on it when done with it, without risking any
     segfault.  Some other LW6 modules/shared libraries do have this
     problem.

     *Return value:* none

 -- Function: lw6sys_module_pedigree_t * mod_follow_get_pedigree
          (lw6sys_context_t * SYS_CONTEXT)
     SYS_CONTEXT: global system context

     Returns the pedigree for mod-follow, giving details about the
     module, including name, description, licence, date/time of
     compilation.

     *Return value:* dynamically allocated object.

 -- Function: lw6bot_backend_t * mod_follow_create_backend
          (lw6sys_context_t * SYS_CONTEXT)
     SYS_CONTEXT: global system context

     Creates a mod-follow backend.

     *Return value:* backend pointer.


File: liquidwar6.info,  Node: mod-idiot,  Next: mod-random,  Prev: mod-follow,  Up: C API

5.5 mod-idiot
=============

5.5.1 Overview
--------------

View lcov (http://ltp.sourceforge.net/coverage/lcov.php) test coverage
results on
<http://www.ufoot.org/liquidwar/v6/doc/coverage/src/lib/bot/mod-idiot/index.html>.

5.5.2 API
---------

 -- Function: void mod_idiot_is_GPL_compatible ()

     Defined to tell mod_idiot is compatible with GNU General Public
     License.  Of course it is.  This function does nothing, but the
     fact it's declared makes its GPL compatibility obvious.  Having
     this declared is required.

     *Return value:* none

 -- Function: void mod_idiot_is_dlclose_safe ()

     Defined to tell mod_idiot has no dlclose issue, once can safely
     call lt_dlclose on it when done with it, without risking any
     segfault.  Some other LW6 modules/shared libraries do have this
     problem.

     *Return value:* none

 -- Function: lw6sys_module_pedigree_t * mod_idiot_get_pedigree
          (lw6sys_context_t * SYS_CONTEXT)
     SYS_CONTEXT: global system context

     Returns the pedigree for mod-idiot, giving details about the
     module, including name, description, licence, date/time of
     compilation.

     *Return value:* dynamically allocated object.

 -- Function: lw6bot_backend_t * mod_idiot_create_backend
          (lw6sys_context_t * SYS_CONTEXT)
     SYS_CONTEXT: global system context

     Creates a mod-idiot backend.

     *Return value:* backend pointer.


File: liquidwar6.info,  Node: mod-random,  Next: libcfg,  Prev: mod-idiot,  Up: C API

5.6 mod-random
==============

5.6.1 Overview
--------------

View lcov (http://ltp.sourceforge.net/coverage/lcov.php) test coverage
results on
<http://www.ufoot.org/liquidwar/v6/doc/coverage/src/lib/bot/mod-random/index.html>.

5.6.2 API
---------

 -- Function: void mod_random_is_GPL_compatible ()

     Defined to tell mod_random is compatible with GNU General Public
     License.  Of course it is.  This function does nothing, but the
     fact it's declared makes its GPL compatibility obvious.  Having
     this declared is required.

     *Return value:* none

 -- Function: void mod_random_is_dlclose_safe ()

     Defined to tell mod_random has no dlclose issue, once can safely
     call lt_dlclose on it when done with it, without risking any
     segfault.  Some other LW6 modules/shared libraries do have this
     problem.

     *Return value:* none

 -- Function: lw6sys_module_pedigree_t * mod_random_get_pedigree
          (lw6sys_context_t * SYS_CONTEXT)
     SYS_CONTEXT: global system context

     Returns the pedigree for mod-random, giving details about the
     module, including name, description, licence, date/time of
     compilation.

     *Return value:* dynamically allocated object.

 -- Function: lw6bot_backend_t * mod_random_create_backend
          (lw6sys_context_t * SYS_CONTEXT)
     SYS_CONTEXT: global system context

     Creates a mod-random backend.

     *Return value:* backend pointer.


File: liquidwar6.info,  Node: libcfg,  Next: libcli,  Prev: mod-random,  Up: C API

5.7 libcfg
==========

5.7.1 Overview
--------------

View lcov (http://ltp.sourceforge.net/coverage/lcov.php) test coverage
results on
<http://www.ufoot.org/liquidwar/v6/doc/coverage/src/lib/cfg/index.html>.

5.7.2 API
---------

 -- Function: int lw6cfg_parse_command_line (lw6sys_context_t *
          SYS_CONTEXT, void * CFG_CONTEXT)
     SYS_CONTEXT: global system context

     CFG_CONTEXT: opaque pointer on a context

     Overwrites any existing option with command line args

     *Return value:* 1 if success, 0 if error

 -- Function: int lw6cfg_defaults (lw6sys_context_t * SYS_CONTEXT, void
          * CFG_CONTEXT)
     SYS_CONTEXT: global system context

     CFG_CONTEXT: opaque pointer on a context

     Sets all values to their defaults.

     *Return value:* 1 if success, 0 if error

 -- Function: int lw6cfg_merge_env (lw6sys_context_t * SYS_CONTEXT, void
          * CFG_CONTEXT)
     SYS_CONTEXT: global system context

     CFG_CONTEXT: a context returned by 'lw6cfg_init'

     Overwrites any existing vale in the config with environment
     variables prefixed by LW6_.

     *Return value:* 1 if successfull, 0 if error.

 -- Function: int lw6cfg_load_exp (lw6sys_context_t * SYS_CONTEXT, const
          char * USER_DIR, int * EXP)
     SYS_CONTEXT: global system context

     USER_DIR: the user directory

     EXP: the exp (out param)

     Gets exp from file.

     *Return value:* 1 on success, 0 on failure

 -- Function: int lw6cfg_save_exp (lw6sys_context_t * SYS_CONTEXT, const
          char * USER_DIR, int EXP)
     SYS_CONTEXT: global system context

     USER_DIR: the user directory

     EXP: the exp

     Saves exp to file.

     *Return value:* 1 on success, 0 on failure

 -- Function: char * lw6cfg_format (lw6sys_context_t * SYS_CONTEXT,
          const char * KEY, const char * VALUE, lw6hlp_type_t TYPE)
     SYS_CONTEXT: global system context

     KEY: the key of the value to format

     VALUE: the value to format

     TYPE: the type of the value to format

     Formats, converts, a given value to its cannonical representation.
     Booleans will be converted to true/false, strings containing
     integers will be stripped from junk, and so on.  This is a
     performance killer but will ensure everything is correct.

     *Return value:* a newly allocated string, containing the same as
     the input, but reformatted the pedantic way.

 -- Function: char * lw6cfg_format_guess_type (lw6sys_context_t *
          SYS_CONTEXT, const char * KEY, const char * VALUE)
     SYS_CONTEXT: global system context

     KEY: the key of the value to format

     VALUE: the value to format

     Formats, converts, a given value to its cannonical representation.
     Booleans will be converted to true/false, strings containing
     integers will be stripped from junk, and so on.  This is a
     performance killer but will ensure everything is correct.  This
     function will automatically guess the type of the value from its
     description in the help system.

     *Return value:* a newly allocated string, containing the same as
     the input, but reformatted the pedantic way.

 -- Function: int lw6cfg_load (lw6sys_context_t * SYS_CONTEXT, void *
          CFG_CONTEXT, const char * FILENAME)
     SYS_CONTEXT: global system context

     CFG_CONTEXT: a context returned by 'lw6cfg_init'

     FILENAME: a file path, absolute or relative

     Loads the given config file, and stores its values into the current
     context.  Parameters which are both in the config file and given as
     command line parameters, will be taken from the command-line.

     *Return value:* 1 if successfull, 0 if error.

 -- Function: int lw6cfg_option_exists (lw6sys_context_t * SYS_CONTEXT,
          void * CFG_CONTEXT, const char * KEY)
     SYS_CONTEXT: global system context

     CFG_CONTEXT: context to query

     KEY: key to search

     Returns wether a key exists within context or not.

     *Return value:* 1 if exists, 0 if not

 -- Function: char * lw6cfg_get_option (lw6sys_context_t * SYS_CONTEXT,
          void * CFG_CONTEXT, const char * KEY)
     SYS_CONTEXT: global system context

     CFG_CONTEXT: context to query

     KEY: key to search

     Returns the current value for a given query, the returned value is
     always a string, typically the string one would pass on the command
     line or set in a config file

     *Return value:* pointer to string, must be freed.

 -- Function: void lw6cfg_set_option (lw6sys_context_t * SYS_CONTEXT,
          void * CFG_CONTEXT, const char * KEY, const char * VALUE)
     SYS_CONTEXT: global system context

     CFG_CONTEXT: context to modify

     KEY: key to search and change

     VALUE: new value

     Sets a given key to the specified value, this is a string only
     function, pass the value you would pass on the command line or set
     in a config file.

     *Return value:* none

 -- Function: int lw6cfg_get_option_int (lw6sys_context_t * SYS_CONTEXT,
          void * CFG_CONTEXT, const char * KEY)
     KEY: key to search

     Returns an option as an integer.  Note that this function does not
     know wether the parameter should really be an integer or not, so
     you can call it even on non-integer values, but of course results
     will have no real meaning.

     *Return value:* option value converted to int

 -- Function: void lw6cfg_set_option_int (lw6sys_context_t *
          SYS_CONTEXT, void * CFG_CONTEXT, const char * KEY, int VALUE)
     SYS_CONTEXT: global system context

     CFG_CONTEXT: context to modify

     KEY: key to search and change

     VALUE: new value

     Set a config option to an integer value.  Note that this function
     does not know wether the parameter should really be an integer or
     not, so you can call it even on non-integer values, at your own
     risk.

     *Return value:* none.

 -- Function: int lw6cfg_get_option_bool (lw6sys_context_t *
          SYS_CONTEXT, void * CFG_CONTEXT, const char * KEY)
     SYS_CONTEXT: global system context

     CFG_CONTEXT: context to query

     KEY: key to search

     Returns an option as a boolean.  Note that this function does not
     know wether the parameter should really be a boolean or not, so you
     can call it even on non-boolean values, but of course results will
     have no real meaning.

     *Return value:* option value converted to boolean

 -- Function: void lw6cfg_set_option_bool (lw6sys_context_t *
          SYS_CONTEXT, void * CFG_CONTEXT, const char * KEY, int VALUE)
     SYS_CONTEXT: global system context

     CFG_CONTEXT: context to modify

     KEY: key to search and change

     VALUE: new value

     Set a config option to a boolean value.  Note that this function
     does not know wether the parameter should really be a boolean or
     not, so you can call it even on non-boolean values, at your own
     risk.

     *Return value:* none.

 -- Function: int lw6cfg_must_be_saved (lw6sys_context_t * SYS_CONTEXT,
          const char * KEY)
     SYS_CONTEXT: global system context

     KEY: key to test

     Tells wether a key should be saved in the config file.  Typically,
     some options you don't want to savem such as the location of the
     config file itself.  Most of those non-savable parameters are
     path-related.  This does not mean no paths are saved in the config
     file.

     *Return value:* 1 if must be saved, 0 if not

 -- Function: int lw6cfg_save (lw6sys_context_t * SYS_CONTEXT, void *
          CFG_CONTEXT, const char * FILENAME)
     SYS_CONTEXT: global system context

     CFG_CONTEXT: a context returned by 'lw6cfg_init'

     FILENAME: a file path, absolute or relative

     Save current options into the given config file.  Before saving the
     file, all command line arguments will be read and will override
     current values.  This means the saved file will contain values
     given as command line arguments.

     *Return value:* 1 if successfull, 0 if error.

 -- Function: void * lw6cfg_init (lw6sys_context_t * SYS_CONTEXT, int
          ARGC, const char * [] ARGV)
     SYS_CONTEXT: global system context

     ARGC: number of command line arguments, as given to 'main'

     ARGV: a list of command line arguments, as given to 'main'

     Initializes a config context object.  This object is hidden behind
     an opaque void * pointer to avoid direct access to its elements.

     *Return value:* an opaque pointer, must be freed with
     'lw6cfg_quit'.

 -- Function: void lw6cfg_quit (lw6sys_context_t * SYS_CONTEXT, void *
          CFG_CONTEXT)
     SYS_CONTEXT: global system context

     CFG_CONTEXT: a context returned by 'lw6cfg_init'

     Frees a config cfg_context object.  You must call this once you're
     done with the context.

     *Return value:* none.

 -- Function: void lw6cfg_reset (lw6sys_context_t * SYS_CONTEXT, int
          ARGC, const char * [] ARGV)
     SYS_CONTEXT: global system context

     ARGC: number of command line arguments, as given to 'main'

     ARGV: a list of command line arguments, as given to 'main'

     Overwrites the config file with defaults.  Use this to get rid of
     old configurations.

 -- Function: int lw6cfg_test_register (lw6sys_context_t * SYS_CONTEXT,
          int MODE)
     SYS_CONTEXT: global system context

     MODE: test mode (bitmask)

     Registers all tests for the libcfg module.

     *Return value:* 1 if test is successfull, 0 on error.

 -- Function: int lw6cfg_test_run (lw6sys_context_t * SYS_CONTEXT, int
          MODE)
     SYS_CONTEXT: global system context

     MODE: test mode (bitmask)

     Runs the 'cfg' module test suite, testing most (if not all...)
     functions.

     *Return value:* 1 if test is successfull, 0 on error.

 -- Function: char * lw6cfg_unified_get_value (lw6sys_context_t *
          SYS_CONTEXT, int ARGC, const char * [] ARGV, char * KEY)
     SYS_CONTEXT: global system context

     ARGC: number of command-line args, as passed to 'main'

     ARGV: arry of command-line args, as passed to 'main'

     KEY: the key to query

     Unified "value" getter, which gets informations from environment
     variables, command line, and config file.  The rules is that the
     command-line argument always has the last word.  It will override
     any other value.  Follows environment variables, which will be used
     if no command-line argument is supplied.  Note that these are
     "LW6_" prefixed and uppercased environment variables as opposed to
     lowercased and "dash-separated" keys.  Finally, if there's no
     environment variable, nor any config-file corresponding entry, the
     value will be searched in the config file.  If there's no
     information in the config file, NULL is returned.

     *Return value:* a string with the value.  Can be NULL. Must be
     freed.

 -- Function: char * lw6cfg_unified_get_user_dir (lw6sys_context_t *
          SYS_CONTEXT, int ARGC, const char * [] ARGV)
     SYS_CONTEXT: global system context

     ARGC: number of command-line args, as passed to 'main'

     ARGV: arry of command-line args, as passed to 'main'

     Gets the user dir, taking all parameters in account, that's to say
     the "LW6_USER_DIR" env value, the "-user-dir" command-line
     paramater and the LW6DEF_USER_DIR config file entry.

     *Return value:* the directory path, might be NULL, must be freed.

 -- Function: char * lw6cfg_unified_get_log_file (lw6sys_context_t *
          SYS_CONTEXT, int ARGC, const char * [] ARGV)
     SYS_CONTEXT: global system context

     ARGC: number of command-line args, as passed to 'main'

     ARGV: arry of command-line args, as passed to 'main'

     Gets the log file, taking all parameters in account, that's to say
     the "LW6_LOG_FILE" env value, the "-log-file" command-line
     paramater and the LW6DEF_LOG_FILE config file entry.

     *Return value:* the directory path, might be NULL, must be freed.

 -- Function: char * lw6cfg_unified_get_music_path (lw6sys_context_t *
          SYS_CONTEXT, int ARGC, const char * [] ARGV)
     SYS_CONTEXT: global system context

     ARGC: number of command-line args, as passed to 'main'

     ARGV: arry of command-line args, as passed to 'main'

     Gets the user dir, taking all parameters in account, that's to say
     the "LW6_MUSIC_PATH" env value, the "-music-path" command-line
     paramater and the LW6DEF_MUSIC_PATH config file entry.

     *Return value:* the directory path, might be NULL, must be freed.

 -- Function: char * lw6cfg_unified_get_map_path (lw6sys_context_t *
          SYS_CONTEXT, int ARGC, const char * [] ARGV)
     SYS_CONTEXT: global system context

     ARGC: number of command-line args, as passed to 'main'

     ARGV: arry of command-line args, as passed to 'main'

     Gets the user dir, taking all parameters in account, that's to say
     the "LW6_MAP_PATH" env value, the "-map-path" command-line
     paramater and the LW6DEF_MAP_PATH config file entry.

     *Return value:* the directory path, might be NULL, must be freed.

 -- Function: char * lw6cfg_xml_element (lw6sys_context_t * SYS_CONTEXT,
          lw6hlp_type_t TYPE)
     SYS_CONTEXT: global system context

     TYPE: type as an enum

     Returns the string corresponding to a given type, suitable for use
     in XML files.  For instance if you pass 'LW6HLP_TYPE_INT' then you
     will obtain the string int (string of 3 chars containing i, n and
     t.

     *Return value:* string, must not be freed.

 -- Function: void lw6cfg_read_xml_int (lw6sys_context_t * SYS_CONTEXT,
          const char * XML_KEY, const char * XML_VALUE, const char *
          TARGET_KEY, int * VALUE)
     SYS_CONTEXT: global system context

     XML_KEY: key found in XML file

     XML_VALUE: value found in XML file

     TARGET_KEY: key we're searching for

     VALUE: the value if found (out param)

     Tries to find a value in a key/value pair.  If 'xml_key' and
     'target_key' match, then will put the corresponding value
     (converted to int) in the 'value' param.  Typically, you would call
     this in a loop on every single entry found in an XML file, in an
     expat callback.

     *Return value:* none.

 -- Function: void lw6cfg_read_xml_bool (lw6sys_context_t * SYS_CONTEXT,
          const char * XML_KEY, const char * XML_VALUE, const char *
          TARGET_KEY, int * VALUE)
     SYS_CONTEXT: global system context

     XML_KEY: key found in XML file

     XML_VALUE: value found in XML file

     TARGET_KEY: key we're searching for

     VALUE: the value if found (out param)

     Tries to find a value in a key/value pair.  If 'xml_key' and
     'target_key' match, then will put the corresponding value
     (converted to boolean) in the 'value' param.  Typically, you would
     call this in a loop on every single entry found in an XML file, in
     an expat callback.

     *Return value:* none.

 -- Function: void lw6cfg_read_xml_float (lw6sys_context_t *
          SYS_CONTEXT, const char * XML_KEY, const char * XML_VALUE,
          const char * TARGET_KEY, float * VALUE)
     SYS_CONTEXT: global system context

     XML_KEY: key found in XML file

     XML_VALUE: value found in XML file

     TARGET_KEY: key we're searching for

     VALUE: the value if found (out param)

     Tries to find a value in a key/value pair.  If 'xml_key' and
     'target_key' match, then will put the corresponding value
     (converted to float) in the 'value' param.  Typically, you would
     call this in a loop on every single entry found in an XML file, in
     an expat callback.

     *Return value:* none.

 -- Function: void lw6cfg_read_xml_string (lw6sys_context_t *
          SYS_CONTEXT, const char * XML_KEY, const char * XML_VALUE,
          const char * TARGET_KEY, char ** VALUE)
     SYS_CONTEXT: global system context

     XML_KEY: key found in XML file

     XML_VALUE: value found in XML file

     TARGET_KEY: key we're searching for

     VALUE: the value if found (out param)

     Tries to find a value in a key/value pair.  If 'xml_key' and
     'target_key' match, then will put the corresponding value (as a
     string) in the 'value' param.  Typically, you would call this in a
     loop on every single entry found in an XML file, in an expat
     callback.

     *Return value:* none.

 -- Function: void lw6cfg_read_xml_color (lw6sys_context_t *
          SYS_CONTEXT, const char * XML_KEY, const char * XML_VALUE,
          const char * TARGET_KEY, lw6sys_color_8_t * VALUE)
     SYS_CONTEXT: global system context

     XML_KEY: key found in XML file

     XML_VALUE: value found in XML file

     TARGET_KEY: key we're searching for

     VALUE: the value if found (out param)

     Tries to find a value in a key/value pair.  If 'xml_key' and
     'target_key' match, then will put the corresponding value
     (converted to a color) in the 'value' param.  Typically, you would
     call this in a loop on every single entry found in an XML file, in
     an expat callback.

     *Return value:* none.

 -- Function: int lw6cfg_read_key_value_xml_file (lw6sys_context_t *
          SYS_CONTEXT, const char * FILENAME,
          lw6cfg_read_xml_callback_func_t CALLBACK_FUNC, void *
          CALLBACK_DATA)
     SYS_CONTEXT: global system context

     FILENAME: full path of file to read

     CALLBACK_FUNC: callback function to be called on each element

     CALLBACK_DATA: additionnal pointer passed to callback function

     Will parse a file and call the given callback on each element.
     This is an over-simplified way to read XML file, in fact we just
     explain plain non-nested simple elements but this is exactly what
     LW config files are made of.

     *Return value:* 1 on success, 0 on failure.

 -- Function: void lw6cfg_write_xml_int (lw6sys_context_t * SYS_CONTEXT,
          FILE * F, const char * KEY, int VALUE)
     SYS_CONTEXT: global system context

     F: file to write data to (append mode)

     KEY: key to write

     VALUE: value to write

     Writes an int entry into an opened XML file.

     *Return value:* none.

 -- Function: void lw6cfg_write_xml_bool (lw6sys_context_t *
          SYS_CONTEXT, FILE * F, const char * KEY, int VALUE)
     SYS_CONTEXT: global system context

     F: file to write data to (append mode)

     KEY: key to write

     VALUE: value to write

     Writes a boolean entry into an opened XML file.

     *Return value:* none.

 -- Function: void lw6cfg_write_xml_float (lw6sys_context_t *
          SYS_CONTEXT, FILE * F, const char * KEY, float VALUE)
     SYS_CONTEXT: global system context

     F: file to write data to (append mode)

     KEY: key to write

     VALUE: value to write

     Writes a float entry into an opened XML file.

     *Return value:* none.

 -- Function: void lw6cfg_write_xml_string (lw6sys_context_t *
          SYS_CONTEXT, FILE * F, const char * KEY, const char * VALUE)
     SYS_CONTEXT: global system context

     F: file to write data to (append mode)

     KEY: key to write

     VALUE: value to write

     Writes a string entry into an opened XML file.

     *Return value:* none.

 -- Function: void lw6cfg_write_xml_color (lw6sys_context_t *
          SYS_CONTEXT, FILE * F, const char * KEY, lw6sys_color_8_t
          VALUE)
     SYS_CONTEXT: global system context

     F: file to write data to (append mode)

     KEY: key to write

     VALUE: value to write

     Writes a color entry into an opened XML file.

     *Return value:* none.

 -- Function: void lw6cfg_write_xml_guess_type (lw6sys_context_t *
          SYS_CONTEXT, FILE * F, const char * KEY, const char * VALUE)
     SYS_CONTEXT: global system context

     F: file to write data to (append mode)

     KEY: key to write

     VALUE: value to write

     Writes an entry into an opened XML file, will try and guess type
     from the internal help system, typically, if this is a standard
     config file entry (the one documented by the about command line
     function) it will pick up the right type.  The reason not to use
     this all the times is that sometimes, one might to to store
     non-standard options, and additionnally, guessing the type does
     consume some CPU.

     *Return value:* none.

 -- Function: void lw6cfg_write_xml_guess_type_skip_same
          (lw6sys_context_t * SYS_CONTEXT, FILE * F, const char * KEY,
          const char * VALUE)
     SYS_CONTEXT: global system context

     F: file to write data to (append mode)

     KEY: key to write

     VALUE: value to write

     Writes an entry into an opened XML file, will try and guess type
     from the internal help system, typically, if this is a standard
     config file entry (the one documented by the about command line
     function) it will pick up the right type.  The reason not to use
     this all the times is that sometimes, one might to to store
     non-standard options, and additionnally, guessing the type does
     consume some CPU. Also, this function will write only values that
     are different from the default.

     *Return value:* none.


File: liquidwar6.info,  Node: libcli,  Next: mod-http,  Prev: libcfg,  Up: C API

5.8 libcli
==========

5.8.1 Overview
--------------

View lcov (http://ltp.sourceforge.net/coverage/lcov.php) test coverage
results on
<http://www.ufoot.org/liquidwar/v6/doc/coverage/src/lib/cli/index.html>.

5.8.2 API
---------

 -- Function: int lw6cli_init (lw6sys_context_t * SYS_CONTEXT,
          lw6cli_backend_t * BACKEND)
     SYS_CONTEXT: global system context

     BACKEND: backend to use

     Initializes a client backend.  Must be performed before any other
     call.

     *Return value:* 1 on success, 0 on failure

 -- Function: void lw6cli_quit (lw6sys_context_t * SYS_CONTEXT,
          lw6cli_backend_t * BACKEND)
     SYS_CONTEXT: global system context

     BACKEND: unitialize a cli backend

     Closes a cli, but does not free all ressources.

 -- Function: int lw6cli_process_oob (lw6sys_context_t * SYS_CONTEXT,
          lw6cli_backend_t * BACKEND, lw6nod_info_t * NODE_INFO,
          lw6cli_oob_data_t * OOB_DATA)
     SYS_CONTEXT: global system context

     BACKEND: backend to use

     NODE_INFO: information on the current node

     OOB_DATA: data of the out-of-band request

     Processes the required out-of-band tasks, this typically, for a
     client, includes broadcasting.  Depending on parameters passed in
     oob_data, might actually do a broadcast or simply call a given host
     and see what's the answer.  A typicall exchange is PING then INFO
     and finally LIST. It's the responsability of the client to take the
     OOB initiative and contact the server.

     *Return value:* 1 on success, 0 on failure.

 -- Function: lw6cnx_connection_t * lw6cli_open (lw6sys_context_t *
          SYS_CONTEXT, lw6cli_backend_t * BACKEND, const char *
          LOCAL_URL, const char * REMOTE_URL, const char * REMOTE_IP,
          int REMOTE_PORT, const char * PASSWORD, u_int64_t LOCAL_ID,
          u_int64_t REMOTE_ID, int DNS_OK, int NETWORK_RELIABILITY)
     SYS_CONTEXT: global system context

     BACKEND: backend to use

     LOCAL_URL: our local public url

     REMOTE_URL: the remote url we want to connect to

     REMOTE_IP: remote IP address

     REMOTE_PORT: remote IP port

     PASSWORD: password to use (if needed)

     LOCAL_ID: our local id

     REMOTE_ID: the remote id

     DNS_OK: wether the remote announced URL matches DNS information

     NETWORK_RELIABILITY: network reliability (the highest, the better)

     Opens a connection with a remote host.

     *Return value:* new object.

 -- Function: void lw6cli_close (lw6sys_context_t * SYS_CONTEXT,
          lw6cli_backend_t * BACKEND, lw6cnx_connection_t * CONNECTION)
     SYS_CONTEXT: global system context

     BACKEND: backend to use

     CONNECTION: connection to use

     Closes a connection, this will free the connection object.

     *Return value:* none.

 -- Function: int lw6cli_send (lw6sys_context_t * SYS_CONTEXT,
          lw6cli_backend_t * BACKEND, lw6cnx_connection_t * CONNECTION,
          int64_t NOW, u_int32_t PHYSICAL_TICKET_SIG, u_int32_t
          LOGICAL_TICKET_SIG, u_int64_t LOGICAL_FROM_ID, u_int64_t
          LOGICAL_TO_ID, const char * MESSAGE)
     SYS_CONTEXT: global system context

     BACKEND: backend to use

     CONNECTION: connection to use

     NOW: current timestamp

     PHYSICAL_TICKET_SIG: signature of physical sender

     LOGICAL_TICKET_SIG: signature of logical sender

     LOGICAL_FROM_ID: id of logical sender

     LOGICAL_TO_ID: id of logicial target

     MESSAGE: text of message to send

     Sends a message to a peer over a given connection.

     *Return value:* 1 on success, 0 on failure.

 -- Function: int lw6cli_can_send (lw6sys_context_t * SYS_CONTEXT,
          lw6cli_backend_t * BACKEND, lw6cnx_connection_t * CONNECTION)
     SYS_CONTEXT: global system context

     BACKEND: backend to use

     CONNECTION: connection to use

     Tells wether a client connection can technically send messages.
     This does not garantee send will succeed, but if it's not OK at
     this stage, it's not even worth trying.

     *Return value:* 1 if it can be used to send messages, 0 if not
     ready.

 -- Function: void lw6cli_poll (lw6sys_context_t * SYS_CONTEXT,
          lw6cli_backend_t * BACKEND, lw6cnx_connection_t * CONNECTION)
     SYS_CONTEXT: global system context

     BACKEND: backend to use

     CONNECTION: connection to use

     Performs required duty on connection, depending on the backend,
     this can include sending messages and/or receiving them.  Must be
     called on a regular basis.

     *Return value:* none.

 -- Function: char * lw6cli_repr (lw6sys_context_t * SYS_CONTEXT, const
          lw6cli_backend_t * BACKEND, lw6cnx_connection_t * CONNECTION)
     SYS_CONTEXT: global system context

     BACKEND: backend to use

     CONNECTION: connection to represent

     Gives a human readable representation of the connection.

     *Return value:* dynamically allocated string.

 -- Function: lw6cli_oob_t * lw6cli_oob_new (lw6sys_context_t *
          SYS_CONTEXT, const char * PUBLIC_URL,
          lw6cli_verify_callback_func_t VERIFY_CALLBACK_FUNC, void *
          VERIFY_CALLBACK_DATA)
     SYS_CONTEXT: global system context

     PUBLIC_URL: the address of the distant server to test

     VERIFY_CALLBACK_FUNC: a function which will be called when a node
     has been verified

     VERIFY_CALLBACK_DATA: additionnal data passed to the callback func

     Create a new OOB structure, copying required objects.  We need to
     make copies for this is for usage in a separate thread.  The thread
     member is not set here since the right way to do things is first to
     set up data then to fire the thread.

     *Return value:* new object

 -- Function: void lw6cli_oob_free (lw6sys_context_t * SYS_CONTEXT,
          lw6cli_oob_t * OOB)
     SYS_CONTEXT: global system context

     OOB: the object to free

     Frees an OOB structure.

     *Return value:* none

 -- Function: char * lw6cli_default_backends (lw6sys_context_t *
          SYS_CONTEXT)
     SYS_CONTEXT: global system context

     Returns the list of the default cli backends.

     *Return value:* comma separated string, must not be freed.

 -- Function: lw6sys_assoc_t * lw6cli_get_backends (lw6sys_context_t *
          SYS_CONTEXT, int ARGC, const char * [] ARGV)
     SYS_CONTEXT: global system context

     ARGC: argc, as passed to 'main'

     ARGV: argv, as passed to 'main'

     List available cli backends.  The hash contains pairs with id and
     name for each backend.  The id is the technical key you can use to
     load the backend, the name is something more readable you can
     display in an interface.  The backend objects themselves are not
     instanciated by this (in fact, they are, but released on the fly)
     you need to load and initialize them afterwards.

     *Return value:* hash containing id/name pairs.

 -- Function: lw6cli_backend_t * lw6cli_create_backend (lw6sys_context_t
          * SYS_CONTEXT, int ARGC, const char * [] ARGV, const char *
          NAME)
     SYS_CONTEXT: global system context

     ARGC: argc, as passed to 'main'

     ARGV: argv, as passed to 'main'

     NAME: string containing cli key, typically got from
     'lw6cli_get_backends'

     Creates a cli backend, this is just about loading the dynamic
     library if needed, and/or check cli engine is available, and
     connect to it.  It does not perform initialization.

     *Return value:* cli backend.

 -- Function: void lw6cli_destroy_backend (lw6sys_context_t *
          SYS_CONTEXT, lw6cli_backend_t * BACKEND)
     SYS_CONTEXT: global system context

     BACKEND: backend to destroy

     Destroys a cli backend.

     *Return value:* none.

 -- Function: int lw6cli_test_register (lw6sys_context_t * SYS_CONTEXT,
          int MODE)
     SYS_CONTEXT: global system context

     MODE: test mode (bitmask)

     Registers all tests for the libcli module.

     *Return value:* 1 if test is successfull, 0 on error.

 -- Function: int lw6cli_test_run (lw6sys_context_t * SYS_CONTEXT, int
          MODE)
     SYS_CONTEXT: global system context

     MODE: test mode (bitmask)

     Runs the 'cli' module test suite, testing most (if not all...)
     functions.

     *Return value:* 1 if test is successfull, 0 on error.

 -- Struct: lw6cli_backend_s

     The cli backend is the first argument passed to any cli function,
     it contains reference to all the functions which can be used as
     well as a pointer on associated data.  In OO, this would just be an
     object, with members and methods, using polymorphism through opaque
     pointers.

 -- Member of lw6cli_backend_s: dl_handle
     *Type:* 'lw6dyn_dl_handle_t *'

     *Definition:* 'lw6dyn_dl_handle_t* lw6cli_backend_s::dl_handle'

     Handle on dynamic library (if it makes sense).

 -- Member of lw6cli_backend_s: cli_context
     *Type:* 'void *'

     *Definition:* 'void* lw6cli_backend_s::cli_context'

     Cli specific data, what is behind this pointer really depends on
     the cli engine.

 -- Member of lw6cli_backend_s: argc
     *Type:* 'int'

     *Definition:* 'int lw6cli_backend_s::argc'

     The argc value passed to main.

 -- Member of lw6cli_backend_s: argv
     *Type:* 'const char **'

     *Definition:* 'const char** lw6cli_backend_s::argv'

     The argv value passed to main.

 -- Member of lw6cli_backend_s: id
     *Type:* 'u_int32_t'

     *Definition:* 'u_int32_t lw6cli_backend_s::id'

     The id of the object, this is non-zero and unique within one run
     session, incremented at each object creation.

 -- Member of lw6cli_backend_s: name
     *Type:* 'char *'

     *Definition:* 'char* lw6cli_backend_s::name'

     Module name.

 -- Member of lw6cli_backend_s: properties
     *Type:* 'lw6cnx_properties_t'

     *Definition:* 'lw6cnx_properties_t lw6cli_backend_s::properties'

     General backend properties.

 -- Member of lw6cli_backend_s: init
     *Type:* 'void *(*'

     *Definition:* 'void*(* lw6cli_backend_s::init)(lw6sys_context_t
     *sys_context, int argc, const char *argv[], lw6cnx_properties_t
     *properties)'

     Pointer on lw6cli_init callback code.

 -- Member of lw6cli_backend_s: quit
     *Type:* 'void(*'

     *Definition:* 'void(* lw6cli_backend_s::quit)(lw6sys_context_t
     *sys_context, void *cli_context)'

     Pointer on lw6cli_quit callback code.

 -- Member of lw6cli_backend_s: process_oob
     *Type:* 'int(*'

     *Definition:* 'int(*
     lw6cli_backend_s::process_oob)(lw6sys_context_t *sys_context, void
     *cli_context, lw6nod_info_t *node_info, lw6cli_oob_data_t
     *oob_data)'

     Pointer on lw6cli_process_oob callback code.

 -- Member of lw6cli_backend_s: open
     *Type:* 'lw6cnx_connection_t *(*'

     *Definition:* 'lw6cnx_connection_t*(*
     lw6cli_backend_s::open)(lw6sys_context_t *sys_context, void
     *cli_context, const char *local_url, const char *remote_url, const
     char *remote_ip, int remote_port, const char *password, u_int64_t
     local_id, u_int64_t remote_id, int dns_ok, int
     network_reliability)'

     Pointer on lw6cli_open callback code.

 -- Member of lw6cli_backend_s: close
     *Type:* 'void(*'

     *Definition:* 'void(* lw6cli_backend_s::close)(lw6sys_context_t
     *sys_context, void *cli_context, lw6cnx_connection_t *connection)'

     Pointer on lw6cli_close callback code.

 -- Member of lw6cli_backend_s: send
     *Type:* 'int(*'

     *Definition:* 'int(* lw6cli_backend_s::send)(lw6sys_context_t
     *sys_context, void *cli_context, lw6cnx_connection_t *connection,
     int64_t now, u_int32_t physical_ticket_sig, u_int32_t
     logical_ticket_sig, u_int64_t logical_from_id, u_int64_t
     logical_to_id, const char *message)'

     Pointer on lw6cli_send callback code.

 -- Member of lw6cli_backend_s: can_send
     *Type:* 'int(*'

     *Definition:* 'int(* lw6cli_backend_s::can_send)(lw6sys_context_t
     *sys_context, void *cli_context, lw6cnx_connection_t *connection)'

     Pointer on lw6cli_can_send callback code.

 -- Member of lw6cli_backend_s: poll
     *Type:* 'void(*'

     *Definition:* 'void(* lw6cli_backend_s::poll)(lw6sys_context_t
     *sys_context, void *cli_context, lw6cnx_connection_t *connection)'

     Pointer on lw6cli_poll callback code.

 -- Member of lw6cli_backend_s: repr
     *Type:* 'char *(*'

     *Definition:* 'char*(* lw6cli_backend_s::repr)(lw6sys_context_t
     *sys_context, void *cli_context, lw6cnx_connection_t *connection)'

     Pointer on lw6cli_repr callback code.

 -- Struct: lw6cli_oob_data_s

     Holds the data for the process_oob function, this is merely a
     utility struct to simplify headers/

 -- Member of lw6cli_oob_data_s: creation_timestamp
     *Type:* 'int64_t'

     *Definition:* 'int64_t lw6cli_oob_data_s::creation_timestamp'

     Creation timestamp of the OOB request, this is used to know wether
     we have already timed out or not.  This is not the node creation
     timestamp.

 -- Member of lw6cli_oob_data_s: do_not_finish
     *Type:* 'int'

     *Definition:* 'volatile int lw6cli_oob_data_s::do_not_finish'

     Flag used to force finish, for instance when we want to delete the
     object quickly and do not want to wait until a long polling-based
     network operation finishes completely.

 -- Member of lw6cli_oob_data_s: public_url
     *Type:* 'char *'

     *Definition:* 'char* lw6cli_oob_data_s::public_url'

     Public URL of the node, we need this at hand to serve it quickly to
     peers, and be able to perform basic checks.

 -- Member of lw6cli_oob_data_s: verify_callback_func
     *Type:* 'lw6cli_verify_callback_func_t'

     *Definition:* 'lw6cli_verify_callback_func_t
     lw6cli_oob_data_s::verify_callback_func'

     Pointer on a function which will verify if peer is OK, and act
     accordinlgy if it's OK or not.  Note that the callback function
     might be called pretty much anytime in the heavily multithreaded
     context of LW6 so it must be reentrant and have mutexes if needed.
     Indeed, it's very likely to update some shared list of available
     nodes.

 -- Member of lw6cli_oob_data_s: verify_callback_data
     *Type:* 'void *'

     *Definition:* 'void* lw6cli_oob_data_s::verify_callback_data'

     Data passed to the verify_callback function.

 -- Struct: lw6cli_oob_s

     Structure containing both the thread running an OOB request and its
     data.  It was advantagious to separate thoses two and not make the
     thread a permanent member of the OOB data struct, since it allows
     the actual OOB code to be totally unaware of the thread running it,
     which is, to some extent, safer.

 -- Member of lw6cli_oob_s: thread
     *Type:* 'lw6sys_thread_handler_t *'

     *Definition:* 'lw6sys_thread_handler_t* lw6cli_oob_s::thread'

     Pointer on thread running the OOB request.

 -- Member of lw6cli_oob_s: data
     *Type:* 'lw6cli_oob_data_t'

     *Definition:* 'lw6cli_oob_data_t lw6cli_oob_s::data'

     Data used by the OOB request.


File: liquidwar6.info,  Node: mod-http,  Next: mod-tcp,  Prev: libcli,  Up: C API

5.9 mod-http
============

5.9.1 Overview
--------------

View lcov (http://ltp.sourceforge.net/coverage/lcov.php) test coverage
results on
<http://www.ufoot.org/liquidwar/v6/doc/coverage/src/lib/cli/mod-http/index.html>.

5.9.2 API
---------

 -- Function: void mod_http_is_GPL_compatible ()

     Defined to tell mod_http is compatible with GNU General Public
     License.  Of course it is.  This function does nothing, but the
     fact it's declared makes its GPL compatibility obvious.  Having
     this declared is required.

     *Return value:* none

 -- Function: void mod_http_is_dlclose_safe ()

     Defined to tell mod_http has no dlclose issue, once can safely call
     lt_dlclose on it when done with it, without risking any segfault.
     Some other LW6 modules/shared libraries do have this problem.

     *Return value:* none

 -- Function: lw6sys_module_pedigree_t * mod_http_get_pedigree
          (lw6sys_context_t * SYS_CONTEXT)
     SYS_CONTEXT: global system context

     Returns the pedigree for mod-http, giving details about the module,
     including name, description, licence, date/time of compilation.

     *Return value:* dynamically allocated object.

 -- Function: lw6cli_backend_t * mod_http_create_backend
          (lw6sys_context_t * SYS_CONTEXT)
     SYS_CONTEXT: global system context

     Creates a mod-http backend.

     *Return value:* backend pointer.


File: liquidwar6.info,  Node: mod-tcp,  Next: mod-udp,  Prev: mod-http,  Up: C API

5.10 mod-tcp
============

5.10.1 Overview
---------------

View lcov (http://ltp.sourceforge.net/coverage/lcov.php) test coverage
results on
<http://www.ufoot.org/liquidwar/v6/doc/coverage/src/lib/cli/mod-tcp/index.html>.

5.10.2 API
----------

 -- Function: void mod_tcp_is_GPL_compatible ()

     Defined to tell mod_tcp is compatible with GNU General Public
     License.  Of course it is.  This function does nothing, but the
     fact it's declared makes its GPL compatibility obvious.  Having
     this declared is required.

     *Return value:* none

 -- Function: void mod_tcp_is_dlclose_safe ()

     Defined to tell mod_tcp has no dlclose issue, once can safely call
     lt_dlclose on it when done with it, without risking any segfault.
     Some other LW6 modules/shared libraries do have this problem.

     *Return value:* none

 -- Function: lw6sys_module_pedigree_t * mod_tcp_get_pedigree
          (lw6sys_context_t * SYS_CONTEXT)
     SYS_CONTEXT: global system context

     Returns the pedigree for mod-tcp, giving details about the module,
     including name, description, licence, date/time of compilation.

     *Return value:* dynamically allocated object.

 -- Function: lw6cli_backend_t * mod_tcp_create_backend
          (lw6sys_context_t * SYS_CONTEXT)
     SYS_CONTEXT: global system context

     Creates a mod-tcp backend.

     *Return value:* backend pointer.


File: liquidwar6.info,  Node: mod-udp,  Next: libcns,  Prev: mod-tcp,  Up: C API

5.11 mod-udp
============

5.11.1 Overview
---------------

View lcov (http://ltp.sourceforge.net/coverage/lcov.php) test coverage
results on
<http://www.ufoot.org/liquidwar/v6/doc/coverage/src/lib/cli/mod-udp/index.html>.

5.11.2 API
----------

 -- Function: void mod_udp_is_GPL_compatible ()

     Defined to tell mod_udp is compatible with GNU General Public
     License.  Of course it is.  This function does nothing, but the
     fact it's declared makes its GPL compatibility obvious.  Having
     this declared is required.

     *Return value:* none

 -- Function: void mod_udp_is_dlclose_safe ()

     Defined to tell mod_udp has no dlclose issue, once can safely call
     lt_dlclose on it when done with it, without risking any segfault.
     Some other LW6 modules/shared libraries do have this problem.

     *Return value:* none

 -- Function: lw6sys_module_pedigree_t * mod_udp_get_pedigree
          (lw6sys_context_t * SYS_CONTEXT)
     SYS_CONTEXT: global system context

     Returns the pedigree for mod-udp, giving details about the module,
     including name, description, licence, date/time of compilation.

     *Return value:* dynamically allocated object.

 -- Function: lw6cli_backend_t * mod_udp_create_backend
          (lw6sys_context_t * SYS_CONTEXT)
     SYS_CONTEXT: global system context

     Creates a mod-udp backend.

     *Return value:* backend pointer.


File: liquidwar6.info,  Node: libcns,  Next: libcnx,  Prev: mod-udp,  Up: C API

5.12 libcns
===========

5.12.1 Overview
---------------

View lcov (http://ltp.sourceforge.net/coverage/lcov.php) test coverage
results on
<http://www.ufoot.org/liquidwar/v6/doc/coverage/src/lib/cns/index.html>.

5.12.2 API
----------

 -- Function: void lw6cns_handler_callback (char * LINE)
     LINE: the input line

     The global console handler.  Because readline does not, or at
     least, because I did not find any proper way to pass it a general
     pointer along with the string, and since we need 'sys_context'
     pretty much everywhere, we rely on using this handler which, in
     turn, calls the handler passed to 'lw6cns_handler_install' with
     'sys_context' added as a first argument.

     *Return value:* none.

 -- Function: void lw6cns_handler_install (lw6sys_context_t *
          SYS_CONTEXT, lw6cns_callback_func_t CALLBACK)
     SYS_CONTEXT: global system context

     CALLBACK: handler function.

     Installs a console handler.

     *Return value:* none.

 -- Function: void lw6cns_handler_poll (lw6sys_context_t * SYS_CONTEXT)
     SYS_CONTEXT: global system context

     Polling function for console, must be called on a regular basis.

     *Return value:* none.

 -- Function: void lw6cns_handler_remove (lw6sys_context_t *
          SYS_CONTEXT)
     SYS_CONTEXT: global system context

     Remove console handler.

     *Return value:* none.

 -- Function: void lw6cns_history_add_if_needed (lw6sys_context_t *
          SYS_CONTEXT, char * LINE)
     SYS_CONTEXT: global system context

     LINE: line to add

     Adds a line to the console history, won't add it if it's NULL or
     empty.

     *Return value:* none.

 -- Function: int lw6cns_console_support (lw6sys_context_t *
          SYS_CONTEXT)
     SYS_CONTEXT: global system context

     Tells wether console is supported.

     *Return value:* 1 if console can be enabled, 0 if not

 -- Function: int lw6cns_term_support (lw6sys_context_t * SYS_CONTEXT)
     SYS_CONTEXT: global system context

     Tells wether program is likely to have proper term (xterm, Linux
     console) support.

     *Return value:* 1 if has validated TERM support, 0 if not

 -- Function: int lw6cns_test_register (lw6sys_context_t * SYS_CONTEXT,
          int MODE)
     SYS_CONTEXT: global system context

     MODE: test mode (bitmask)

     Registers all tests for the libcns module.

     *Return value:* 1 if test is successfull, 0 on error.

 -- Function: int lw6cns_test_run (lw6sys_context_t * SYS_CONTEXT, int
          MODE)
     SYS_CONTEXT: global system context

     MODE: test mode (bitmask)

     Runs the 'cns' module test suite, testing most (if not all...)
     functions.

     *Return value:* 1 if test is successfull, 0 on error.


File: liquidwar6.info,  Node: libcnx,  Next: libdat,  Prev: libcns,  Up: C API

5.13 libcnx
===========

5.13.1 Overview
---------------

View lcov (http://ltp.sourceforge.net/coverage/lcov.php) test coverage
results on
<http://www.ufoot.org/liquidwar/v6/doc/coverage/src/lib/cnx/index.html>.

5.13.2 API
----------

 -- Function: lw6cnx_connection_t * lw6cnx_connection_new
          (lw6sys_context_t * SYS_CONTEXT, const char * LOCAL_URL, const
          char * REMOTE_URL, const char * REMOTE_IP, int REMOTE_PORT,
          const char * PASSWORD, u_int64_t LOCAL_ID, u_int64_t
          REMOTE_ID, int DNS_OK, int NETWORK_RELIABILITY)
     SYS_CONTEXT: global system context

     LOCAL_URL: the local public URL

     REMOTE_URL: the remote public URL

     REMOTE_IP: the remote IP address

     REMOTE_PORT: the remote port

     PASSWORD: the password to use

     LOCAL_ID: the local ID

     REMOTE_ID: the remote ID

     DNS_OK: 1 if no DNS mismatch, 0 if IP does not match public URL

     NETWORK_RELIABILITY: drop 1 out of X packets

     Create a connection object.  This object in itself does nothing,
     it's just to share common structures among modules, more precisely,
     between cli and srv code.  It's the responsability off the
     caller/backend to handle the 'backend_specific_data' field which is
     NULL after this call.

     *Return value:* newly allocated object.

 -- Function: void lw6cnx_connection_free (lw6sys_context_t *
          SYS_CONTEXT, lw6cnx_connection_t * CONNECTION)
     SYS_CONTEXT: global system context

     CONNECTION: object to free

     Frees a connection object.  It's the responsibility of the
     caller/backend to handle the 'backend_specific_data' field.

     *Return value:* none.

 -- Function: int lw6cnx_connection_should_send_foo (lw6sys_context_t *
          SYS_CONTEXT, lw6cnx_connection_t * CONNECTION, int64_t NOW)
     SYS_CONTEXT: global system context

     CONNECTION: the connection concerned

     NOW: the current timestamp

     Tells wether a new foo message must be issued.

     *Return value:* 1 if true, 0 if false.

 -- Function: void lw6cnx_connection_init_foo_bar_key (lw6sys_context_t
          * SYS_CONTEXT, lw6cnx_connection_t * CONNECTION, int64_t NOW,
          int NEXT_FOO_DELAY)
     SYS_CONTEXT: global system context

     CONNECTION: the connection concerned

     NOW: the current timestamp

     NEXT_FOO_DELAY: the delay (msec) before next foo message is sent

     Generates a new foo_bar_key, and schedules the next foo message
     send timestamp.

     *Return value:* none.

 -- Function: int lw6cnx_connection_lock_send (lw6sys_context_t *
          SYS_CONTEXT, lw6cnx_connection_t * CONNECTION)
     SYS_CONTEXT: global system context

     CONNECTION: the connexion to lock

     Acquires a "send" lock on the connexion, the idea is to avoid too
     threads sending data using the same socket at the same time.  Note
     that each backend must call this when accessing the socket, there's
     no top-level lock for the sake of performance.

     *Return value:* 1 on success, 0 if not.

 -- Function: void lw6cnx_connection_unlock_send (lw6sys_context_t *
          SYS_CONTEXT, lw6cnx_connection_t * CONNECTION)
     SYS_CONTEXT: global system context

     CONNECTION: the connexion to lock

     Releases a "send" lock on the connexion, the idea is to avoid too
     threads sending data using the same socket at the same time.  Note
     that each backend must call this when accessing the socket, there's
     no top-level lock for the sake of performance.

     *Return value:* none.

 -- Function: int lw6cnx_connection_reliability_filter (lw6sys_context_t
          * SYS_CONTEXT, lw6cnx_connection_t * CONNECTION)
     SYS_CONTEXT: global system context

     CONNECTION: the connexion concerned

     Will filter and return true only in "rare" cases when packets must
     be artificially dropped for testing purpose.

     *Return value:* 1 if message must be sent/received, 0 if not

 -- Function: lw6cnx_packet_t * lw6cnx_packet_new (lw6sys_context_t *
          SYS_CONTEXT, u_int32_t LOGICAL_TICKET_SIG, u_int32_t
          PHYSICAL_TICKET_SIG, u_int64_t LOGICAL_FROM_ID, u_int64_t
          LOGICAL_TO_ID, const char * MSG)
     SYS_CONTEXT: global system context

     LOGICAL_TICKET_SIG: logical signature

     PHYSICAL_TICKET_SIG: physical signature

     LOGICAL_FROM_ID: logical sender

     LOGICAL_TO_ID: logical receiver

     MSG: the message text

     Creates a new packet object, this simply allocates memory and copy
     the string.  The string is duplicated, param msg can be freed.

     *Return value:* new object.

 -- Function: void lw6cnx_packet_free (lw6sys_context_t * SYS_CONTEXT,
          lw6cnx_packet_t * PACKET)
     SYS_CONTEXT: global system context

     PACKET: object to free

     Frees a packet object.

     *Return value:* none.

 -- Function: u_int32_t lw6cnx_packet_checksum (lw6sys_context_t *
          SYS_CONTEXT, const lw6cnx_packet_t * PACKET)
     SYS_CONTEXT: global system context

     PACKET: packet to analyse

     Calculates a checksum for a packet.

     *Return value:* 32-bit checksum.

 -- Function: int lw6cnx_packet_compare (lw6sys_context_t * SYS_CONTEXT,
          const lw6cnx_packet_t * A, const lw6cnx_packet_t * B)
     SYS_CONTEXT: global system context

     A: first packet to analyse

     B: second packet to analyse

     Compares two packets.  The comparison is made using checksums, the
     result is a strcmp-like integer, which is adapted to sorting.  The
     order has no real signification, it's mostly used to re-order
     packets in a pseudo-random order, to ensure no algorithm relies on
     packets arriving in the right order.

     *Return value:* -1 if a lower than b, 0 if a equals b, 1 if a is
     greater than b.

 -- Function: int lw6cnx_packet_sort_callback (lw6sys_context_t *
          SYS_CONTEXT, void * FUNC_DATA, const void * PTR_A, const void
          * PTR_B)
     SYS_CONTEXT: global system context

     FUNC_DATA: additionnal data, function specific

     PTR_A: first packet to analyse

     PTR_B: second packet to analyse

     Callback usable to sort packets, relies on 'lw6cnx_packet_compare'
     internally.

     *Return value:* -1 if ptr_a lower than ptr_b, 0 if ptr_a equals
     ptr_b, 1 if ptr_a is greater than ptr_b.

 -- Function: char * lw6cnx_password_checksum (lw6sys_context_t *
          SYS_CONTEXT, const char * SEED, const char * PASSWORD)
     SYS_CONTEXT: global system context

     SEED: a seed to blur the password, can be NULL

     PASSWORD: the password, can be NULL

     Calculates the checksum of a password, and returns it as a string,
     ready to be sent on the network.  If password is empty or NULL,
     then an empty (but not NULL unless internal error) string will be
     returned.  All LW6 protocols should send these checksums instead of
     real passwords, then on server side value can be checked against
     both real password and its checksum.  The seed is here so that
     eavesdropper can't reuse the checksum to connect on random
     sessions.  Seed can typically be the node 'public_url' value.

     *Return value:* a dynamically allocated string

 -- Function: int lw6cnx_password_verify (lw6sys_context_t *
          SYS_CONTEXT, const char * SEED, const char * PASSWORD_HERE,
          const char * PASSWORD_RECEIVED)
     SYS_CONTEXT: global system context

     SEED: a seed to blur the password, can be NULL

     PASSWORD_HERE: the local password, can be NULL

     PASSWORD_RECEIVED: the password received from network, can be NULL

     Tells wether a password received over the network is valid.  The
     'password_here' argument (the local password) will be checksumed so
     that 'password_received' is checked against both clear and
     checksumed values, so it can be in any form.

     *Return value:* 1 if OK, passwords are the same, 0 if not.

 -- Function: int lw6cnx_test_register (lw6sys_context_t * SYS_CONTEXT,
          int MODE)
     SYS_CONTEXT: global system context

     MODE: test mode (bitmask)

     Registers all tests for the libcnx module.

     *Return value:* 1 if test is successfull, 0 on error.

 -- Function: int lw6cnx_test_run (lw6sys_context_t * SYS_CONTEXT, int
          MODE)
     SYS_CONTEXT: global system context

     MODE: test mode (bitmask)

     Runs the 'cnx' module test suite, testing most (if not all...)
     functions.

     *Return value:* 1 if test is successfull, 0 on error.

 -- Function: void lw6cnx_ticket_table_zero (lw6sys_context_t *
          SYS_CONTEXT, lw6cnx_ticket_table_t * TICKET_TABLE)
     SYS_CONTEXT: global system context

     TICKET_TABLE: the ticket table to fill with zero

     Fills the ticket table struct with 0s.

     *Return value:* none.

 -- Function: int lw6cnx_ticket_table_init (lw6sys_context_t *
          SYS_CONTEXT, lw6cnx_ticket_table_t * TICKET_TABLE, int
          HASH_SIZE)
     SYS_CONTEXT: global system context

     TICKET_TABLE: the ticket table to init

     HASH_SIZE: the hash size for both recv/send hashs

     Initialize a ticket table, that is, set it up with two empty hashs.
     Recv hash is filled automatically as it's queried for tickets, send
     hash must be filled explicitely with info from the network.

     *Return value:* none.

 -- Function: void lw6cnx_ticket_table_clear (lw6sys_context_t *
          SYS_CONTEXT, lw6cnx_ticket_table_t * TICKET_TABLE)
     SYS_CONTEXT: global system context

     TICKET_TABLE: the ticket table to clear

     Clears the object (frees memory).

     *Return value:* none.

 -- Function: u_int64_t lw6cnx_ticket_table_get_recv (lw6sys_context_t *
          SYS_CONTEXT, lw6cnx_ticket_table_t * TICKET_TABLE, const char
          * PEER_ID)
     SYS_CONTEXT: global system context

     TICKET_TABLE: the ticket table to query

     PEER_ID: the id of remote node

     Gets the ticket used to communicate with peer, to check its
     incoming (recv) messages.  If ticket does not exist yet, it's
     automatically generated so tunction will always return a non-zero
     value.

     *Return value:* the ticket used to check incoming messages.

 -- Function: void lw6cnx_ticket_table_ack_recv (lw6sys_context_t *
          SYS_CONTEXT, lw6cnx_ticket_table_t * TICKET_TABLE, const char
          * PEER_ID, int ACK_DELAY_MSEC)
     SYS_CONTEXT: global system context

     TICKET_TABLE: the ticket table to query

     PEER_ID: the id of remote node

     ACK_DELAY_MSEC: delay before which we'll consider the ticket as
     really received

     Acknowledges the ticket used to communicate with peer, to check its
     incoming (recv) messages has been received.  This is to avoid
     sending it again when it has been received, as it's kept "forever"
     by peer, we never need to send it again.  The delay is here to
     avoid checking tickets too quickly, for instance one could have
     sent the ticket yet, but for some reason some unsigned messages are
     still in the pipe, typically they transit through another slow
     channel such as httpd while the ticket was sent on udp.

     *Return value:* none.

 -- Function: int lw6cnx_ticket_table_was_recv_exchanged
          (lw6sys_context_t * SYS_CONTEXT, lw6cnx_ticket_table_t *
          TICKET_TABLE, const char * PEER_ID)
     SYS_CONTEXT: global system context

     TICKET_TABLE: the ticket table to query

     PEER_ID: the id of remote node

     Acknowledges the ticket used to communicate with peer, to check its
     incoming (recv) messages has been received.  This is to avoid
     sending it again when it has been received, as it's kept "forever"
     by peer, we never need to send it again.

     *Return value:* the ticket used to check incoming messages.

 -- Function: u_int64_t lw6cnx_ticket_table_get_send (lw6sys_context_t *
          SYS_CONTEXT, lw6cnx_ticket_table_t * TICKET_TABLE, const char
          * PEER_ID)
     SYS_CONTEXT: global system context

     TICKET_TABLE: the ticket table to query

     PEER_ID: the id of remote node

     Gets the ticket used to communicate with peer, to stamp the
     outgoing messages.  If ticket does not exist yet, 0 is returned,
     indeed this value must be initialized with the value the peer gives
     us.

     *Return value:* the ticket used to stamp outgoing messages.

 -- Function: void lw6cnx_ticket_table_set_send (lw6sys_context_t *
          SYS_CONTEXT, lw6cnx_ticket_table_t * TICKET_TABLE, const char
          * PEER_ID, u_int64_t SEND_TICKET)
     SYS_CONTEXT: global system context

     TICKET_TABLE: the ticket table to query

     PEER_ID: the id of remote node

     SEND_TICKET: the ticket to use to stamp outgoing messages

     Sets the ticket used to communicate with peer, to stamp the
     outgoing (send) messages.  This value should be received from the
     network.  Note that once it's set, it's impossible to change it, it
     will remain the same for the whole duration of the node existence.

     *Return value:* NULL

 -- Struct: lw6cnx_connection_s

     This structure holds all data associated to a physical connexion
     with a remote peer.  This includes informations about the local
     node, informations about the peer, and protocol specific details.
     Depending on which backend is used to handle the connection, it
     will behave differently.  If you search for attributes such as
     socket id, search for them in backend_specific_data which is, in
     fact, handle by the backend code.

 -- Member of lw6cnx_connection_s: local_url
     *Type:* 'char *'

     *Definition:* 'char* lw6cnx_connection_s::local_url'

     URL of our local node.

 -- Member of lw6cnx_connection_s: remote_url
     *Type:* 'char *'

     *Definition:* 'char* lw6cnx_connection_s::remote_url'

     URL of the remote node.

 -- Member of lw6cnx_connection_s: remote_ip
     *Type:* 'char *'

     *Definition:* 'char* lw6cnx_connection_s::remote_ip'

     IP address of the remote node.

 -- Member of lw6cnx_connection_s: remote_port
     *Type:* 'int'

     *Definition:* 'int lw6cnx_connection_s::remote_port'

     IP port of the remote node.

 -- Member of lw6cnx_connection_s: password
     *Type:* 'char *'

     *Definition:* 'char* lw6cnx_connection_s::password'

     Password as clear text.

 -- Member of lw6cnx_connection_s: password_send_checksum
     *Type:* 'char *'

     *Definition:* 'char* lw6cnx_connection_s::password_send_checksum'

     Password as a checksum, what will be sent on the network.

 -- Member of lw6cnx_connection_s: local_id_int
     *Type:* 'u_int64_t'

     *Definition:* 'u_int64_t lw6cnx_connection_s::local_id_int'

     ID of the local node, as an unsigned 64-bit integer.

 -- Member of lw6cnx_connection_s: local_id_str
     *Type:* 'char *'

     *Definition:* 'char* lw6cnx_connection_s::local_id_str'

     ID of the local node, as an hexa string.

 -- Member of lw6cnx_connection_s: remote_id_int
     *Type:* 'u_int64_t'

     *Definition:* 'u_int64_t lw6cnx_connection_s::remote_id_int'

     ID of the remote node, as an unsigned 64-bit integer.

 -- Member of lw6cnx_connection_s: remote_id_str
     *Type:* 'char *'

     *Definition:* 'char* lw6cnx_connection_s::remote_id_str'

     ID of the local node, as an hexa string.

 -- Member of lw6cnx_connection_s: dns_ok
     *Type:* 'int'

     *Definition:* 'int lw6cnx_connection_s::dns_ok'

     Will be set to 1 if the peer domain name is the same as the one
     reported in the URL. For instance, if we get a connection from
     23.45.23.45, but this host claims to be on www.foo.bar and DNS
     reports www.foo.bar as being 111.222.111.222 then there's something
     strange.  It could just be someone doing NAT, but in all cases it's
     worth mentionning, so we keep the information here.  Having 0 here
     is a bad point for the connection.

 -- Member of lw6cnx_connection_s: network_reliability
     *Type:* 'int'

     *Definition:* 'int lw6cnx_connection_s::network_reliability'

     The higher, the most reliable message sending will be.  It can
     never be perfect, LW6 will always drop some packets from time to
     time, just to simulate real packet loss and be sure if it happens,
     it's handled nicely.

 -- Member of lw6cnx_connection_s: properties
     *Type:* 'lw6cnx_properties_t'

     *Definition:* 'lw6cnx_properties_t lw6cnx_connection_s::properties'

     Properties got from the backend.

 -- Member of lw6cnx_connection_s: recv_list
     *Type:* 'lw6sys_list_r_t *'

     *Definition:* 'lw6sys_list_r_t* lw6cnx_connection_s::recv_list'

     List of messages received.  This is a list_r and not a plain list
     because it can typically be filled and consumed in different
     threads.

 -- Member of lw6cnx_connection_s: send_mutex
     *Type:* 'lw6sys_mutex_t *'

     *Definition:* 'lw6sys_mutex_t* lw6cnx_connection_s::send_mutex'

     Send mutex, this will be used so that sending operations are
     properly serialized.  Indeed, threads that respond on the fly could
     be likely to call this concurrently.

 -- Member of lw6cnx_connection_s: foo_bar_key
     *Type:* 'u_int32_t'

     *Definition:* 'u_int32_t lw6cnx_connection_s::foo_bar_key'

     This is used to handle keepalive.  Actually, the protocol is that
     from time to time FOO key is sent and then each connection (in a
     tentacle object, typically) is supposed to respond BAR key to show
     it has received the latest message.  This field just stores the
     value so that when we receive a BAR message we know which key to
     check against.

 -- Member of lw6cnx_connection_s: last_send_foo_timestamp
     *Type:* 'int64_t'

     *Definition:* 'int64_t
     lw6cnx_connection_s::last_send_foo_timestamp'

     The last time FOO was sent.

 -- Member of lw6cnx_connection_s: next_send_foo_timestamp
     *Type:* 'int64_t'

     *Definition:* 'int64_t
     lw6cnx_connection_s::next_send_foo_timestamp'

     The next time FOO needs to be sent.

 -- Member of lw6cnx_connection_s: ping_msec
     *Type:* 'int'

     *Definition:* 'int lw6cnx_connection_s::ping_msec'

     The current ping, updated when receiving BAR message.

 -- Member of lw6cnx_connection_s: sent_nb_total
     *Type:* 'int'

     *Definition:* 'int lw6cnx_connection_s::sent_nb_total'

     Number of sent messages on this cnx.

 -- Member of lw6cnx_connection_s: sent_nb_success
     *Type:* 'int'

     *Definition:* 'int lw6cnx_connection_s::sent_nb_success'

     Number of successfully sent messages on this cnx.

 -- Member of lw6cnx_connection_s: sent_nb_fail
     *Type:* 'int'

     *Definition:* 'int lw6cnx_connection_s::sent_nb_fail'

     Number of failed sent messages on this cnx.

 -- Member of lw6cnx_connection_s: last_recv_timestamp
     *Type:* 'int64_t'

     *Definition:* 'int64_t lw6cnx_connection_s::last_recv_timestamp'

     Last time something was received on this connection.

 -- Member of lw6cnx_connection_s: backend_specific_data
     *Type:* 'void *'

     *Definition:* 'void* lw6cnx_connection_s::backend_specific_data'

     Store backend data, this is when, for instance, a socket handle
     will be kept, or a library handle (CURL, to name it).  Common code
     does not know what's in there.

 -- Struct: lw6cnx_packet_s

     Used to hold a network message plus some metadata, such as who it
     is for, and who emitted the message.

 -- Member of lw6cnx_packet_s: logical_ticket_sig
     *Type:* 'u_int32_t'

     *Definition:* 'u_int32_t lw6cnx_packet_s::logical_ticket_sig'

     Logical signature for the packet.

 -- Member of lw6cnx_packet_s: physical_ticket_sig
     *Type:* 'u_int32_t'

     *Definition:* 'u_int32_t lw6cnx_packet_s::physical_ticket_sig'

     Physical signature for the packet.

 -- Member of lw6cnx_packet_s: logical_from_id
     *Type:* 'u_int64_t'

     *Definition:* 'u_int64_t lw6cnx_packet_s::logical_from_id'

     Logical sender.

 -- Member of lw6cnx_packet_s: logical_to_id
     *Type:* 'u_int64_t'

     *Definition:* 'u_int64_t lw6cnx_packet_s::logical_to_id'

     Logical receiver.

 -- Member of lw6cnx_packet_s: msg
     *Type:* 'char *'

     *Definition:* 'char* lw6cnx_packet_s::msg'

 -- Struct: lw6cnx_properties_s

     Used to hold generic client/server properties, set up by the
     backend, can then be queried by the caller.

 -- Member of lw6cnx_properties_s: hint_timeout
     *Type:* 'int'

     *Definition:* 'int lw6cnx_properties_s::hint_timeout'

     Gives an idea of what timeout one can expect with this backend,
     this is not necessarly the exact timeout but it gives an order of
     magnitude.  Unit is seconds.

 -- Member of lw6cnx_properties_s: ping_alter_base
     *Type:* 'int'

     *Definition:* 'int lw6cnx_properties_s::ping_alter_base'

     Modifies the ping returned by terrain experience, this is a way to
     help some kind of connections to be preferred over others.  Set it
     to N to add N milliseconds to the real ping.  Adding a few msecs,
     such as 1 or 5 will just give an advantage to a given connection
     while not giving really wrong results.  High values like 50 or 100
     seriously penalizes some kind of connections, which is whishable,
     think of the httpd way to send things for instance.

 -- Member of lw6cnx_properties_s: ping_alter_percent
     *Type:* 'int'

     *Definition:* 'int lw6cnx_properties_s::ping_alter_percent'

     Modifies the ping returned by terrain experience, this is a way to
     help some kind of connections to be preferred over others.  Set it
     to 100 for default value, means 100% of real ping delay, set it to
     50 to make the algorithm believe lag is twice lower (this means,
     connection twice faster) and set it to 1000 to make believe that
     everything is slow.  In practice only a slight alteration should be
     required, one should still favor really fast connections when it's
     proved in real life that they are faster!

 -- Member of lw6cnx_properties_s: reliable
     *Type:* 'int'

     *Definition:* 'int lw6cnx_properties_s::reliable'

     Wether this connexion is to be considered reliable or not.  Well,
     in LW6, all connexions are unrealiable since LW6 will drop packets
     on purpose to simulate problems, but however, some are well-known
     to be unreliable (UDP...) while others are OK.

 -- Member of lw6cnx_properties_s: backend_id
     *Type:* 'const char *'

     *Definition:* 'const char* lw6cnx_properties_s::backend_id'

     The backend id, beware, this is a static string, must not be freed,
     and depends on backend library to be here, if this one is unloaded,
     will point to nowhere.

 -- Struct: lw6cnx_ticket_table_s

     A common, shared table, to store all the tickets associated with
     various connections.  This needs to be in-memory and quite fast for
     it's called very often (at each message, in fact) to perform sanity
     checks and avoid fakes/cheaters.

 -- Member of lw6cnx_ticket_table_s: recv_spinlock
     *Type:* 'lw6sys_spinlock_t *'

     *Definition:* 'lw6sys_spinlock_t*
     lw6cnx_ticket_table_s::recv_spinlock'

     Lock for the recv_table hash.

 -- Member of lw6cnx_ticket_table_s: recv_ack_spinlock
     *Type:* 'lw6sys_spinlock_t *'

     *Definition:* 'lw6sys_spinlock_t*
     lw6cnx_ticket_table_s::recv_ack_spinlock'

     Lock for the recv_ack_table hash.

 -- Member of lw6cnx_ticket_table_s: send_spinlock
     *Type:* 'lw6sys_spinlock_t *'

     *Definition:* 'lw6sys_spinlock_t*
     lw6cnx_ticket_table_s::send_spinlock'

     Lock for the send_table hash.

 -- Member of lw6cnx_ticket_table_s: recv_table
     *Type:* 'lw6sys_hash_t *'

     *Definition:* 'lw6sys_hash_t* lw6cnx_ticket_table_s::recv_table'

     Hash table containing the tickets for recv operations.  This table
     is auto-generated, if one asks for a ticket for an unknown host,
     one is generated.  The key is the ID (64-bit integer) of the host,
     as an hexa string.

 -- Member of lw6cnx_ticket_table_s: recv_ack_table
     *Type:* 'lw6sys_hash_t *'

     *Definition:* 'lw6sys_hash_t*
     lw6cnx_ticket_table_s::recv_ack_table'

     Hash table containing wether the send ticket was received by a
     given host.  The data is just a NULL pointer, only if the key is
     present, we know we don't need to resend our key to the peer.  An
     easy way to know that the key was sent is if the peer was abled to
     produce a valid message/checksum.  The key is the ID (64-bit
     integer) of the host, as an hexa string.

 -- Member of lw6cnx_ticket_table_s: send_table
     *Type:* 'lw6sys_hash_t *'

     *Definition:* 'lw6sys_hash_t* lw6cnx_ticket_table_s::send_table'

     Hash table containing the tickets for send operations.  Those
     tickets are typically received from the peers themselves who
     generate them on the fly.  The key is the ID (64-bit integer) of
     the host, as an hexa string.

