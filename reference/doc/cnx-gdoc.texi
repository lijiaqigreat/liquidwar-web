@deftypefun {lw6cnx_connection_t *} {lw6cnx_connection_new} (lw6sys_context_t * @var{sys_context}, const char * @var{local_url}, const char * @var{remote_url}, const char * @var{remote_ip}, int @var{remote_port}, const char * @var{password}, u_int64_t @var{local_id}, u_int64_t @var{remote_id}, int @var{dns_ok}, int @var{network_reliability})
@var{sys_context}:  global system context

@var{local_url}:  the local public URL

@var{remote_url}:  the remote public URL

@var{remote_ip}:  the remote IP address

@var{remote_port}:  the remote port

@var{password}:  the password to use

@var{local_id}:  the local ID

@var{remote_id}:  the remote ID

@var{dns_ok}:  1 if no DNS mismatch, 0 if IP does not match public URL

@var{network_reliability}:  drop 1 out of X packets

Create a connection object. This object in itself does
nothing, it's just to share common structures among
modules, more precisely, between cli and srv code.
It's the responsability off the caller/backend to handle
the @code{backend_specific_data} field which is NULL after this
call.

@strong{Return value:}  newly allocated object.
@end deftypefun

@deftypefun {void} {lw6cnx_connection_free} (lw6sys_context_t * @var{sys_context}, lw6cnx_connection_t * @var{connection})
@var{sys_context}:  global system context

@var{connection}:  object to free

Frees a connection object. It's the responsibility of
the caller/backend to handle the @code{backend_specific_data} field.

@strong{Return value:}  none.
@end deftypefun

@deftypefun {int} {lw6cnx_connection_should_send_foo} (lw6sys_context_t * @var{sys_context}, lw6cnx_connection_t * @var{connection}, int64_t @var{now})
@var{sys_context}:  global system context

@var{connection}:  the connection concerned

@var{now}:  the current timestamp

Tells wether a new foo message must be issued.

@strong{Return value:}  1 if true, 0 if false.
@end deftypefun

@deftypefun {void} {lw6cnx_connection_init_foo_bar_key} (lw6sys_context_t * @var{sys_context}, lw6cnx_connection_t * @var{connection}, int64_t @var{now}, int @var{next_foo_delay})
@var{sys_context}:  global system context

@var{connection}:  the connection concerned

@var{now}:  the current timestamp

@var{next_foo_delay}:  the delay (msec) before next foo message is sent

Generates a new foo_bar_key, and schedules the next foo message send timestamp.

@strong{Return value:}  none.
@end deftypefun

@deftypefun {int} {lw6cnx_connection_lock_send} (lw6sys_context_t * @var{sys_context}, lw6cnx_connection_t * @var{connection})
@var{sys_context}:  global system context

@var{connection}:  the connexion to lock

Acquires a "send" lock on the connexion, the idea is to avoid
too threads sending data using the same socket at the same time.
Note that each backend must call this when accessing the socket,
there's no top-level lock for the sake of performance.

@strong{Return value:}  1 on success, 0 if not.
@end deftypefun

@deftypefun {void} {lw6cnx_connection_unlock_send} (lw6sys_context_t * @var{sys_context}, lw6cnx_connection_t * @var{connection})
@var{sys_context}:  global system context

@var{connection}:  the connexion to lock

Releases a "send" lock on the connexion, the idea is to avoid
too threads sending data using the same socket at the same time.
Note that each backend must call this when accessing the socket,
there's no top-level lock for the sake of performance.

@strong{Return value:}  none.
@end deftypefun

@deftypefun {int} {lw6cnx_connection_reliability_filter} (lw6sys_context_t * @var{sys_context}, lw6cnx_connection_t * @var{connection})
@var{sys_context}:  global system context

@var{connection}:  the connexion concerned

Will filter and return true only in "rare" cases when packets
must be artificially dropped for testing purpose.

@strong{Return value:}  1 if message must be sent/received, 0 if not
@end deftypefun

@deftypefun {lw6cnx_packet_t *} {lw6cnx_packet_new} (lw6sys_context_t * @var{sys_context}, u_int32_t @var{logical_ticket_sig}, u_int32_t @var{physical_ticket_sig}, u_int64_t @var{logical_from_id}, u_int64_t @var{logical_to_id}, const char * @var{msg})
@var{sys_context}:  global system context

@var{logical_ticket_sig}:  logical signature

@var{physical_ticket_sig}:  physical signature

@var{logical_from_id}:  logical sender

@var{logical_to_id}:  logical receiver

@var{msg}:  the message text

Creates a new packet object, this simply allocates
memory and copy the string. The string is duplicated,
param msg can be freed.

@strong{Return value:}  new object.
@end deftypefun

@deftypefun {void} {lw6cnx_packet_free} (lw6sys_context_t * @var{sys_context}, lw6cnx_packet_t * @var{packet})
@var{sys_context}:  global system context

@var{packet}:  object to free

Frees a packet object.

@strong{Return value:}  none.
@end deftypefun

@deftypefun {u_int32_t} {lw6cnx_packet_checksum} (lw6sys_context_t * @var{sys_context}, const lw6cnx_packet_t * @var{packet})
@var{sys_context}:  global system context

@var{packet}:  packet to analyse

Calculates a checksum for a packet.

@strong{Return value:}  32-bit checksum.
@end deftypefun

@deftypefun {int} {lw6cnx_packet_compare} (lw6sys_context_t * @var{sys_context}, const lw6cnx_packet_t * @var{a}, const lw6cnx_packet_t * @var{b})
@var{sys_context}:  global system context

@var{a}:  first packet to analyse

@var{b}:  second packet to analyse

Compares two packets. The comparison is made using checksums,
the result is a strcmp-like integer, which is adapted to sorting.
The order has no real signification, it's mostly used to re-order
packets in a pseudo-random order, to ensure no algorithm relies
on packets arriving in the right order.

@strong{Return value:}  -1 if a lower than b, 0 if a equals b, 1 if a is greater than b.
@end deftypefun

@deftypefun {int} {lw6cnx_packet_sort_callback} (lw6sys_context_t * @var{sys_context}, void * @var{func_data}, const void * @var{ptr_a}, const void * @var{ptr_b})
@var{sys_context}:  global system context

@var{func_data}:  additionnal data, function specific

@var{ptr_a}:  first packet to analyse

@var{ptr_b}:  second packet to analyse

Callback usable to sort packets, relies on @code{lw6cnx_packet_compare} internally.

@strong{Return value:}  -1 if ptr_a lower than ptr_b, 0 if ptr_a equals ptr_b, 1 if ptr_a is greater than ptr_b.
@end deftypefun

@deftypefun {char *} {lw6cnx_password_checksum} (lw6sys_context_t * @var{sys_context}, const char * @var{seed}, const char * @var{password})
@var{sys_context}:  global system context

@var{seed}:  a seed to blur the password, can be NULL

@var{password}:  the password, can be NULL

Calculates the checksum of a password, and returns
it as a string, ready to be sent on the network.
If password is empty or NULL, then an empty (but
not NULL unless internal error) string will be
returned. All LW6 protocols should send
these checksums instead of real passwords, then
on server side value can be checked against both
real password and its checksum. The seed is here
so that eavesdropper can't reuse the checksum to
connect on random sessions. Seed can typically
be the node 'public_url' value.

@strong{Return value:}  a dynamically allocated string
@end deftypefun

@deftypefun {int} {lw6cnx_password_verify} (lw6sys_context_t * @var{sys_context}, const char * @var{seed}, const char * @var{password_here}, const char * @var{password_received})
@var{sys_context}:  global system context

@var{seed}:  a seed to blur the password, can be NULL

@var{password_here}:  the local password, can be NULL

@var{password_received}:  the password received from network, can be NULL

Tells wether a password received over the network is valid.
The @code{password_here} argument (the local password) will be
checksumed so that @code{password_received} is checked against both
clear and checksumed values, so it can be in any form.

@strong{Return value:}  1 if OK, passwords are the same, 0 if not.
@end deftypefun

@deftypefun {int} {lw6cnx_test_register} (lw6sys_context_t * @var{sys_context}, int @var{mode})
@var{sys_context}:  global system context

@var{mode}:  test mode (bitmask)

Registers all tests for the libcnx module.

@strong{Return value:}  1 if test is successfull, 0 on error.
@end deftypefun

@deftypefun {int} {lw6cnx_test_run} (lw6sys_context_t * @var{sys_context}, int @var{mode})
@var{sys_context}:  global system context

@var{mode}:  test mode (bitmask)

Runs the @code{cnx} module test suite, testing most (if not all...)
functions.

@strong{Return value:}  1 if test is successfull, 0 on error.
@end deftypefun

@deftypefun {void} {lw6cnx_ticket_table_zero} (lw6sys_context_t * @var{sys_context}, lw6cnx_ticket_table_t * @var{ticket_table})
@var{sys_context}:  global system context

@var{ticket_table}:  the ticket table to fill with zero

Fills the ticket table struct with 0s.

@strong{Return value:}  none.
@end deftypefun

@deftypefun {int} {lw6cnx_ticket_table_init} (lw6sys_context_t * @var{sys_context}, lw6cnx_ticket_table_t * @var{ticket_table}, int @var{hash_size})
@var{sys_context}:  global system context

@var{ticket_table}:  the ticket table to init

@var{hash_size}:  the hash size for both recv/send hashs

Initialize a ticket table, that is, set it up with two
empty hashs. Recv hash is filled automatically as it's queried
for tickets, send hash must be filled explicitely with info
from the network.

@strong{Return value:}  none.
@end deftypefun

@deftypefun {void} {lw6cnx_ticket_table_clear} (lw6sys_context_t * @var{sys_context}, lw6cnx_ticket_table_t * @var{ticket_table})
@var{sys_context}:  global system context

@var{ticket_table}:  the ticket table to clear

Clears the object (frees memory).

@strong{Return value:}  none.
@end deftypefun

@deftypefun {u_int64_t} {lw6cnx_ticket_table_get_recv} (lw6sys_context_t * @var{sys_context}, lw6cnx_ticket_table_t * @var{ticket_table}, const char * @var{peer_id})
@var{sys_context}:  global system context

@var{ticket_table}:  the ticket table to query

@var{peer_id}:  the id of remote node

Gets the ticket used to communicate with peer, to check its incoming
(recv) messages. If ticket does not exist yet, it's automatically
generated so tunction will always return a non-zero value.

@strong{Return value:}  the ticket used to check incoming messages.
@end deftypefun

@deftypefun {void} {lw6cnx_ticket_table_ack_recv} (lw6sys_context_t * @var{sys_context}, lw6cnx_ticket_table_t * @var{ticket_table}, const char * @var{peer_id}, int @var{ack_delay_msec})
@var{sys_context}:  global system context

@var{ticket_table}:  the ticket table to query

@var{peer_id}:  the id of remote node

@var{ack_delay_msec}:  delay before which we'll consider the ticket as really received

Acknowledges the ticket used to communicate with peer, to check its incoming
(recv) messages has been received. This is to avoid sending it again when
it has been received, as it's kept "forever" by peer, we never need to
send it again. The delay is here to avoid checking tickets too quickly,
for instance one could have sent the ticket yet, but for some reason some
unsigned messages are still in the pipe, typically they transit through
another slow channel such as httpd while the ticket was sent on udp.

@strong{Return value:}  none.
@end deftypefun

@deftypefun {int} {lw6cnx_ticket_table_was_recv_exchanged} (lw6sys_context_t * @var{sys_context}, lw6cnx_ticket_table_t * @var{ticket_table}, const char * @var{peer_id})
@var{sys_context}:  global system context

@var{ticket_table}:  the ticket table to query

@var{peer_id}:  the id of remote node

Acknowledges the ticket used to communicate with peer, to check its incoming
(recv) messages has been received. This is to avoid sending it again when
it has been received, as it's kept "forever" by peer, we never need to
send it again.

@strong{Return value:}  the ticket used to check incoming messages.
@end deftypefun

@deftypefun {u_int64_t} {lw6cnx_ticket_table_get_send} (lw6sys_context_t * @var{sys_context}, lw6cnx_ticket_table_t * @var{ticket_table}, const char * @var{peer_id})
@var{sys_context}:  global system context

@var{ticket_table}:  the ticket table to query

@var{peer_id}:  the id of remote node

Gets the ticket used to communicate with peer, to stamp the outgoing
messages. If ticket does not exist yet, 0 is returned, indeed this value
must be initialized with the value the peer gives us.

@strong{Return value:}  the ticket used to stamp outgoing messages.
@end deftypefun

@deftypefun {void} {lw6cnx_ticket_table_set_send} (lw6sys_context_t * @var{sys_context}, lw6cnx_ticket_table_t * @var{ticket_table}, const char * @var{peer_id}, u_int64_t @var{send_ticket})
@var{sys_context}:  global system context

@var{ticket_table}:  the ticket table to query

@var{peer_id}:  the id of remote node

@var{send_ticket}:  the ticket to use to stamp outgoing messages

Sets the ticket used to communicate with peer, to stamp the outgoing (send)
messages. This value should be received from the network. Note that
once it's set, it's impossible to change it, it will remain the same
for the whole duration of the node existence.

@strong{Return value:}  NULL
@end deftypefun

