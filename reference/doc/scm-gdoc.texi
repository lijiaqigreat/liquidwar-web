@deftypefun {lw6sys_hash_t *} {lw6scm_coverage_new} (lw6sys_context_t * @var{sys_context}, lw6sys_list_t * @var{funcs})
@var{sys_context}:  global system context

@var{funcs}:  list of functions, used as an input to size the hash correctly

Creates a new coverage hash, this is a simple hash containing pointers
to integers. At startup hash is empty, whenever a scheme user function is
called, if the entry exists it's incremented, else it's created with an
initial value of 1 (one call).

@strong{Return value:}  newly allocated hash
@end deftypefun

@deftypefun {void} {lw6scm_coverage_call} (lw6sys_context_t * @var{sys_context}, lw6sys_hash_t * @var{coverage}, const char * @var{func})
@var{sys_context}:  global system context

@var{coverage}:  the hash to use to store the update

@var{func}:  the name of the function (its callable scheme name)


Registers a call on a given function.

@strong{Return value:}  none.
@end deftypefun

@deftypefun {void} {lw6scm_coverage_log} (lw6sys_context_t * @var{sys_context}, lw6sys_hash_t * @var{coverage})
@var{sys_context}:  global system context

@var{coverage}:  the hash containing the call data


Logs the information about which function has been called, and how many times.
This is only about scheme functions.

@strong{Return value:}  none
@end deftypefun

@deftypefun {int} {lw6scm_coverage_check} (lw6sys_context_t * @var{sys_context}, int * @var{percent}, lw6sys_hash_t * @var{coverage}, lw6sys_list_t * @var{funcs})
@var{sys_context}:  global system context

@var{percent}:  if not NULL, will contain the percentage of coverage

@var{coverage}:  object to query, containing coverage information

@var{funcs}:  list of functions to check

Checks wether the script code coverage is fine, that is, wether all functions
are called at least once. For each function listed (as a string) in funcs, it will
look in coverage and check wether the entry exists and was called. Note that this
function assumes that in c functions are defined with _scm_my_function (prefixed
with _scm_ and using underscore) while in scm functions are defined with c-my-function
(prefixed with c- and using minus).

@strong{Return value:}  1 if OK, 0 if KO.
@end deftypefun

@deftypefun {char *} {lw6scm_funcname_scm2c} (lw6sys_context_t * @var{sys_context}, const char * @var{funcname})
@var{sys_context}:  global system context

@var{funcname}:  function name to change

Transforms a function name of the form c-my-func to
_scm_my_func.

@strong{Return value:}  new allocated string.
@end deftypefun

@deftypefun {char *} {lw6scm_funcname_c2scm} (lw6sys_context_t * @var{sys_context}, const char * @var{funcname})
@var{sys_context}:  global system context

@var{funcname}:  function name to change

Transforms a function name of the form _scm_my_func to
c-my-func.

@strong{Return value:}  new allocated string.
@end deftypefun

@deftypefun {SCM} {lw6scm_gettext} (lw6sys_context_t * @var{sys_context}, SCM @var{string})
@var{sys_context}:  global system context

@var{string}:  SCM object to convert

For a GNU gettext-like behavior of scheme code,
exported with a name such as _ then calling function
_ from Guile will just do the same as _ in C.

@strong{Return value:}  SCM value, the translated string
@end deftypefun

@deftypefun {int} {lw6scm_test_register} (lw6sys_context_t * @var{sys_context}, int @var{mode})
@var{sys_context}:  global system context

@var{mode}:  test mode (bitmask)

Registers all tests for the libscm module.

@strong{Return value:}  1 if test is successfull, 0 on error.
@end deftypefun

@deftypefun {int} {lw6scm_test_run} (lw6sys_context_t * @var{sys_context}, int @var{mode})
@var{sys_context}:  global system context

@var{mode}:  test mode (bitmask)

Runs the @code{scm} module test suite, testing most (if not all...)
functions.

@strong{Return value:}  1 if test is successfull, 0 on error.
@end deftypefun

@deftypefun {char *} {lw6scm_utils_to_0str} (lw6sys_context_t * @var{sys_context}, SCM @var{string})
@var{sys_context}:  global system context

@var{string}:  SCM object to convert

Helper function, creates a 0 terminated string
from a Guile string. A very common task. This function is just
a wrapper that performs type checking, memory allocation around
standard Guile function.

@strong{Return value:}  newly allocated string, pointer must be freed.
@end deftypefun

@deftypefun {SCM} {lw6scm_utils_to_scm_str_list} (lw6sys_context_t * @var{sys_context}, lw6sys_list_t * @var{c_list})
@var{sys_context}:  global system context

@var{c_list}:  list object to convert

Transform a C list containing strings to a Guile list containing
those strings.

@strong{Return value:}  Guile object, a list of strings
@end deftypefun

@deftypefun {SCM} {lw6scm_utils_to_scm_str_assoc} (lw6sys_context_t * @var{sys_context}, lw6sys_assoc_t * @var{c_assoc})
@var{sys_context}:  global system context

@var{c_assoc}:  assoc object to convert

Transform a C assoc containing strings to a Guile assoc containing
those strings.

@strong{Return value:}  Guile object, an assoc of strings
@end deftypefun

@deftypefun {lw6sys_list_t *} {lw6scm_utils_to_sys_str_list} (lw6sys_context_t * @var{sys_context}, SCM @var{list})
@var{sys_context}:  global system context

@var{list}:  SCM object to convert

Creates a C list from an SCM list containing strings.
Beware of types, function will fail if members are not
all strings, it won't convert them.

@strong{Return value:}  new C list object
@end deftypefun

@deftypefun {lw6sys_assoc_t *} {lw6scm_utils_to_sys_str_assoc} (lw6sys_context_t * @var{sys_context}, SCM @var{assoc})
@var{sys_context}:  global system context

@var{assoc}:  SCM object to convert

Creates a C assoc from an SCM assoc containing strings.
Beware of types, function will fail if members are not
all strings, it won't convert them.

@strong{Return value:}  new C assoc object
@end deftypefun

@deftypefun {int} {lw6scm_c_define_gsubr} (lw6sys_context_t * @var{sys_context}, const char * @var{name}, int @var{req}, int @var{opt}, int @var{rst}, lw6scm_func_t @var{fcn})
@var{sys_context}:  global system context

@var{name}:  name of the function when called from guile

@var{req}:  required parameters

@var{opt}:  optional parameters

@var{rst}:  ? should RTFM to find that out

@var{fcn}:  the function itself (pointer on the C executable code)

Wrapper on @code{scm_c_define_gsubr}, one of the value of this function is that
it does check wether it's documented before registering it. So if you
try to register something not documented, it will fire a warning, which
is a very nice code-quality tool.

@strong{Return value:}  1 on success, 0 on failure.
@end deftypefun

@deftypefun {int} {lw6scm_c_primitive_load} (lw6sys_context_t * @var{sys_context}, const char * @var{filename})
@var{sys_context}:  global system context

@var{filename}:  file to execute

Loads and executes a script. Will add a log message while doing it.

@strong{Return value:}  1 on success, 0 on failure.
@end deftypefun

@deftypefun {void *} {lw6scm_with_guile} (lw6sys_context_t * @var{sys_context}, lw6scm_callback_t @var{func}, void * @var{data})
@var{sys_context}:  global system context

@var{func}:  callback to use

@var{data}:  data to pass to callback

Initializes Guile and calls function within it.

@strong{Return value:}  callback return value.
@end deftypefun

